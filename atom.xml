<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Highway to the Wild]]></title>
  <subtitle><![CDATA[数字游民的养成~]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://sivagao.com/"/>
  <updated>2016-01-31T13:22:10.000Z</updated>
  <id>http://sivagao.com/</id>
  
  <author>
    <name><![CDATA[Siva Gao]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[【HowTo】一小时搭建个论坛 - Discourse 篇]]></title>
    <link href="http://sivagao.com/2016-01/howto-discourse-forum/"/>
    <id>http://sivagao.com/2016-01/howto-discourse-forum/</id>
    <published>2016-01-31T13:22:10.000Z</published>
    <updated>2016-01-31T13:22:10.000Z</updated>
    <content type="html"><![CDATA[<h3 id="u8D77_u56E0"><a href="#u8D77_u56E0" class="headerlink" title="起因"></a>起因</h3><p>很早就关注了数字游民这个话题，现在国内也慢慢的新起来，但是好像搜索了一圈以后没有什么论坛站点来聚集网友们。同时，国外的围绕着 nomad list 的 slack hashtag nomad 早就在那么圈子很火了。所以证明需求是有的，国内的发展也是可期的（虽然对于潜在的数字游民英语应该都不差），我还是非常想搭建这样的论坛来把牧民们汇集起来。</p>
<h3 id="u9009_u578B"><a href="#u9009_u578B" class="headerlink" title="选型"></a>选型</h3><p>这个几乎没什么好说的，slack 因为可以archive 聊天信息，甚至可以给特定信息 highlight，有作为社区的潜质，但是它更多还仅仅是个聊天工具~ 其他诸如Discuz，NodeBB 都是过去时了，样式和玩法太老旧了。通用的平台也不够强大（如贴吧太low，豆瓣小组太简单，其他web上不容易搜索如陌陌，same等）。但是之前玩 ionic 时候对 forum.ionic.com 一直很喜欢，所以毫不犹豫的选择了 <a href="http://www.discourse.org/" target="_blank" rel="external">Discourse</a> 。事实证明它的确很棒（虽然是 Ember 框架写的）<br><img src="/../images/QQ20160131-3.jpg" alt="QQ20160131-3"></p>
<h3 id="u8FC7_u7A0B"><a href="#u8FC7_u7A0B" class="headerlink" title="过程"></a>过程</h3><p>这个部署按照我的一开始打算应该是容易迁移和部署的。 所以毫无疑问选了 <a href="https://github.com/discourse/discourse_docker" target="_blank" rel="external">docker镜像</a>。 具体安装步骤和设置更改有<a href="https://github.com/discourse/discourse/blob/master/docs/INSTALL-cloud.md" target="_blank" rel="external">安装文档</a></p>
<p>所以，我毫不犹豫选择了我免费一年的aws套餐 ec2 实例开始折腾：</p>
<h4 id="ssh__u5230_u673A_u5668"><a href="#ssh__u5230_u673A_u5668" class="headerlink" title="ssh 到机器"></a>ssh 到机器</h4><h4 id="u6253_u5F00_docker_daemon"><a href="#u6253_u5F00_docker_daemon" class="headerlink" title="打开 docker daemon"></a>打开 docker daemon</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cannot connect to the docker daemon:&#10;docker daemon // -d &#36873;&#39033;&#20808;&#21551;&#21160;&#10;service docker stop&#10;ps aux|grep docker &#31561;</span><br></pre></td></tr></table></figure>
<h4 id="u4E0B_u8F7D_u4EE3_u7801"><a href="#u4E0B_u8F7D_u4EE3_u7801" class="headerlink" title="下载代码"></a>下载代码</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /var/discourse&#10;git clone https://github.com/discourse/discourse_docker.git /var/discourse&#10;cd /var/discourse&#10;cp samples/standalone.yml containers/app.yml</span><br></pre></td></tr></table></figure>
<h4 id="u4FEE_u6539_u914D_u7F6E"><a href="#u4FEE_u6539_u914D_u7F6E" class="headerlink" title="修改配置"></a>修改配置</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#20027;&#35201;&#26159;developer email&#65292;&#21518;&#38754;&#27880;&#20876;&#29992;&#36825;&#20010;email&#27880;&#20876;&#20250;&#33258;&#21160;&#26377;admin&#36523;&#20221;&#10;&#10;&#37038;&#20214;&#26381;&#21153;&#36873;&#25321;&#65306;smtp &#26381;&#21153; mailgun &#21518;&#21488;&#10;&#35774;&#32622;&#19968;&#30058;&#21518;&#25214;&#21040;&#37197;&#32622;&#39033; DISCOURSE_SMTP_ADDRESS&#65292;DISCOURSE_SMTP_PORT&#65292;DISCOURSE_SMTP_USER_NAME&#65292;DISCOURSE_SMTP_PASSWORD &#31561;&#10;&#32852;&#31995;&#20102;&#19979; mailgun &#30340;&#20154;&#65292;&#37038;&#31665;&#21448;&#33021;&#29992;&#20102;&#65292;&#20043;&#21069;&#34987;disable&#25481;&#10;&#21487;&#20197;&#30475;&#21457;&#36865;&#25968;&#25454;&#21644;log&#65292;&#25171;&#24320;&#21040;&#36798;&#29575;&#31561;&#31561; &#21518;&#21488; https://mailgun.com/app/logs/&#10;todo: &#28155;&#21152; txt &#35760;&#24405;dnspod &#20351;&#24471;&#21487;&#20197;&#29992;sivagao.com &#21457;&#36865;&#37038;&#20214; custom domain&#10;&#10;&#22240;&#20026;aws ec2 &#20813;&#36153;&#26426;&#22120;&#30340;&#20869;&#23384;&#19981;&#22815;&#65292;&#25152;&#20197;&#35201;&#20462;&#25913;&#37197;&#32622; UNICORN_WORKERS &#65306;2 &#20004;&#20010;&#23454;&#20363;&#65292;128M &#26469;&#32531;&#23384;&#31561;</span><br></pre></td></tr></table></figure>
<p>一开始邮件发不了，但是没法激活。通过<a href="https://meta.discourse.org/t/create-admin-account-from-console/17274" target="_blank" rel="external">命令行来创建管理员帐号</a></p>
<h4 id="u7F16_u8BD1_u548C_u542F_u52A8"><a href="#u7F16_u8BD1_u548C_u542F_u52A8" class="headerlink" title="编译和启动"></a>编译和启动</h4><p>./launcher bootstrap app #大概几分钟，中间还提示机器不够用…<br>./launcher start app</p>
<p>配置 DNS，需要添加一个 A 记录，来把 discourse.sivagao.com 打到 aws机器上。</p>
<h4 id="u7AD9_u70B9_u540E_u53F0_u548C_u914D_u7F6E"><a href="#u7AD9_u70B9_u540E_u53F0_u548C_u914D_u7F6E" class="headerlink" title="站点后台和配置"></a>站点后台和配置</h4><p>很顺畅的就部署完毕，浏览器访问一切正常。进入后台设置站点名称和logo（用keynote和两款漂亮的字体搞定），系统语言等。并且把一些文章如welcome欢迎页等建立起来</p>
<p><img src="/../images/QQ20160131-0.jpg" alt="QQ20160131-0"></p>
<p><img src="/../images/QQ20160131-2.jpg" alt="QQ20160131-2"></p>
<p><img src="/../images/QQ20160131-1.jpg" alt="QQ20160131-1"></p>
<h3 id="u4E0A_u7EBF_u5566_uFF0C_u6492_u82B1"><a href="#u4E0A_u7EBF_u5566_uFF0C_u6492_u82B1" class="headerlink" title="上线啦，撒花"></a>上线啦，撒花</h3><p><a href="http://discourse.sivagao.com" target="_blank" rel="external">欢迎光临 - 数字游民</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="u8D77_u56E0"><a href="#u8D77_u56E0" class="headerlink" title="起因"></a>起因</h3><p>很早就关注了数字游民这个话题，现在国内也慢慢的新起来，但是好像搜索了一圈以后没有什么论坛站点来聚集网友们]]>
    </summary>
    
      <category term="HowTo" scheme="http://sivagao.com/categories/HowTo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[【Angular2】开发指南 2. 架构综述]]></title>
    <link href="http://sivagao.com/2016-01/angular2-transalte-angular2-overview/"/>
    <id>http://sivagao.com/2016-01/angular2-transalte-angular2-overview/</id>
    <published>2016-01-31T13:22:04.000Z</published>
    <updated>2016-01-31T13:22:04.000Z</updated>
    <content type="html"><![CDATA[<h2 id="u67B6_u6784_u7EFC_u8FF0"><a href="#u67B6_u6784_u7EFC_u8FF0" class="headerlink" title="架构综述"></a>架构综述</h2><p>Angular 2 是一个帮助我们用 Html 和 JavaScript 构建客户端程序的开发框架。 框架有几个相互配合的库组成，有些是核心库有些是可选的库。<br><a id="more"></a><br>我们的应用程序由：</p>
<ul>
<li>使用Angularized化的模板创作HTML模板</li>
<li>书写组件类来管理模板</li>
<li>利用服务添加应用逻辑</li>
<li>用Angular的启动器（boostrapper）来启动顶层根组件</li>
</ul>
<p>启动后的Angular程序，在浏览器中展示应用内容，通过我们的提供的指令来响应用户的交互。</p>
<p>我们在高纬度通过俯视看这些坐标型的概念来获得全局认识，详细的讲解会在后续的章节逐步开展。<br>一个Angular2的应用程序一般有以下7个主要的部分组成：</p>
<p><img src="https://raw.githubusercontent.com/gf-rd/blog/master/assets/angular2-developer-guides/2-overview/14527529748957.jpg" alt=""></p>
<p>这个系统框图展示了一般 Angular 2 应用程序的八个主要的组成部分</p>
<ol>
<li><a href="/#module">模块</a></li>
<li><a href="/#component">组件</a></li>
<li><a href="/#template">模板</a></li>
<li><a href="/#metadata">元数据</a></li>
<li><a href="/#databinding">数据绑定</a></li>
<li><a href="/#service">服务</a></li>
<li><a href="/#directive">指令</a></li>
<li><a href="/#dependencyinject">依赖注入</a></li>
</ol>
<blockquote>
<p>该章节的代码示例可以在官网看到 - <a href="https://angular.io/resources/live-examples/architecture/ts/plnkr.html" target="_blank" rel="external">live example</a></p>
</blockquote>
<h3 id="u6A21_u5757"><a href="#u6A21_u5757" class="headerlink" title="模块"></a><a name="module"> 模块</a></h3><p>Angular 应用是模块化的。<br>通常我们的应用程序由多个模块组合而成。 一个典型的模块是内聚性良好来解决单一问题的代码块，它通常在代码中导出某些值，譬如一个的类。</p>
<blockquote>
<p><strong>模块是可选的</strong><br>我们高度推荐模块化的设计。TypeScript 对 ES2015 的模块语法有着非常好的支持，我们这章节也是默认采取模块语法来实现模块化的设计。这就是我们把模块列为基础构建块的原因了。</p>
<p>Angular 本身不需要模块化的设计也不要求那样的语法。如果你不想用当然可以不采用。每章节在你罗列出清晰的 <code>import</code> 和 <code>export</code> 语句后都可以替换掉。</p>
<p>在 JavaScript track 中找到设置和代码组织的方法（在页面顶部的下拉列表框中），那就就可以看到将仅仅用老旧低版本的 JavaScript 和无模块系统的代码示例</p>
</blockquote>
<p>我们遇到的第一个模块很可能就是导出的组件类的模块。组件是基础的Angular构建块，我们已经提到它很多次了。我们会在接下的部分详细讲解。目前，我们仅仅需要知道组件类也是一种我们可以从模块中导出的代码</p>
<p>大部分应用会有一个 <code>AppComponent</code>。一般来说， 我们在项目目录中发现名叫 <code>app.component.ts</code>的文件. 到该文件中我们会发现有如下的export语句:</p>
<p>app/app.component.ts (部分节选)<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppComponent</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure></p>
<p>export 语句告诉 TypeScript，该模块的 AppComponent 类是公共的（public）和可以在应用的其他模块中被访问到。</p>
<p>当我们需要引用 AppComponent 的时候，只需要像这样 import 就行：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;AppComponent&#125; <span class="keyword">from</span> <span class="string">'./app.component'</span>;</span><br></pre></td></tr></table></figure>
<p>import 语句告诉系统：可以在同级目录下名叫 app.component 的模块中获得 AppComponent. 模块名（或者模块Id）通常和没有扩展名的文件名是保持一致的。</p>
<h4 id="u5E93_u6A21_u5757_28Library_Modules_29"><a href="#u5E93_u6A21_u5757_28Library_Modules_29" class="headerlink" title="库模块(Library Modules)"></a>库模块(Library Modules)</h4><p>一些模块可能是其他模块的库。 Angular 本身以名叫 barrels 库模块的集合形式提供。每个 Angular 的库其实是多个相关的私有模块的切面（facade）导出。</p>
<p><code>angular/core</code> 库是主要的Angular库模块，它提供了我们应用开发所需的大部分内容。<br>当前还有一些一些重要的库模块，如 <code>angular2/common</code>， <code>angular2/router</code> 和 <code>angular2/http</code>。</p>
<blockquote>
<p>在可以这<a href="https://github.com/angular/angular/blob/master/modules/angular2/docs/bundles/overview.md" target="_blank" rel="external">Modules，barrels和bundles</a>获得更多关于 Angular 组织和分发的模块。</p>
</blockquote>
<p>我们以类似的方式，从Angular的库模块中导出我们需要的部分。例如，我们像这样从 angular/core 模块导入 Component 函数：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Component&#125; <span class="keyword">from</span> <span class="string">'angular2/core'</span>;</span><br></pre></td></tr></table></figure>
<p>对比我们之前导入 AppComponent 的语法：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;AppComponent&#125; <span class="keyword">from</span> <span class="string">'./app.component'</span>;</span><br></pre></td></tr></table></figure>
<p>看到区别了吗？ 在第一个例子中， 当我们从 Angular 库模块中导入时，语句中的模块名angular/core 是没有路径前缀的(‘./xx’)</p>
<p>当我们从我们自己的文件中导入的时候，我们在文件名前加上路径前缀。 在这个例子中，我们申明了相对路径形式(./)。 那就意味着模块的代码和导入它的文件在当前相同的目录下。我们可以通过这样的语法在导入在应用的目录结构中其他位置的模块文件。</p>
<blockquote>
<p>我们使用 ECMAScript 2015 (ES2015) 的导入导出语法。 在<a href="http://www.2ality.com/2014/09/es6-modules-final.html" target="_blank" rel="external">这里</a>了解更多语法。</p>
<p>在模块加载和导入背后的基础设施是重要的主题。但这是超出了介绍 Angular 的范畴外主题概览。所以我们集中精力在我们的Angular应用程序上，目前了解 import 和 export 就够用啦。</p>
</blockquote>
<p>要记住的关键点：</p>
<ul>
<li>Angular应用是由模块构建成的。</li>
<li>模块导出某些部分 - 类，函数，值，来在其他模块中被导入</li>
<li>我们倾向于把我们的应用代码拆分成一系列的模块集合，每个模块完成好它负责的一件事。</li>
</ul>
<h3 id="u7EC4_u4EF6"><a href="#u7EC4_u4EF6" class="headerlink" title="组件"></a><a name="component"> 组件</a></h3><p>一个组件控制着一部分我们称之为视图的屏幕内容。应用外围包含导航链接的壳，heroes 列表，hero 编辑器等，他们全是被组件component控制的视图。<br>我们在一个类中定义组件的应用逻辑来支持视图的展示，通过一系列的熟悉和方法的API定义，组件类来和view视图做交互</p>
<p>例如 HeroListComponent，拥有heros属性，它是通过一个服务返回heros数据的数组。同时，它也有 selectHero() 方法来设置 selectedHero 属性，当用户在列表中点击一个具体hero时。这样component类的如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">HeroListComponent</span> </span>&#123;</span><br><span class="line">  constructor(private _service: HeroService) &#123; &#125;</span><br><span class="line">  </span><br><span class="line">  heroes:Hero[];</span><br><span class="line">  selectedHero:Hero;</span><br><span class="line">  </span><br><span class="line">  ngOnInt() &#123;</span><br><span class="line">    <span class="keyword">this</span>.heroes = service.getHeroes();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  selectHero(hero: Hero) &#123; <span class="keyword">this</span>.selectedHero = hero; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当用户在应用程序中移动浏览时，Angular 会创建，更新，销毁组件。当然我们开发者可以通过 lifecycle hooks 钩子在组件的生命周期的关键时间点插入特定的处理</p>
<blockquote>
<p>我们并未在示例代码中展示这些钩子，你们要记住：在后续的章节会详细讲解</p>
<p>当然我们会疑问谁会调用组件的构造函数，谁提供那些服务参数。目前，我们只需要知道Angular会在我们需要的时候调用组件的构造函数和提供所需的<code>HeroService</code></p>
</blockquote>
<h3 id="u6A21_u677F"><a href="#u6A21_u677F" class="headerlink" title="模板"></a><a name="template"> 模板</a></h3><p>我们通过组件相应的模板来定义它的视图。模板就是以html的形式告诉Angular如何渲染组件<br>绝大部分的模板看起来很像html，除了部分特殊的语法。以下是我们的HeroList组件的模板</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">h2</span>&gt;</span>Hero List<span class="tag">&lt;/<span class="title">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">div</span> *<span class="attribute">ng-for</span>=<span class="value">"#hero of heroes"</span> (<span class="attribute">click</span>)=<span class="value">"selectHero(hero)"</span>&gt;</span></span><br><span class="line">  &#123;&#123;hero.name&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">hero-detail</span> *<span class="attribute">ng-if</span>=<span class="value">"selectedHero"</span> [<span class="attribute">hero</span>]=<span class="value">"selectedHero"</span>&gt;</span><span class="tag">&lt;/<span class="title">hero-detail</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>&lt;h2&gt;</code>和<code>&lt;div&gt;</code>的标签我们很熟悉了，但是*ng-for, {‌{hero.name}}, (click), [hero], 和 <code>&lt;hero-detail&gt;</code> 是什么鬼。<br>它们是<a href="https://github.com/gf-rd/blog/issues/18" target="_blank" rel="external">Angular的模板语法</a>的一部分， 我们在后续学习中会慢慢熟悉它们。</p>
<p>我们先把注意力集中在最后一行。 <code>&lt;hero-detail&gt;</code> 标签个代表HeroDetailCopment的自定义元素。</p>
<p><code>HeroDetailComponent</code> 这个组件不同于我们之前学习的 <code>HeroListComponent</code>。 <code>HeroDetailComponent</code> （代码还没展示）展示了关于那个用户在 <code>HeroListComponent</code>中所选的具体英雄的相关事实，<code>HeroDetailComponent</code> 是 <code>HeroListComponent</code> 的子组件。<br>可以观察到，<hero-detail> 在那些我们熟悉的 HTML 元素中待得很好 - 我们可以也需要把我们的自定义组件和原生的HTML元素在同一个布局（html）中相互混合。通过这样的方式，我们组合复杂的组件树来构建出我们功能丰富的应用。</hero-detail></p>
<p><img src="https://raw.githubusercontent.com/gf-rd/blog/master/assets/angular2-developer-guides/2-overview/14527575575368.jpg" alt=""></p>
<h3 id="u5143_u6570_u636E"><a href="#u5143_u6570_u636E" class="headerlink" title="元数据"></a><a name="metadata"> 元数据</a></h3><p>元数据，告诉Angular如何处理一个类<br>我们现在回头看下之前定义的 HeroListComponent 的代码，我们发现它仅仅就是一个类，没有什么痕迹标明它是什么框架，或是Angular相关的。<br>事实上如果我们不告诉Angular它是一个组件的话，从代码上看它就仅仅是一个普通的类。<br>我们通过元数据告诉 Angular 这段代码是指 HeroListComponent 组件定义。<br>在 TypeScript 中最简单是通过装饰器来附加元数据信息。 这是 HeroListComponent 的元数据例子：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Component(&#123;</span><br><span class="line">  selector:    <span class="string">'hero-list'</span>,</span><br><span class="line">  templateUrl: <span class="string">'app/hero-list.component.html'</span>,</span><br><span class="line">  directives:  [HeroDetailComponent],</span><br><span class="line">  providers:   [HeroService]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">HeroesComponent</span> </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure>
<p>装饰器就是一个方法，所以装饰器一般也有配置参数。 @Component 装饰器就需要一个配置对象来给Angular提供如何创建和展示组件和它对应视图的信息。</p>
<p>我们在看下其他可能的 @Component 配置项：</p>
<ul>
<li><code>selector</code>: css 选择器告诉 Angular 当它在父HTML中发现<code>&lt;hero-list&gt;</code>时创建和插入该组件实例。如果应用壳（或一个组件）的模板包含：</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">hero-list</span>&gt;</span><span class="tag">&lt;/<span class="title">hero-list</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Angular 在 这标签间插入一个 HeroListComponent 组件实例</p>
<ul>
<li><code>templateUrl</code>: 我们上述看到组件的模板地址。</li>
<li><code>directives</code>: 是该模板所需的组件或指令的数组。正如我们在模板最后一行看到的，我们预期Angular会根据<code>&lt;hero-detail&gt;</code>标签所示的地方，来插入一个 <code>HeroDetailComponent</code> 。Angular 只会当我们在 <code>directives</code> 数组中提到 <code>HeroDetailComponent</code> 才会这么做。</li>
<li><code>providers</code>: 是组件所需的服务的依赖注入的提供器数组。正是通过这个属性angular知道该组件的构造器需要 <code>HeroService</code> 服务提供展示所需要的 heros 数据数组。</li>
</ul>
<p>@Component 函数传入配置对象后，转换为附加在组件类定义上的元数据。Angular 在运行时通过发现元数据来知道如何做正确的事情。</p>
<p>模板，元数据和组件一起描述了视图。<br>随着我们不断了解Angular2，我们也逐步学习其他通过元数据装饰器来指导Angular行为的常用装饰器，如：<code>@Injectable</code>, <code>@Input</code>, <code>@Output</code>, <code>@RouterConfig</code> 等</p>
<p>记住：我们必须在代码中加入相应的元数据，这样Angular才知道如何处理和运行一些构建块。</p>
<h3 id="u6570_u636E_u7ED1_u5B9A"><a href="#u6570_u636E_u7ED1_u5B9A" class="headerlink" title="数据绑定"></a><a name="databinding"> 数据绑定</a></h3><p>不借助框架，我们需要手动把数据值更新到Html的控件中和把用户的交互转变为值变化和方法调用。手工写这种推拉的更新逻辑非常费时，而且容易出错。正如熟练的jQuery程序员证明的那样是场噩梦！<br>Angular支持数据绑定，一种协调同步模板和组件其他部分的机制。通过在模板中加入binding绑定的标记，我们告诉Angular如何把两个部分组合在一起。<br>在Angular中，有四种形式的数据绑定语法。 每种形式都需要有个方向可以是指向DOM，或者是来自DOM，或者是双向的。正如图表展示的那样：<br><img src="https://raw.githubusercontent.com/gf-rd/blog/master/assets/angular2-developer-guides/2-overview/14527566716026.jpg" alt=""></p>
<p>在 example 模板中， 我们展示了三种数据绑定的语法格式：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">...</span> &gt;</span>&#123;&#123;hero.name&#125;&#125;<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">hero-detail</span> <span class="attribute">...</span> [<span class="attribute">hero</span>]=<span class="value">"selectedHero"</span>&gt;</span><span class="tag">&lt;/<span class="title">hero-detail</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">...</span> (<span class="attribute">click</span>)=<span class="value">"selectHero(hero)"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
  这种是字符串内插，来在div 标签中显示组件的 hero.name 属性<br>[hero] 是属性绑定，把selectedHero 属性值从HeroListComponent 传递到 HeroDetailComponent 组件的 hero 属性下。<br>(click) 是事件绑定，当用户点击 hero的名字时候调用组件的selectHero方法<br><br>双向数据绑定是第四种重要的绑定形式，通过 ng-model 指令directive把属性和事件绑定结合起来。在HeroDetailComponent的模板中有个例子<br><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">input</span> [(<span class="attribute">ng-model</span>)]=<span class="value">"hero.name"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Angular 每个 JavaScript 事件循环中一次性处理全部的数据绑定，从应用的组件树根部开始，深度优先。具体细节我们在后续章节有阐述，现在看起来数据绑定在模板和组件间和父子组件之间的通讯都起着非常重要的作用。</p>
<h3 id="u6307_u4EE4"><a href="#u6307_u4EE4" class="headerlink" title="指令"></a><a name="directive"> 指令</a></h3><p>我们的angular模板是动态的。 当angular渲染模板时，它把根据directive提供的指示来把模板变成DOM。</p>
<p>指令是配有指令元数据的类。 在typescript中，我们通过@Directive装饰器来给类添加元数据。</p>
<p>我们已经了解了一种形式的指令：Component。 组件就是一个拥有模板，通过@Componenter而不是@Directive 来提供模板导向的特性。</p>
<blockquote>
<p>组件在技术层面上讲是一种指令。但组件对Angular应用来说非常独特和重要，所以在这篇技术概览中，我们把这两个概览分开来讲述。</p>
</blockquote>
<p>还有其他两种，我们称为结构指令和属性attribute指令。</p>
<p>他们通常在元素标签中以属性形式出现，通过名称或更多通过一个赋值的目标或绑定</p>
<h4 id="u7ED3_u6784_u6307_u4EE4"><a href="#u7ED3_u6784_u6307_u4EE4" class="headerlink" title="结构指令"></a>结构指令</h4><p>结构指令通过添加，删除和替换在DOM树中的元素来改变布局layouts。 看下自带的两个结构指令的用法：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> *<span class="attribute">ngFor</span>=<span class="value">"#hero of heroes"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">hero-detail</span> *<span class="attribute">ngIf</span>=<span class="value">"selectedHero"</span>&gt;</span><span class="tag">&lt;/<span class="title">hero-detail</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>*ngFor</code> 告诉Angular为<code>heroes</code>列表中的每一个hero创建单独的div</li>
<li><code>*ngIf</code> 只有当选择的hero存在的时，才包含 HeroDetail 组件</li>
</ul>
<h4 id="u5C5E_u6027_u6307_u4EE4"><a href="#u5C5E_u6027_u6307_u4EE4" class="headerlink" title="属性指令"></a>属性指令</h4><p>属性指令来改变现有元素的展现和行为。在模板中他们看起来想是正常的HTML属性，因此得名。<br>如 ngModel 指令，用于实现数据的双向绑定，如：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">input</span> [(<span class="attribute">ngModel</span>)]=<span class="value">"hero.name"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Angular 自带了一小部分的其他组件，既包含了改变布局结构（如. ngSwitch）和修改DOM和组件某些方面的（如 ngStyle 和 ngClass）</p>
<h3 id="u670D_u52A1"><a href="#u670D_u52A1" class="headerlink" title="服务"></a><a name="service"> 服务</a></h3><p>Service 是个很宽泛的概念，来封装应用所需要的任意值，方法和特性。<br>虽然任何代码都可以成为service，但通常，一个服务有一个特定聚焦的目的。譬如：</p>
<ul>
<li>日志服务</li>
<li>数据服务</li>
<li>message bus消息总线</li>
<li>税收计算器</li>
<li>应用配置功能</li>
</ul>
<p>Angular本身没有对service有特殊的定义，没有所谓的基础类，没有用于注册service的地方。但services对Angular也是至关重要的。</p>
<p>这里是用于打日志到浏览器控制台的服务类代码（app/logger.service.ts）：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line">  log(msg: any)   &#123; <span class="built_in">console</span>.log(msg); &#125;</span><br><span class="line">  error(msg: any) &#123; <span class="built_in">console</span>.error(msg); &#125;</span><br><span class="line">  warn(msg: any)  &#123; <span class="built_in">console</span>.warn(msg); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里展示用于拉取英雄数据并在Promise中返回数据的HeroService服务。该服务依赖于 LoggerSevice 和另一个用于和服务器交互沟通这些底层事物的 BackendService。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">HeroService</span> </span>&#123;</span><br><span class="line">  constructor(</span><br><span class="line">    private _backend: BackendService,</span><br><span class="line">    private _logger: Logger) &#123; &#125;</span><br><span class="line"></span><br><span class="line">  private _heroes:Hero[] = [];</span><br><span class="line"></span><br><span class="line">  getHeroes() &#123;</span><br><span class="line">    <span class="keyword">this</span>._backend.getAll(Hero).then( (heroes:Hero[]) =&gt; &#123;</span><br><span class="line">      <span class="keyword">this</span>._logger.log(<span class="string">`Fetched <span class="subst">$&#123;heroes.length&#125;</span> heroes.`</span>);</span><br><span class="line">      <span class="keyword">this</span>._heroes.push(...heroes); <span class="comment">// fill cache</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._heroes;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>服务在Angular应用中也是无处不在的。<br>我们的组件是服务的使用消费大户。我们通常保持组件类组件精简轻量，它本身不去从服务器拉取数据，不做用户数输入的验证，不直接把日志信息达到console中。他们把这些任务委派给一个服务。</p>
<p>一个好的组件拥有属性和方法来用于数据绑定，同时把一些通用的业务委托给服务。</p>
<p>Angular 不强制约束限制这样的原则，即使你可能写一个3k多行的大杂烩的巨型组件。</p>
<p>但是它帮助我们实施时遵守这样的原则，譬如通过依赖注入让那些处理应用业务逻辑的services可以方便的被组件使用。</p>
<h3 id="u4F9D_u8D56_u6CE8_u5165"><a href="#u4F9D_u8D56_u6CE8_u5165" class="headerlink" title="依赖注入"></a><a name="dependencyinject"> 依赖注入</a></h3><p>依赖注入是类在创建新的实例时提供它所需的全部依赖的一种声明方式。绝大部分的依赖是服务。angular通过依赖注入机制给component提供它们所需要的服务。<br>在 TypeScript 中，Angular 通过查看组件的构建函数的参数获得组件所需要的services，譬如 HeroListComponent 的构建函数需要 HeroService，代码如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">constructor(service: HeroService) &#123;</span><br><span class="line">  <span class="keyword">this</span>.heroes = service.getHeroes();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当Angular创建该组件时，它首先通过向<code>Injector</code>请求所需要的service实例.<br>Injector是维持存放着它创建的各服务实例的容器<br>Injector 通过 <code>Provider</code> 来创建新的服务实例<br>Provider 是用来创建service的代码方法</p>
<p>我们可以在应用组件树的任意的层级注册providers，通常我们在启动bootstrap应用的根组件出注册，这样整个应用的其他地方都可以用同一个服务实例。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bootstrap(AppComponent, [</span><br><span class="line">  BackendService, HeroService, Logger</span><br><span class="line">]);</span><br></pre></td></tr></table></figure>
<p>同样，我们可以在特定组件层级来注册：通过annotation语法</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bootstrap(AppComponent, [</span><br><span class="line">  BackendService, HeroService, Logger</span><br><span class="line">]);</span><br></pre></td></tr></table></figure>
<p>更详细的依赖注入请见后续的章节一探究竟~</p>
<h3 id="u5C0F_u7ED3"><a href="#u5C0F_u7ED3" class="headerlink" title="小结"></a>小结</h3><p>通过以上的介绍，我们基本了解了构建 Angular 应用的八个主要的构建块</p>
<ol>
<li><a href="/#module">模块</a></li>
<li><a href="/#component">组件</a></li>
<li><a href="/#template">模板</a></li>
<li><a href="/#metadata">元数据</a></li>
<li><a href="/#databinding">数据绑定</a></li>
<li><a href="/#service">服务</a></li>
<li><a href="/#directive">指令</a></li>
<li><a href="/#dependencyinject">依赖注入</a></li>
</ol>
<p>这是 Angular 应用中任何其他部分的基石，足够我们开始新的Angular2项目了。尽管它并没有包含我们所需知道的一切。</p>
<h3 id="u5176_u4ED6_u90E8_u5206"><a href="#u5176_u4ED6_u90E8_u5206" class="headerlink" title="其他部分"></a>其他部分</h3><p>以下是一份简短的按照字母表顺序排序的其他 Angular 的特性和服务. 绝大部分会在后续的章节中有进一步的讲解和使用。</p>
<h4 id="u52A8_u753B"><a href="#u52A8_u753B" class="headerlink" title="动画"></a>动画</h4><p>面向未来的动画库，使得开发者可以很容易的给组件行为加动画，而不需要过多了解动画技术或css的知识</p>
<h4 id="u542F_u52A8"><a href="#u542F_u52A8" class="headerlink" title="启动"></a>启动</h4><p>用来配置和启动应用程序的根组件的方法</p>
<h4 id="u6539_u53D8_u76D1_u6D4B"><a href="#u6539_u53D8_u76D1_u6D4B" class="headerlink" title="改变监测"></a>改变监测</h4><p>Angular 内部如何知道组件属性改变和何时去更新页面显示。 Angular如合理利用 zones 机制去拦截异步行为和实施它的脏检查策略</p>
<h4 id="u7EC4_u4EF6_u8DEF_u7531"><a href="#u7EC4_u4EF6_u8DEF_u7531" class="headerlink" title="组件路由"></a>组件路由</h4><p>利用该Service，用户像浏览器通过urls跳转一样，在多屏应用中浏览跳转切换页面。</p>
<h4 id="u4E8B_u4EF6"><a href="#u4E8B_u4EF6" class="headerlink" title="事件"></a>事件</h4><p>DOM触发事件，同样组件和服务也可以触发。Angular 提供了用于发布和订阅事件的机制，该机制包括了<a href="https://github.com/zenparsing/es-observable" target="_blank" rel="external">RxJS 观察者提议</a>的实现</p>
<h4 id="u8868_u5355"><a href="#u8868_u5355" class="headerlink" title="表单"></a>表单</h4><p>通过HTML为基础的验证和脏检查，支持复杂数据条目的场景</p>
<h4 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h4><p>通过 Angular HTTP Client客户端，和服务器通信来拉取数据，提交保存数据和调用服务器端的方法。</p>
<h4 id="u751F_u547D_u5468_u671F_u94A9_u5B50"><a href="#u751F_u547D_u5468_u671F_u94A9_u5B50" class="headerlink" title="生命周期钩子"></a>生命周期钩子</h4><p>通过实现生命周期钩子的接口，我们开发者可以在组件生命周期的关键时刻（如从创建到销毁）插入自己的行为</p>
<h4 id="u7BA1_u9053"><a href="#u7BA1_u9053" class="headerlink" title="管道"></a>管道</h4><p>用来转化格式化数据来显示的服务。在模板层使用pipes管道来提升用户体验，譬如，下方展示了 currency 现金的管道表达式：<code>price | currency: &#39;USD&#39;:true</code> 来把价格为42.33格式化为<code>$42.33</code></p>
<h4 id="u6D4B_u8BD5"><a href="#u6D4B_u8BD5" class="headerlink" title="测试"></a>测试</h4><p>Angular提供的测试库可以和框架本身来交互，从而可以方便的给我们的应用程序做单元测试</p>
<blockquote>
<h3 id="u4E0B_u4E00_u7AE0"><a href="#u4E0B_u4E00_u7AE0" class="headerlink" title="下一章"></a>下一章</h3><p><a href="https://github.com/gf-rd/blog/issues/19" target="_blank" rel="external">3. 数据展示</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u67B6_u6784_u7EFC_u8FF0"><a href="#u67B6_u6784_u7EFC_u8FF0" class="headerlink" title="架构综述"></a>架构综述</h2><p>Angular 2 是一个帮助我们用 Html 和 JavaScript 构建客户端程序的开发框架。 框架有几个相互配合的库组成，有些是核心库有些是可选的库。<br>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[【HowTo】整理照片]]></title>
    <link href="http://sivagao.com/2016-01/howto-photos-tidy/"/>
    <id>http://sivagao.com/2016-01/howto-photos-tidy/</id>
    <published>2016-01-31T13:21:57.000Z</published>
    <updated>2016-01-31T13:21:57.000Z</updated>
    <content type="html"><![CDATA[<p>这年头，专业的数码相机越来越便宜，同时手机自带的摄像头越来越专业。所以，一不小心可能大家手头的照片很容易攒个数千张。那些照片记录了当时的可爱时光，现在也不舍得删去，但是也静静待在手机/电脑的存储中，值到一天越来越小的可用空间提醒着你『是时候要收拾整理下了！』</p>
<p>从照片这个话题说起来，需求链大概是这样的『拍摄，存储，整理，编辑修改创作，分享』等</p>
<p>我们就先聊聊今天的主角 Google Photos 帮我们在存储和整理 这个关键步骤的替我们完成的事情。和国内使用的一些注意点。</p>
<p>通过手机端 iOS APP，安装后进入简单的Google登录后，会提示备份，然后APP就会在后台开始漫长的上传（考虑到我们的网速 - 深圳联通，通过shadowsocks（部署在新加坡的aws节点），来连接Google photos的服务器），具体进度可以在智能助理中看到~</p>
<p>上传完毕后，Google就开始了它的各种计算图像分析和识别（主要是meta信息处理，如geolocation地理位置，拍摄时间等）这样用于生成自动创建的事件『特定时间段通常一天的多张照片组成，按照拍摄时间和地理位置切分』，这样在手机上、浏览器上看到的就是一个非常顺畅的故事连环画了。这个功能的确是十分惊艳，好像其他家都没提供。<br><img src="/../images/QQ20160131-1.png" alt="QQ20160131-1"></p>
<p>然后高质量的图片上传无限连免费的确很棒，因为很多时候我们并不需要那么大的原图。<br>自带的人脸识别，把照片中出现的人物识别出来并且以此聚集照片，是一个非常方便的找出人像的方法。（当然了Apple自带的iphoto也提供类似的功能，iphoto的根据geo生成的图片聚合也不错。）</p>
<p>一句话，值得一试，大厂服务值得信赖~<br><img src="/../images/QQ20160131-2.png" alt="QQ20160131-2"><img src="/../images/QQ20160131-3.png" alt="QQ20160131-3"></p>
<blockquote class="blockquote-center"><p>云时代，选好服务，不要再出现图片丢失的蠢事了~</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>这年头，专业的数码相机越来越便宜，同时手机自带的摄像头越来越专业。所以，一不小心可能大家手头的照片很容易攒个数千张。那些照片记录了当时的可爱时光，现在也不舍得删去，但是也静静待在手机/电脑的存储中，值到一天越来越小的可用空间提醒着你『是时候要收拾整理下了！』</p>
<p>]]>
    </summary>
    
      <category term="HowTo" scheme="http://sivagao.com/categories/HowTo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[【读书笔记】今天也要用心过生活]]></title>
    <link href="http://sivagao.com/2016-01/book-note-lead-life-heartly-today/"/>
    <id>http://sivagao.com/2016-01/book-note-lead-life-heartly-today/</id>
    <published>2016-01-12T10:56:29.000Z</published>
    <updated>2016-01-30T14:32:58.000Z</updated>
    <content type="html"><![CDATA[<p>by：松浦弥太郎<br>记录：于深圳图书馆自助阅读室，2016-01-10(周日)下午</p>
<h2 id="u4ECB_u7ECD"><a href="#u4ECB_u7ECD" class="headerlink" title="介绍"></a>介绍</h2><p>生活中的巧思与发现笔记01，是成名作生活中的巧思和发现笔记三部曲的一本。 最广为人知的一本作品。<br>讲述如何与自己，与他人，与世界相处的观察，如何拥有让心灵丰富的生活的思考<br>“今天也要用心过生活”，而这也是松浦认为日日更新自我的方法。想必，这也是松浦写下《今天也要用心过生活》的初衷。<br><a id="more"></a><br>带着孩子的天真与成人的智慧，让我们与生活相处得更为融洽。而每一个热爱生活的人，看到这些小计划，也都会会心一笑。譬如每天的“自我改造”工程。所谓自我改造，也就是保持每天学习一项新事物的心境。准备几项小企划，然后花心思去实现，投入挑战，一一完成。作者的小计划之一，就是“泡出美味的花草茶”。带着创意与正念去做一件事情，哪怕只是泡茶，感觉也是不同的</p>
<h2 id="u524D_u8A00__u8D77_u5E8A_u540E_u7684_u6DF1_u547C_u5438"><a href="#u524D_u8A00__u8D77_u5E8A_u540E_u7684_u6DF1_u547C_u5438" class="headerlink" title="前言 起床后的深呼吸"></a>前言 起床后的深呼吸</h2><p>要保持问『为什么』的好奇心，非常困难。当你脸上一旦习惯了大人的表情，每天的生活就只剩下日复一日的单调重复。这样日子的过久你人的心立刻会变得像放了两三天的面包硬邦邦的。</p>
<p>在看不到的地方保持天真 - 我认为这就是让生活保持新鲜的方法『没有成长没关系，只希望常保新鲜』 - 借用发问『为什么』，用全身心去寻找答案，使得生活中处处可见巧思与发现。还介绍了几个自己的做法：分享你如何让因忙乱的社会生活和人际关系二失焦的心将矛头重新对准自己。</p>
<h2 id="u7B2C_u4E00_u7AE0__u5065_u5EB7_u7684_u65E9_u9910"><a href="#u7B2C_u4E00_u7AE0__u5065_u5EB7_u7684_u65E9_u9910" class="headerlink" title="第一章 健康的早餐"></a>第一章 健康的早餐</h2><h3 id="u6BCF_u5929_u201C_u81EA_u6211_u6539_u9020_u201D"><a href="#u6BCF_u5929_u201C_u81EA_u6211_u6539_u9020_u201D" class="headerlink" title="每天“自我改造”"></a>每天“自我改造”</h3><p>一天之中只要积累无数微小的喜悦，人就会不由自主地感到幸福。只要这样的日子持续到来，人生在世就乐趣无穷。<br>多准备几项这样的小企划（发现问题），然后花心思去实现（思考答案），全心投入挑战。<br>如泡出美味的花草茶，练习吉他。 没有登场表演的压力，只是单纯希望能一直练习到自己认可为止，这就是自我改造。</p>
<p>不管是谁，不作任何自考随波逐流的过日子，都会变的很寂寞。只要为自己定下许多自我改造的计划，就有动力去迎接每个新的早晨（那些花很长时间而不是一下子就熟练的东西，然而会愈久弥新不让人突然怅然若失）</p>
<p>Do Next:<br>请尽可能多像一些自我改造的计划<br>将计划记录在纸上，并放在显眼的地方，时刻提醒自己</p>
<h3 id="u201C_u65E9_u5B89_u201D_u7684_u529F_u6548"><a href="#u201C_u65E9_u5B89_u201D_u7684_u529F_u6548" class="headerlink" title="“早安”的功效"></a>“早安”的功效</h3><p>如果是让你头疼的对象，不如试着主动接近对方。<br>如果觉得某人讨厌自己，那就主动和那人交谈吧。<br>只是一句早安，竟能消解人与人之间的芥蒂，不只是对方，就连自己的心情都会改变，早晨的时光也会变得美好</p>
<h3 id="u8BA9_u81EA_u5DF1_u4ECE_u5BB9_u7684_u4E00_u5C0F_u65F6"><a href="#u8BA9_u81EA_u5DF1_u4ECE_u5BB9_u7684_u4E00_u5C0F_u65F6" class="headerlink" title="让自己从容的一小时"></a>让自己从容的一小时</h3><p>我们每天都面对连串的时间竞赛，如果有一个小时的缓冲时间，就能从焦虑中解放。希望生活中能多一些乐趣和游刃有余。与其多睡一小时，早起一小时的生活更惬意。 花上一个小时，品味用心烹调的早餐，仔细洗脸，慢慢走去搭巴士，这才是真正的奢侈</p>
<h3 id="u5FEB_u4E50_u53D1_u73B0_uFF0C_u7528_u5FC3_u4E0B_u5DE5_u592B"><a href="#u5FEB_u4E50_u53D1_u73B0_uFF0C_u7528_u5FC3_u4E0B_u5DE5_u592B" class="headerlink" title="快乐发现，用心下工夫"></a>快乐发现，用心下工夫</h3><p>越是艰难的处境，越应该下功夫制造一些让自己愉悦的契机，否则翻阅过去只会痛苦加倍。<br>作者去登山（连接优山美地那条途径数座国家公园而旅途艰辛），带上你这双世上绝无仅有，与我脚掌完全贴合的鞋，用最高级的碗吃饭（而不是用铝制罐头活干燥冷冻的食物，不会对吃饭这件事有期待）（找人专门做鞋，和做榆木的碗）</p>
<p>Do Next:<br>就算在别人眼中只是小事，如果嫩白替自己带来莫大的愉悦，那就去做吧。<br>挑战前以『失败也正常』为前提，思考如何能开心地进行吧。</p>
<h3 id="u53D1_u73B0_u5168_u65B0_u81EA_u5DF1_u7684_u6377_u5F84"><a href="#u53D1_u73B0_u5168_u65B0_u81EA_u5DF1_u7684_u6377_u5F84" class="headerlink" title="发现全新自己的捷径"></a>发现全新自己的捷径</h3><p>去思考『其他的路』，『别的做法』也就是否定现在自己，从而发现全新自己的捷径。<br>今天和昨天没什么两样，大同小异的明天又会到来，岁月不经意间流逝。这样维持现状，等于毫无进步。要试图打破自己，试图反复否定自己，期望能保持心的柔软，不断更新自己的状态</p>
<p>Do next:<br>今早试着做一件不同以往的事吧</p>
<h3 id="u6E05_u6D01_u7684_u81EA_u4FE1"><a href="#u6E05_u6D01_u7684_u81EA_u4FE1" class="headerlink" title="清洁的自信"></a>清洁的自信</h3><p>如果能珍视自己所处的环境，至少能获得虽微不足道但实实在在的自信。<br>『既然每天都要打扫卫生是铁定的事实，我决定不去埋怨好麻烦或去想有什么意义，干脆就开开心心干活，日积月累下来，这变成你我的自信，使我能抬头挺胸对顾客说『欢迎光临』』<br>是不是优秀的人才，差别就在于对待被指派的工作的态度上</p>
<h3 id="u8D77_u800C_u884C_u7684_u884C_u52A8_u5BB6"><a href="#u8D77_u800C_u884C_u7684_u884C_u52A8_u5BB6" class="headerlink" title="起而行的行动家"></a>起而行的行动家</h3><p>心怀梦想的时间越长，最终不了了之的风险越大。去发想，去思考，也要做一起起而行的行动家（而不是光说不做的空想家）<br>每天早上写出当天计划要做的事，做出条列式的清单就行（工作任务，自我改造计划，或是陪女儿去游泳这样的小事也要记下来） 没完成没关系移到明天。意识到这只是延期和停滞不前决然不同。 每天每月每年的行动，不管是生活还是工作，都能从高处鸟瞰，一目了然。</p>
<p>Do next:<br>只要看下清单就大致了解一天的行程，令人安心<br>比起重要的事，从简单的事做起，比较不容易受挫</p>
<h2 id="u81EA_u5728_u7684_u8282_u594F"><a href="#u81EA_u5728_u7684_u8282_u594F" class="headerlink" title="自在的节奏"></a>自在的节奏</h2><p>循序渐进地朝着目标一步步前进，是一种对生活的诚实。与其随波逐流，我更想以自己的节奏度过一天。<br>找到自己最舒服的节奏『总是以一二三，一二三的节奏进行』，将目标分成三期来达成。但与人交往尤其是需要重视节奏和速度，自己单方面冲得太快，硬是将感情交出去，如果对方还没适应变化，不仅无法理解你的感情，还可能产生困惑（着急行事，一定会招致失败 ）<br>事情都有先后顺序，人生是一个漫长积累的过程，不要企图在段时间就做出成绩，而是有节奏地，阶段性地，朝着终点努力</p>
<p>Do Next:<br>就像音乐一播放，工作也能顺利进行，侧耳倾听你身体里的节奏吧<br>有人世间意识到合作伙伴的节奏，有如合奏一般，享受一同共事的过程</p>
<h2 id="u7528_u5FC3_u5403_u996D"><a href="#u7528_u5FC3_u5403_u996D" class="headerlink" title="用心吃饭"></a>用心吃饭</h2><p>将忙碌作为借口，总是以机器做的食物果腹，不管是大人或小孩让人觉得很可怜</p>
<h2 id="u4F18_u96C5_u7684_u63E1_u7B77_u65B9_u6CD5"><a href="#u4F18_u96C5_u7684_u63E1_u7B77_u65B9_u6CD5" class="headerlink" title="优雅的握筷方法"></a>优雅的握筷方法</h2><h2 id="u5E72_u51C0_u7684_u59FF_u6001"><a href="#u5E72_u51C0_u7684_u59FF_u6001" class="headerlink" title="干净的姿态"></a>干净的姿态</h2><p>保持干净是一种礼貌。不要习惯邋遢。要保持干净的姿态，就意味着即便年岁增长，经验不断累计，也不能丧失初心。对新事物感到兴奋，遇到开心的事会手舞足蹈。做错事就干脆道歉，失败你就大方认输，绝不说谎。<br>抬头挺胸走路，不要身体往一边斜~</p>
<p>Do Next:<br>脚跟和耳后平时不容易看见的身体部位，也要保持清洁</p>
<h2 id="u9047_u89C1_u201C_u8001_u5E08_u201D"><a href="#u9047_u89C1_u201C_u8001_u5E08_u201D" class="headerlink" title="遇见“老师”"></a>遇见“老师”</h2><p>从温婉的人身上我们学得到东西，从狡诈的人身上，也有东西可以学</p>
<h3 id="u8BA9_u7B11_u5BB9_u4E3A_u751F_u6D3B_u4FDD_u9C9C"><a href="#u8BA9_u7B11_u5BB9_u4E3A_u751F_u6D3B_u4FDD_u9C9C" class="headerlink" title="让笑容为生活保鲜"></a>让笑容为生活保鲜</h3><p>只要不忘记微笑，大抵的难关都能度过。<br>即便人在国外言语不通的环境下，只要微笑，也能沟通。在工作上遇到瓶颈，不忘以笑脸面对便能顺利排除万难。陷入困境的时候，比解决的方法更重要的就是你的笑容。特别是和从未谋面的人初次相见，你更要有意识的保持笑容，当彼此摸不清对方的想法时，笑容便是双方之间的润滑剂。</p>
<p>Do Next:<br>说谢谢时请搭配笑容，如此一来，便能自然地传达心意。<br>发现笑容变少了，就想办法独处一段时间，试着找回自己吧。</p>
<h3 id="u4ECA_u5929_u4E5F_u8981_u7528_u5FC3_u8FC7_u751F_u6D3B"><a href="#u4ECA_u5929_u4E5F_u8981_u7528_u5FC3_u8FC7_u751F_u6D3B" class="headerlink" title="今天也要用心过生活"></a>今天也要用心过生活</h3><p>即便明天生命走到尽头也不觉得遗憾，能够安详辞世的方法就是每天都要带着敬意对待生活。</p>
<p>Do Next:<br>不管多小的事都没关系，每天挑战一次新尝试<br>年纪越大，越要鼓起勇气挑战新事物</p>
<h2 id="u7B2C_u4E8C_u7AE0__u4E0A_u4E58_u7684_u5348_u9910"><a href="#u7B2C_u4E8C_u7AE0__u4E0A_u4E58_u7684_u5348_u9910" class="headerlink" title="第二章 上乘的午餐"></a>第二章 上乘的午餐</h2><p>『逆风强的时候，更有自己在前进的真实感』</p>
<h3 id="u5206_u4EAB_u559C_u60A6"><a href="#u5206_u4EAB_u559C_u60A6" class="headerlink" title="分享喜悦"></a>分享喜悦</h3><h3 id="u201C_u7ED9_u4E88_u201D_u7684_u89C4_u6A21"><a href="#u201C_u7ED9_u4E88_u201D_u7684_u89C4_u6A21" class="headerlink" title="“给予”的规模"></a>“给予”的规模</h3><p>即便是不懂什么人生智慧，可是你知道如何逗人笑，安抚人心，那就这么去做吧。<br>人生不是靠你做了什么，从事什么工作，做出什么东西来决定的。关键是，你给予你别人多少。<br>希望能传授一些什么给别人，不是只藏在自己的抽屉里，而是不吝啬的分享出去（年到40，积累了不少经验，还有勇气摧毁既有的功与过，从零开始追求更美好的新事物）<br>如果以为等待别人的好意和知要求（如公司应该怎么培养我国家应该）那你什么都得不到。你必须自己先付出，回馈必然会到来。</p>
<p>Do Next:<br>如果有自己想要的东西，就先让给别人<br>就算只是小东西也没关系，准备好自己能够给予他人的东西，以便于随时都能拿出来</p>
<h3 id="u5728_u7834_u88C2_u4E4B_u65F6_uFF0C_u624D_u771F_u6B63_u5F00_u59CB"><a href="#u5728_u7834_u88C2_u4E4B_u65F6_uFF0C_u624D_u771F_u6B63_u5F00_u59CB" class="headerlink" title="在破裂之时，才真正开始"></a>在破裂之时，才真正开始</h3><p>反正已经用了很久你换个新的更划算（但笔者还是倾向把坏东西修一下继续使用）与人交往也一样，经过冲撞，摩擦，破裂，产生嫌隙，然后才正式开始。始终保持和睦气氛的交往很肤浅，一直到产生纠葛彻底发泄相互伤害后，友谊破裂的那一刻起，你才算和那个人产生关系。<br>关键是是一心想从纷争中脱身，甚至不惜舍弃和那人的关系，还是选择不推却，袒露真心，努力地用心修复彼此的关系 - 你需要放下身段不惜颜面将说不出口的羞于告人的事化作言语吐露，甚至有时像个孩子嚎啕大哭，心情绝不容许一丝敷衍。<br>『我们曾经碰上那种事，不过一起克服你』 - 物品经过常年的消磨，人情世故也是打破来契合</p>
<p>Do Next:<br>只要抱着即便损坏也要修复的打算，有话就无需隐忍不说<br>认真看待每段关系，就不需要过多的朋友和物品</p>
<h3 id="u4EBA_u9645_u5173_u7CFB_u7684_u517B_u6210"><a href="#u4EBA_u9645_u5173_u7CFB_u7684_u517B_u6210" class="headerlink" title="人际关系的养成"></a>人际关系的养成</h3><p>从鼓起勇气踏出第一步开始，经历过反复的损坏和修复，交情逐渐加深。要构筑起一段双方能在其中成长的关系，培育的心意不可缺少。<br>去思考对方现在处于什么状况，什么事能让他感到幸福，他讨厌别人怎么做，有喜欢被别人怎么对待 - 仔细观察对方，具备揣摩对方心理的想象力。听对方的倾诉，而不是把自己的意见强加在朋友身上</p>
<p>Do Next:<br>不能借口为对方着想，把自己的意见强加在对方身上<br>用照料不会说话的植物的细腻心思，来揣摩对方的感受吧</p>
<h3 id="u9A6C_u5361_u9F99_u6C9F_u901A_u6CD5"><a href="#u9A6C_u5361_u9F99_u6C9F_u901A_u6CD5" class="headerlink" title="马卡龙沟通法"></a>马卡龙沟通法</h3><p>必须将感谢的心情明确地传达给对方<br>作者被服务员温柔对待后，下楼去买了马卡龙点心回到座位上『谢谢你的好意，方便的话，请收下』不管是在日常生活中或旅途地点，常常设法表达自己的感谢和好意将其化为行动 - 就算是一半人拒绝你，至少还有一半人会觉得高兴</p>
<p>Do Next:<br>除了谢谢这句话，也一起附上小礼物吧<br>与人分享害羞和犹豫之后的喜悦吧</p>
<h3 id="u6210_u5168_u5BF9_u65B9_u2014_u2014_u5F00_u53E3_u7684_u827A_u672F"><a href="#u6210_u5168_u5BF9_u65B9_u2014_u2014_u5F00_u53E3_u7684_u827A_u672F" class="headerlink" title="成全对方——开口的艺术"></a>成全对方——开口的艺术</h3><p>如果察觉某人有话相对你说，就自己主动创造谈话机会，成全对方吧，这也是在传达你的事我优先考虑的信息。<br>自己主动接近，不仅可以减轻对方的负担，对自己而言也未尝不是好事 - 比起被动承受别人的揣测，自己主动说明心意会轻松很多。<br>『如果是我误会就算了，但你是不是有话想对我说』<br>常常当你开始要做一件事（考虑换工作活生活发生变化的时），当你的心情起了变化，家人恋人朋友会自然又说察觉，他们在等着你主动倾诉</p>
<h3 id="u5E72_u8106_u5730_u9053_u6B49"><a href="#u5E72_u8106_u5730_u9053_u6B49" class="headerlink" title="干脆地道歉"></a>干脆地道歉</h3><h3 id="u51DB_u7136_u7684_u8BDA_u5B9E"><a href="#u51DB_u7136_u7684_u8BDA_u5B9E" class="headerlink" title="凛然的诚实"></a>凛然的诚实</h3><h3 id="u7559_u6709_u4F59_u5730_u7684_u7EA6_u5B9A"><a href="#u7559_u6709_u4F59_u5730_u7684_u7EA6_u5B9A" class="headerlink" title="留有余地的约定"></a>留有余地的约定</h3><h3 id="u8C0E_u8A00_u7684_u5C3E_u5DF4"><a href="#u8C0E_u8A00_u7684_u5C3E_u5DF4" class="headerlink" title="谎言的尾巴"></a>谎言的尾巴</h3><p>不如先接受对方的谎言，转而去想接下来要如何进行，去思考谎言背后的缘由（如果有这份心，自然会体贴对方）<br>与家人恋人或朋友相处也一样， 如果一开始就质疑不断，戳穿和责难对方，那彼此的关系永远无法深入（譬如当场怒斥，没有什么能躲过我的法眼，反而会误了正事，对事态发展没有任何帮助）</p>
<h3 id="u8BA9_u767E_u6B65_uFF0C_u53C8_u4F55_u59A8"><a href="#u8BA9_u767E_u6B65_uFF0C_u53C8_u4F55_u59A8" class="headerlink" title="让百步，又何妨"></a>让百步，又何妨</h3><h3 id="u5BF9_u95F2_u8A00_u788E_u8BED_u6DF1_u547C_u5438"><a href="#u5BF9_u95F2_u8A00_u788E_u8BED_u6DF1_u547C_u5438" class="headerlink" title="对闲言碎语深呼吸"></a>对闲言碎语深呼吸</h3><p>遭人否定，代表着有人正在关注你，而这正是开始的机会。不限公事，日常生活也一样，我就是这样心态来调适自己。 意识到：<br>1 别人没有那么在意你，不会时时想着你的事<br>2 负面的声音容易听见，但正面评价往往隐晦<br>一时反应过度，情绪激动时，就试着深呼吸吧</p>
<h3 id="u4E00_u4E2A_u4EBA_u7684_u5962_u4F88"><a href="#u4E00_u4E2A_u4EBA_u7684_u5962_u4F88" class="headerlink" title="一个人的奢侈"></a>一个人的奢侈</h3><p>获得独处的机会，也是你给身边的人独处的时间。<br>我们每天置身于各种事物之间，永无止境受到外来的影响变得不像自己（不管是结婚还是归属于某个团体，只要忘了一个人的时间，往往会产生依赖感，从而丧失自我）<br>对夫妻，清楚一个人的时间对她也很重要，不干涉她的那段时间帮她承担起照顾女儿的责任<br>咖啡店公园也好，事先挑几个让自己舒服独处的地点吧</p>
<h2 id="u7B2C_u4E09_u7AE0__u5706_u878D_u4EBA_u751F_u7684_u9999_u6599"><a href="#u7B2C_u4E09_u7AE0__u5706_u878D_u4EBA_u751F_u7684_u9999_u6599" class="headerlink" title="第三章 圆融人生的香料"></a>第三章 圆融人生的香料</h2><p>要懂得生活的智慧和乐趣</p>
<h3 id="u9999_u5473_u7684_u529F_u7528"><a href="#u9999_u5473_u7684_u529F_u7528" class="headerlink" title="香味的功用"></a>香味的功用</h3><p>真正重要的东西是眼睛看不见的<br>房间只要装饰一朵小花气氛就会变得舒服怡人。秋天草木的香味，刚煮熟的米饭香，以及雨后街道上的味道等，弥漫只生活中的各种香味，丰富了我们自身<br>如果说人生目标，工作和梦想，爱，信任和伴侣是人生的滋味和养分，那么嗜好和学习就像是生活中的香味韵味吧。</p>
<p>Do Next:<br>思考你人生的香味，即可以增添生活韵味的事物是什么<br>那便是眼睛看不见却可以丰富人生的财富</p>
<h3 id="u201C_u4E0D_u77E5_u9053_u201D_u7684_u7BB1_u5B50"><a href="#u201C_u4E0D_u77E5_u9053_u201D_u7684_u7BB1_u5B50" class="headerlink" title="“不知道”的箱子"></a>“不知道”的箱子</h3><h3 id="u6563_u53D1_u6811_u6728_u9999_u6C14_u7684_u5730_u56FE"><a href="#u6563_u53D1_u6811_u6728_u9999_u6C14_u7684_u5730_u56FE" class="headerlink" title="散发树木香气的地图"></a>散发树木香气的地图</h3><p>找个空闲的下午出去散步，画出你的新地标。去了解自家附近是什么样的地，有什么种类的植物生长，然后尽可能花心思与自然和平相处</p>
<h3 id="u5386_u53F2_u4E0A_u7684_u5C0F_u4E8B_u60C5"><a href="#u5386_u53F2_u4E0A_u7684_u5C0F_u4E8B_u60C5" class="headerlink" title="历史上的小事情"></a>历史上的小事情</h3><h3 id="u8F7B_u677E_u5199_u4FE1"><a href="#u8F7B_u677E_u5199_u4FE1" class="headerlink" title="轻松写信"></a>轻松写信</h3><h3 id="u9605_u8BFB_u65C5_u884C"><a href="#u9605_u8BFB_u65C5_u884C" class="headerlink" title="阅读旅行"></a>阅读旅行</h3><p>觉得自己的内心空间逐渐变小的时，我会选择出门旅行。当我想稍微转变下心情，我会选择阅读。那段时间，人都是脱离现实沉浸在孤独中，处理全然独处的状态 - 阅读不需要准备换洗的衣物，无需搭乘飞机，只需翻开书页就能踏入目的地，花几分钟就能回归日常</p>
<p>即便是阅读完连故事大纲都忘你，我觉得读书的乐趣在于『当下阅读的时光和感受』</p>
<h3 id="u4EB2_u8EAB_u7ECF_u5386_u7684_u7B14_u8BB0"><a href="#u4EB2_u8EAB_u7ECF_u5386_u7684_u7B14_u8BB0" class="headerlink" title="亲身经历的笔记"></a>亲身经历的笔记</h3><p>去亲眼目睹，然后用自己的手记下，比任何网站都来的可靠。这种实际接触而来的真实体验，是一种帮助你看清事物本质的训练。</p>
<h3 id="u8F7B_u67D4_u7684_u4E3E_u6B62"><a href="#u8F7B_u67D4_u7684_u4E3E_u6B62" class="headerlink" title="轻柔的举止"></a>轻柔的举止</h3><h3 id="u53CC_u81C2_u4EA4_u62B1_u662F_u5927_u5FCC"><a href="#u53CC_u81C2_u4EA4_u62B1_u662F_u5927_u5FCC" class="headerlink" title="双臂交抱是大忌"></a>双臂交抱是大忌</h3><p>代表你自己的心正处于封闭状态，翘脚的习惯也是看起来很傲慢一副高高在上的样子</p>
<h3 id="u7231_u62A4_u4F60_u7684_u624B_u811A"><a href="#u7231_u62A4_u4F60_u7684_u624B_u811A" class="headerlink" title="爱护你的手脚"></a>爱护你的手脚</h3><h3 id="u751F_u6D3B_u4E2D_u7684_u51CF_u6CD5"><a href="#u751F_u6D3B_u4E2D_u7684_u51CF_u6CD5" class="headerlink" title="生活中的减法"></a>生活中的减法</h3><p>有东西增加，就相应的做些减法。入手一件新东西，就丢掉屋子一件旧东西。保有空间的生活。 </p>
<p>Do Next:<br>不只是房间，你的心是否也被不必要的东西给占据了<br>与其追逐流行，不如买一件质量保证，能够穿上很久的衣服吧</p>
<h3 id="u533B_u6CBB_u201C_u4E0D_u591F_u7684_u75C5_u201D"><a href="#u533B_u6CBB_u201C_u4E0D_u591F_u7684_u75C5_u201D" class="headerlink" title="医治“不够的病”"></a>医治“不够的病”</h3><h3 id="u91D1_u94B1_u7684_u79CD_u5B50"><a href="#u91D1_u94B1_u7684_u79CD_u5B50" class="headerlink" title="金钱的种子"></a>金钱的种子</h3><p>我不想再执着于没有意义的储蓄上，而是希望能把钱用在让自己更富裕的事情上。钱这东西只会越用越多<br>花了十几万去旅行，虽然未必能留下什么实质性的纪念，可是如果你获得你经历和体验，增长你见闻，那就是一种培养金钱种子的投资。午餐的花费，如果买的能满足身心健康的食物，那就是投资。如果只是随便买泡面果腹，那就跟把钱丢到水沟没什么两样</p>
<h3 id="u81EA_u5DF1_u7684_u51B3_u7B97_u8868"><a href="#u81EA_u5DF1_u7684_u51B3_u7B97_u8868" class="headerlink" title="自己的决算表"></a>自己的决算表</h3><p>价值观因人而异，但千万不要满不在乎地花钱。需要每半年重新审视自己的价值观，审查自己的财务状况。掌控金钱就能掌控自己。</p>
<h2 id="u7B2C_u56DB_u7AE0__u5E73_u548C_u7684_u665A_u9910"><a href="#u7B2C_u56DB_u7AE0__u5E73_u548C_u7684_u665A_u9910" class="headerlink" title="第四章 平和的晚餐"></a>第四章 平和的晚餐</h2><p>每一个今天，都要过的很用心</p>
<h3 id="u7528_u89E6_u6478_u8868_u8FBE_u73CD_u91CD"><a href="#u7528_u89E6_u6478_u8868_u8FBE_u73CD_u91CD" class="headerlink" title="用触摸表达珍重"></a>用触摸表达珍重</h3><h3 id="u5B64_u72EC_u662F_u57FA_u672C_u6761_u4EF6"><a href="#u5B64_u72EC_u662F_u57FA_u672C_u6761_u4EF6" class="headerlink" title="孤独是基本条件"></a>孤独是基本条件</h3><p>唯有拥有在黑暗中也能一个人毅然决定行走的力量，我们才能与擦身而过的他人构筑深刻的联系。<br>三人以上的聚会，我便尽可能的不去参加。我不会为了掩饰自己的孤独而与人见面去狂欢作乐，相反的。我一个人思考学习，期望尽可能朝着自己的目标方向前进。一场与孤独的战争，但是不会把自己当成悲剧的男主角，陷在『我是如此的不幸，必须一个人努力』的情绪，而是认识到思考如何与它相处。<br>依赖淡薄的表面关系过日子，不是比一个人独处更寂寞吗。不要在熟悉的同伴包围下，出门也找人结伴，那样的舒适圈~ 何不鼓起勇气毅然决然放手一次一个人的旅行</p>
<p>Do Next:<br>偶尔就豁出去一个人出发吧，你一定会看到不一样的风景<br>试着减少一个可有可无的聚会吧，具备拒绝的勇气很重要</p>
<h3 id="u6162_u6162_u5EF6_u70E7_u7684_u6696_u610F"><a href="#u6162_u6162_u5EF6_u70E7_u7684_u6696_u610F" class="headerlink" title="慢慢延烧的暖意"></a>慢慢延烧的暖意</h3><h3 id="u505A_u9009_u62E9_u7684_u8BAD_u7EC3"><a href="#u505A_u9009_u62E9_u7684_u8BAD_u7EC3" class="headerlink" title="做选择的训练"></a>做选择的训练</h3><h3 id="u820D_u5F03_u201C_u82DF_u4E14_u201D_u7684_u6001_u5EA6"><a href="#u820D_u5F03_u201C_u82DF_u4E14_u201D_u7684_u6001_u5EA6" class="headerlink" title="舍弃“苟且”的态度"></a>舍弃“苟且”的态度</h3><p>越是忙碌的时候，越应该认清真正重要的事是什么，养成确认优先顺序的习惯，否则事态逐渐变得可怕。苟且越多它越会侵蚀你的生活，不知不觉间你的世界都变了样。</p>
<h3 id="u4E0D_u628A_u201C_u9EBB_u70E6_u201D_u6302_u5728_u5634_u8FB9"><a href="#u4E0D_u628A_u201C_u9EBB_u70E6_u201D_u6302_u5728_u5634_u8FB9" class="headerlink" title="不把“麻烦”挂在嘴边"></a>不把“麻烦”挂在嘴边</h3><p>我们必须有所自觉，为了追求效率和便利自己失去你什么。</p>
<p>不要把打扫，做菜，问候，留意仪表当成麻烦的事，请用心去做好</p>
<h3 id="u60F3_u505A_u7684_u4E8B_u4E0E_u5E94_u8BE5_u505A_u7684_u4E8B"><a href="#u60F3_u505A_u7684_u4E8B_u4E0E_u5E94_u8BE5_u505A_u7684_u4E8B" class="headerlink" title="想做的事与应该做的事"></a>想做的事与应该做的事</h3><p>你是想要一瞬间的短暂快乐呢，还是朝着梦想的自己前进呢？你的选择会改变你。</p>
<h3 id="u81EA_u5DF1_u7684_u7528_u9014"><a href="#u81EA_u5DF1_u7684_u7528_u9014" class="headerlink" title="自己的用途"></a>自己的用途</h3><p>你最好试着相在家庭，公司，社区中在与所有人的关系中，你自己这件工具能派上什么用场，做出自己的贡献。不要总抱怨『我想做的事都不让我做』 - 比起想做的事，不如去做能帮助别人的事，去积极思考不同工具的用途<br>好好观察，缜密思考，仔细推进，没有比这更好的作法。<br>为了让自己这个工具能够被选中，要时时保养不要懈怠</p>
<h3 id="u4E86_u89E3_u4F60_u7684_u6784_u9020"><a href="#u4E86_u89E3_u4F60_u7684_u6784_u9020" class="headerlink" title="了解你的构造"></a>了解你的构造</h3><p>每天你都会接受到超出负荷的要求，正确的判断既能保护你生活，也能保护对方。<br>人不应该胡乱与太多人交往，建立随便的人际关系，也不要拥有超过自己管理能力的物品。工作上也是一样，觉不要把自己当成不会损坏的机器。吃饭的八分饱，睡觉工作人际关系也是一样。不暴饮暴食，不废寝忘食地工作，不贪睡。就算再开心也要有所节制。</p>
<h3 id="u5F7B_u5E95_u7684_u4F11_u606F"><a href="#u5F7B_u5E95_u7684_u4F11_u606F" class="headerlink" title="彻底的休息"></a>彻底的休息</h3><p>事情总有克服的那天，等到克服后，人便会不可思议的强大起来<br>觉得闷闷不乐就放自己去休假去吧，人活着最基本的要素就是自己，所以以自己为优先，去珍惜自己并不是人性自私的举动 - 不要因为觉得自己是成人了，就摆出一副无所谓的表情，什么都强忍下来。哀叹吧，悲伤吧，放生大哭吧。</p>
<p>Do Next:<br>先找一个沮丧时候可以躲进去的避难所吧，不管那是一本书，还是附近的公园。要正视自己鼓起勇气</p>
<h3 id="u4E0D_u201C_u987A_u4FBF_u201D_u4E3A_u4E4B"><a href="#u4E0D_u201C_u987A_u4FBF_u201D_u4E3A_u4E4B" class="headerlink" title="不“顺便”为之"></a>不“顺便”为之</h3><h3 id="u613F_u671B_u8FD9_u79CD_u9B54_u6CD5"><a href="#u613F_u671B_u8FD9_u79CD_u9B54_u6CD5" class="headerlink" title="愿望这种魔法"></a>愿望这种魔法</h3><h3 id="u7EAF_u7CB9_u7684_u7231_u604B"><a href="#u7EAF_u7CB9_u7684_u7231_u604B" class="headerlink" title="纯粹的爱恋"></a>纯粹的爱恋</h3><h3 id="u53D8_u8EAB_u7A7A_u65E0_u7684_u7EC3_u4E60"><a href="#u53D8_u8EAB_u7A7A_u65E0_u7684_u7EC3_u4E60" class="headerlink" title="变身空无的练习"></a>变身空无的练习</h3><h3 id="u65E0_u6211_u7684_u5E78_u798F"><a href="#u65E0_u6211_u7684_u5E78_u798F" class="headerlink" title="无我的幸福"></a>无我的幸福</h3><h2 id="u540E_u8BB0__u60F3_u4EE5_u7B49_u4E0D_u53CA_u660E_u5929_u5230_u6765_u7684_u5FC3_u60C5_uFF0C_u8BF4_u201C_u665A_u5B89_u201D"><a href="#u540E_u8BB0__u60F3_u4EE5_u7B49_u4E0D_u53CA_u660E_u5929_u5230_u6765_u7684_u5FC3_u60C5_uFF0C_u8BF4_u201C_u665A_u5B89_u201D" class="headerlink" title="后记 想以等不及明天到来的心情，说“晚安”"></a>后记 想以等不及明天到来的心情，说“晚安”</h2>]]></content>
    <summary type="html">
    <![CDATA[<p>by：松浦弥太郎<br>记录：于深圳图书馆自助阅读室，2016-01-10(周日)下午</p>
<h2 id="u4ECB_u7ECD"><a href="#u4ECB_u7ECD" class="headerlink" title="介绍"></a>介绍</h2><p>生活中的巧思与发现笔记01，是成名作生活中的巧思和发现笔记三部曲的一本。 最广为人知的一本作品。<br>讲述如何与自己，与他人，与世界相处的观察，如何拥有让心灵丰富的生活的思考<br>“今天也要用心过生活”，而这也是松浦认为日日更新自我的方法。想必，这也是松浦写下《今天也要用心过生活》的初衷。<br>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[【读书笔记】不能不去爱的两件事]]></title>
    <link href="http://sivagao.com/2016-01/book-note-two-things-you-have-to-love/"/>
    <id>http://sivagao.com/2016-01/book-note-two-things-you-have-to-love/</id>
    <published>2016-01-11T10:56:29.000Z</published>
    <updated>2016-01-30T14:33:09.000Z</updated>
    <content type="html"><![CDATA[<p>是松浦弥太郎给所有内心怀抱不安(恐惧)和寂寞的朋友的19封关于人生的信<br>ps: 所以两件小事就是恐惧和寂寞<br><a id="more"></a><br>和你倾诉他如何面对自己的孤独和脆弱，如何和自己相处的经验。『我因为旅行以及其他事，变得孤零零的。人的一生中有两个生日，一个是自己诞生的日子，一个是真正理解自己的日子』 - 独处的时间就是思考的时间，就是自己找答案。正视自己的孤独和脆弱，才是获得强大内心的途径。</p>
<p>这种正面积极的追逐自我的人生态度确实值得肯定，而在这正面力量的引导很多人也开始记录关于自己的梦想笔记，幻想着有一天可以实现自我</p>
<h2 id="u5E8F"><a href="#u5E8F" class="headerlink" title="序"></a>序</h2><p>恐惧：最根本的原因其实是我们害怕贫穷，害怕被别人比下去，害怕被社会排挤等各式各样的恐惧<br>寂寞：我们恋爱，结婚，交友，加入小团体，找人聊天，写信；或是借由什么事来表现自己，主动发消息。这些都是源于你心中的寂寞。</p>
<p>这本书就是让你不逃避，泰然接受，和他们交朋友和平共处的一些方法。这样让你保持内心平静，不会再苛刻自己，也能宽恕他人，这想必会让你迈向幸福的一小步</p>
<p>每篇文章，插画形式呈现那篇文章想传达的重点，每一则都是简单又实用的练习，请大家放松心情，务必挑战看看。每章节后，提供可供实践的课题当做是总结和练习</p>
<h2 id="u7B2C_u4E00_u7AE0__u53BB_u51DD_u89C6_u90A3_u201C_u4E24_u4EF6_u4E8B_u201D"><a href="#u7B2C_u4E00_u7AE0__u53BB_u51DD_u89C6_u90A3_u201C_u4E24_u4EF6_u4E8B_u201D" class="headerlink" title="第一章　去凝视那“两件事”"></a>第一章　去凝视那“两件事”</h2><h3 id="u7ED9_u5BF9_u5C06_u6765_u611F_u5230_u4E0D_u5B89_u7684_u4F60"><a href="#u7ED9_u5BF9_u5C06_u6765_u611F_u5230_u4E0D_u5B89_u7684_u4F60" class="headerlink" title="给对将来感到不安的你"></a>给对将来感到不安的你</h3><h3 id="u7ED9_u6CA1_u6709_u81EA_u4FE1_u7684_u4F60"><a href="#u7ED9_u6CA1_u6709_u81EA_u4FE1_u7684_u4F60" class="headerlink" title="给没有自信的你"></a>给没有自信的你</h3><h3 id="u7ED9_u9700_u8981_u522B_u4EBA_u80AF_u5B9A_u7684_u4F60"><a href="#u7ED9_u9700_u8981_u522B_u4EBA_u80AF_u5B9A_u7684_u4F60" class="headerlink" title="给需要别人肯定的你"></a>给需要别人肯定的你</h3><h3 id="u7ED9_u60F3_u8981_u670B_u53CB_u7684_u4F60"><a href="#u7ED9_u60F3_u8981_u670B_u53CB_u7684_u4F60" class="headerlink" title="给想要朋友的你"></a>给想要朋友的你</h3><p>『如果你想要伙伴，就去制造一个敌人』在遵守礼节社交规则将心比心前提下，表达出自己的观点即使会得罪有些人，但你鲜明观点也很多人觉得你志同道合。<br>我们总是习惯在对方身上找寻和自己相同的地方，如果过程中双方都没有表明自己的意见和敞开胸怀，那么友谊就无法成立。<br>社交网络盛行的时代，交朋友更应该走出家门，面带微笑打招呼，注视着彼此的眼睛说话。</p>
<p>Do Next:<br>与人见面的时候， 试着把自己喜欢的东西和讨厌的事物告诉对方把。<br>你也可以主动询问对方，『这件事你怎么看』</p>
<p><img src="/../images/14526817128522.jpg" alt=""></p>
<h3 id="u7ED9_u6212_u4E0D_u6389_u5FEB_u4E50_u7684_u4F60"><a href="#u7ED9_u6212_u4E0D_u6389_u5FEB_u4E50_u7684_u4F60" class="headerlink" title="给戒不掉快乐的你"></a>给戒不掉快乐的你</h3><p>越是令自己开心舒服的事情，同时也伴随着同等的可怕<br>那些让你兴奋痛苦难以释手的嗜好品（睡觉，玩乐，吃东西，购物，计算机、手机，游戏机，性相关的活动，电视等）<br>不要放任自己的快乐膨胀，被快乐支配，要知道为什么自己要接着快乐沉迷来逃避现实<br>是什么让你痛苦，让你感到空虚，会悲伤，心中无法填满的感受，是从何而来的。 要摸清根源，你必须面对自己。<br>凝视自己的手心，什么事都不做，一直盯着，慢慢的你会从手心看到自己的心<br>痛苦时需要的药品和休息，而快乐是精神好的时候才能享受的事情。只要不对快乐产生依存，失去快乐的不安和寂寞也会渐渐远离你。</p>
<p>Do Next:<br>请仔细凝视自己的手心<br>说不定，你能因此发现自己的问题</p>
<p><img src="/../images/14526817311407.jpg" alt=""></p>
<h3 id="u672C_u7AE0_u603B_u7ED3_u8BFE_u9898"><a href="#u672C_u7AE0_u603B_u7ED3_u8BFE_u9898" class="headerlink" title="本章总结课题"></a>本章总结课题</h3><p>自己软弱的地方和坚强的地方，自己怀中揣着的不安和寂寞的真面目。<br>如果你想知道答案， 你就得去面对自己。<br>『我自己的事，我再清楚不过了』但这往往只是人的自以为是</p>
<p>我们每天的生活充满了外来的刺激和他人的影响，很少有时间能够静静地沉浸在自己的世界<br>但只要你花时间面对自己的心，每一次你都会有新发现。</p>
<p>我给各位的建议是 - 一个人去旅行</p>
<p>旅行很容易便能达成，你也能因此了解到自己软弱的地方，坚强的地方， 擅长的事情以及不拿手的事。<br>一个人去旅行把。目的地选在自己陌生的城市，语音不同的国度是最理想的</p>
<p><img src="/../images/14526817434913.jpg" alt=""></p>
<h2 id="u7B2C_u4E8C_u7AE0__u53BB_u63A5_u53D7_u90A3_u201C_u4E24_u4EF6_u4E8B_u201D"><a href="#u7B2C_u4E8C_u7AE0__u53BB_u63A5_u53D7_u90A3_u201C_u4E24_u4EF6_u4E8B_u201D" class="headerlink" title="第二章　去接受那“两件事”"></a>第二章　去接受那“两件事”</h2><h3 id="u7ED9_u5BB3_u6015_u5931_u8D25_u7684_u4F60"><a href="#u7ED9_u5BB3_u6015_u5931_u8D25_u7684_u4F60" class="headerlink" title="给害怕失败的你"></a>给害怕失败的你</h3><p>因为害怕失败，所以裹足不前。在一件事开始之前， 总是忍不住进行『事情发展不顺利时的模拟想象』<br>每当迟疑的时，会自问：『不做这件事的不利点是什么』</p>
<p>只要想到越多不走这件事的不利点，心中便会渐渐涌现『好，那我就干吧』的决心<br>『先下手为强，确认工序，万事俱备，仔细作业』</p>
<p>你只须要全神贯注地仔细去完成你的计划，把对失败的不安和寂寞上头的无谓心力转而用来细腻的执行作业。绝不要输给对失败的不安和寂寞，因而不去行动。</p>
<p>Do Next:<br>去思考『如果不做这件事，事情会如何发展』<br>跨出你的第一步把。</p>
<p><img src="/../images/14527328936077.jpg" alt=""></p>
<h3 id="u7ED9_u80C6_u5C0F_u7684_u4F60"><a href="#u7ED9_u80C6_u5C0F_u7684_u4F60" class="headerlink" title="给胆小的你"></a>给胆小的你</h3><p>你手头既没有地图，也没有结伴同行的搭档，举目望去，不见一个可以为你指引方向的对象，你也找不到标志牌。但你有一个无论如何都想抵达的目的地。不要因为自己孤身一人，就感到胆怯觉得寂寞。通常对于现实的目的地，你可以拿出智能手机来随时上网检索。但是如果你想去的地方是工作，人际关系或自己的目标之类的事情，你就没办法利用网络的地图检索功能来查询了。</p>
<p>不管你有多聪明，终究有你不懂的事。不管你准备多充分，终究有你算计不到的地方和因秩序规则而错过的。<br>要承认自己有不懂的事，抛开自己的聪明才智，你便能得到迈出脚步的勇气。<br>不要害怕自己的看不清前路，只要你心动迈开脚步，你便能看见接下来要走的路，或者因此认清自己走错的路。开走，脚踏实地的感觉也会给你带来自信。</p>
<p>不要总是花了很长时间在原地思考评估，被不安所牵制，因而动弹不得，久而久之这种行为模式就变成了你的习惯，越发束缚你的行动。很多时候，行动的勇气不是从你的脑袋中生出的，而是从你的脚下涌现的~</p>
<p>Do Next:<br>如果有根圆木倒在一步之外，你只要跨过去就行了</p>
<p><img src="/../images/14527329067529.jpg" alt=""></p>
<h3 id="u7ED9_u5BB3_u6015_u5B64_u72EC_u7684_u4F60"><a href="#u7ED9_u5BB3_u6015_u5B64_u72EC_u7684_u4F60" class="headerlink" title="给害怕孤独的你"></a>给害怕孤独的你</h3><p>十几岁去美国流浪的时，有很长一段时间，我都是窝在廉价旅社的破房间里，明明我前往异国是为了获得自由，却搞得连出门的兴致索然，原因是-我不愿承认自己的孤独。</p>
<p>事实上，我找到了价钱不贵，食物看起来很美味的餐厅，但是从窗外望了一眼后，我羞耻得根本不敢进去。因为所有的客人都是和同伴坐在一起，和乐融融地用餐。难道连话都讲不好的我要一个人孤零零的坐着店里埋头吃饭？太惨了~ 顿时萎靡，双腿发软，心想与其那样，还不如待在脏乱的房间啃洋芋片。 - 觉得没有人了解自己， 一种疏离感充斥心头。 除非自己主动打电话， 主动发邮件，主动打招呼，与人见面，否则自己一直是孤独的。</p>
<p>所以我硬着头皮把孤单又丢人的自己送到人前，用不擅长的外语开始找人说话， 于是有了于不同人的邂逅，也交到了朋友。正因为你是孤独的，你才能与人相遇，建立关系。不要为了消除孤身一人的不安，填补心中的寂寞就而拼命努力，最终落到可悲的地步~</p>
<p>当我一个人伫立于数百人往来横行的大型十字路口时，孤独曾经找上我，『周围那些人看起来感情真好，全是情侣，我却是一个人』在你为了填补心中的空虚去和别人见面， 不断地朝外部寻找安慰之前，你得花时间好好面对自己，与自己交往。软弱的地方，坚强的地方，好的地方，讨厌的地方。</p>
<p>置身于群体中确实会感到安心，与亲密的人在一起的确开心，但这些关系可能在一瞬间不复存在。转而对自己多报些兴趣。去了解自己，接受自己，然后，好好爱自己。</p>
<p>Do Next:<br>请用今天一整天的时间来好好面对自己，<br>试着一个人度过吧。</p>
<p><img src="/../images/14527329170053.jpg" alt=""></p>
<h3 id="u7ED9_u4E0D_u613F_u53D8_u8001_u7684_u4F60"><a href="#u7ED9_u4E0D_u613F_u53D8_u8001_u7684_u4F60" class="headerlink" title="给不愿变老的你"></a>给不愿变老的你</h3><h3 id="u7ED9_u5BB3_u6015_u75BE_u75C5_u7684_u4F60"><a href="#u7ED9_u5BB3_u6015_u75BE_u75C5_u7684_u4F60" class="headerlink" title="给害怕疾病的你"></a>给害怕疾病的你</h3><h3 id="u672C_u7AE0_u603B_u7ED3_u8BFE_u9898-1"><a href="#u672C_u7AE0_u603B_u7ED3_u8BFE_u9898-1" class="headerlink" title="本章总结课题"></a>本章总结课题</h3><p>只要在身体被逼到极限的时候，才审视自己的心，你会发现自己的意外一面。你会被迫认知到自己并不完美的。但那个你尽可能不想看见的丑陋的自我，才是你应该接受的自我。</p>
<p><img src="/../images/14527329432396.jpg" alt=""></p>
<h2 id="u7B2C_u4E09_u7AE0__u53BB_u539F_u8C05_u90A3_u201C_u4E24_u4EF6_u4E8B__u201D"><a href="#u7B2C_u4E09_u7AE0__u53BB_u539F_u8C05_u90A3_u201C_u4E24_u4EF6_u4E8B__u201D" class="headerlink" title="第三章　去原谅那“两件事 ”"></a>第三章　去原谅那“两件事 ”</h2><h3 id="u7ED9_u4E0D_u60F3_u88AB_u8BA8_u538C_u7684_u4F60"><a href="#u7ED9_u4E0D_u60F3_u88AB_u8BA8_u538C_u7684_u4F60" class="headerlink" title="给不想被讨厌的你"></a>给不想被讨厌的你</h3><p>我总是一个不小心就很容易想太多『大家心里是怎么看我的』，让自己看起来体面些，希望别人喜欢自己，不小心说出口的小谎言，会嫉妒别人，会斤斤计较的，感到自卑的丑陋小人。 可以试着把自己的秘密告诉倾诉给自己的好朋友，那些缺点，不好的地方，觉得需要改进的地方，像是那些基督教教徒们在教堂告解或类似的心理咨询的行动。</p>
<p>努力把自己打开把。把平时说不出口的私事向某人坦白。去到没有半个熟人的外国，自己主动向人打招呼，主动对人微笑是最容易交到朋友的方法。如果你只是一直待在原地，等着别人来向自己搭话，你会一直孤独下去，除了主动出击，别我他法！</p>
<p>Do Next:<br>试着自己主动敞开心门吧<br>方法很简单，就算对方是陌生人<br>你也主动打招呼，微笑以待，这么做就行你</p>
<p><img src="/../images/14527329524391.jpg" alt=""></p>
<h3 id="u7ED9_u60F3_u81EA_u75DB_u82E6_u4E2D_u9003_u79BB_u7684_u4F60"><a href="#u7ED9_u60F3_u81EA_u75DB_u82E6_u4E2D_u9003_u79BB_u7684_u4F60" class="headerlink" title="给想自痛苦中逃离的你"></a>给想自痛苦中逃离的你</h3><p>笔者从跑步的例子（每次开始加速锻炼时，觉得气喘吁吁双腿打颤熟悉的路变成你艰辛的路，但是最终又顺畅跑完）每个人都想b避开困难通过眼前的路，但感到痛苦吃力却正是自己正在成长，正在前进的证明。而不是那条对你早就驾轻就熟的没法从中成长和学习的路~ 你的困难正是你正在补强自己不足的地方，不要在困难前，什么都不做，一味地任由不安和寂寞膨胀，你会使出浑身解数，得到正面与困难交手的勇气。</p>
<p>Do Next:<br>遇上困难时，就念诵这个咒语：<br>『正因为我有能力跨越，这个考验才会降临』</p>
<p><img src="/../images/14527329624977.jpg" alt=""></p>
<h3 id="u7ED9_u4E0D_u613F_u5931_u53BB_u7684_u4F60"><a href="#u7ED9_u4E0D_u613F_u5931_u53BB_u7684_u4F60" class="headerlink" title="给不愿失去的你"></a>给不愿失去的你</h3><p>小孩子，会把所有的玩具都收集起来放在连自己都装的进去的大箱子，站在箱子前面看守。但他发现就算是玩具再多，一个人玩根部一点也不开心，『这个给你们，谁来陪我一起玩吧』 每个人都有自己珍视的东西。如那些无法用金钱取代的朋友，恋人和家人或是工作和地位。『要是失去这些，我该怎么办』 - 但其实那些珍贵之物其实全都是不属于你的，不过是暂时寄放在你手上的东西或任务。 你要绞尽脑汁想出办法来利用它。排除怕失去的落寞，体会到与人分享的喜悦。<br>如自己的工资用在维持健康，让自己能精神百倍的工作，能提升自己的事情上，当你一无所有的时，将会有一个更宽广的世界在你眼前展现。</p>
<p>Do Next:<br>请检索你一个月的金钱使用方式<br>你是否有效使用你你的财产了？</p>
<p><img src="/../images/14527329709983.jpg" alt=""></p>
<h3 id="u7ED9_u5BB3_u6015_u8D2B_u7A77_u7684_u4F60"><a href="#u7ED9_u5BB3_u6015_u8D2B_u7A77_u7684_u4F60" class="headerlink" title="给害怕贫穷的你"></a>给害怕贫穷的你</h3><h3 id="u672C_u7AE0_u603B_u7ED3_u8BFE_u9898-2"><a href="#u672C_u7AE0_u603B_u7ED3_u8BFE_u9898-2" class="headerlink" title="本章总结课题"></a>本章总结课题</h3><p>每个人都会有讨厌自己的时候，没有自信，厌恶自己，无法原谅自己。如果遇到这种时候，就去一件可以立即执行，自己喜欢并且擅长的事情吧。</p>
<p><img src="/../images/14527329848372.jpg" alt=""></p>
<h2 id="u7B2C_u56DB_u7AE0__u53BB_u7231_u90A3_u201C_u4E24_u4EF6_u4E8B_u201D"><a href="#u7B2C_u56DB_u7AE0__u53BB_u7231_u90A3_u201C_u4E24_u4EF6_u4E8B_u201D" class="headerlink" title="第四章　 去爱那“两件事”"></a>第四章　 去爱那“两件事”</h2><h3 id="u7ED9_u5728_u610F_u5916_u8868_u7684_u4F60"><a href="#u7ED9_u5728_u610F_u5916_u8868_u7684_u4F60" class="headerlink" title="给在意外表的你"></a>给在意外表的你</h3><p>抛开过去，活出全新的自己 - 心情的转换无需改变一张脸或是判若两人地改变身材，你也能办得到。<br>唯一必须为自己的外在负责的部分，是自己的服装仪容，穿着整洁和符合社会礼仪的服装，是成人应有的教养。</p>
<p>Do Next:<br>你唯一必须为自己的外在负责的部分，是你的服装仪容<br>你是否打理好你的仪容呢？</p>
<p><img src="/../images/14527330008306.jpg" alt=""></p>
<h3 id="u7ED9_u8BA8_u538C_u81EA_u5DF1_u7684_u4F60"><a href="#u7ED9_u8BA8_u538C_u81EA_u5DF1_u7684_u4F60" class="headerlink" title="给讨厌自己的你"></a>给讨厌自己的你</h3><p>过度敏感的自己并且毫不掩饰的表现出来，会让自己很疲倦的（而它有助于提升想象力和观察力，催生对他人的关怀） - 对于细节看出的小问题，不要生对方和自己的气，接受对方，原谅对方和珍爱对方，状况会立刻得到缓解</p>
<p>对自己的内在太过敏感的人，『松开脑袋的一两根螺丝钉』偶尔恍惚下，讲通俗点就是装点小傻~</p>
<p><img src="/../images/14527330137694.jpg" alt=""></p>
<h3 id="u7ED9_u4E3A_u751F_u80B2_u611F_u5230_u82E6_u607C_u7684_u4F60"><a href="#u7ED9_u4E3A_u751F_u80B2_u611F_u5230_u82E6_u607C_u7684_u4F60" class="headerlink" title="给为生育感到苦恼的你"></a>给为生育感到苦恼的你</h3><h3 id="u7ED9_u60F3_u5B9E_u73B0_u68A6_u60F3_u7684_u4F60"><a href="#u7ED9_u60F3_u5B9E_u73B0_u68A6_u60F3_u7684_u4F60" class="headerlink" title="给想实现梦想的你"></a>给想实现梦想的你</h3><p>大约在我年满三十五岁的时，我实现你一直以来的梦想，但是没有了『终于实现了！』的兴奋，长期以来我始终把梦想放在心里，我毫不气馁，就像每天洗澡吃饭一样，理所当然的持续拥抱梦想，全心全意相信它一定会实现。在每天中不过度勉强自己，孜孜不倦的为了实现梦想而付出行动。</p>
<p>用心过好生活，不受过去的牵绊，也不因未来而分心，重要的就是坚持过好今天让它充实和成就感</p>
<p>那些迅速到手的东西也会轻易的离开我们，这可能就像是临时抱佛脚所背完的书，总是一考完试就忘光。自己投资漫长时间，脚踏实地完成的梦想，才算是真正属于自己</p>
<p><img src="/../images/14527330229667.jpg" alt=""></p>
<h3 id="u7ED9_u5BF9_u4E00_u5207_u90FD_u611F_u5230_u4E0D_u5B89_u7684_u4F60"><a href="#u7ED9_u5BF9_u4E00_u5207_u90FD_u611F_u5230_u4E0D_u5B89_u7684_u4F60" class="headerlink" title="给对一切都感到不安的你"></a>给对一切都感到不安的你</h3><p>恐怕这世上大部分的人都和你一样有一颗软弱的心，大家都揣着各自的不安和寂寞，如果你能够承认自己心中的不安和寂寞，并且拥抱他，珍爱他，这就是最好的应对方法</p>
<p><img src="/../images/14527330327425.jpg" alt=""></p>
<h3 id="u672C_u7AE0_u603B_u7ED3_u8BFE_u9898-3"><a href="#u672C_u7AE0_u603B_u7ED3_u8BFE_u9898-3" class="headerlink" title="本章总结课题"></a>本章总结课题</h3><h3 id="u540E_u7EED"><a href="#u540E_u7EED" class="headerlink" title="后续"></a>后续</h3><p>严于律己的人才有资格享受生活<br>早上五点起床，跑步，晚上五点半结束工作，七点和家人一起用餐，十点准时睡觉。经年如此。三个人以上的聚会，他尽可能不参加</p>
<p><img src="/../images/14527330405103.jpg" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>是松浦弥太郎给所有内心怀抱不安(恐惧)和寂寞的朋友的19封关于人生的信<br>ps: 所以两件小事就是恐惧和寂寞<br>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[【Node】16年，新 Node 项目注意点]]></title>
    <link href="http://sivagao.com/2016-01/node-%E6%96%B0%E9%A1%B9%E7%9B%AE%E6%B3%A8%E6%84%8F%E7%82%B9-2016%E7%AF%87/"/>
    <id>http://sivagao.com/2016-01/node-新项目注意点-2016篇/</id>
    <published>2016-01-10T23:56:29.000Z</published>
    <updated>2016-01-31T13:21:50.000Z</updated>
    <content type="html"><![CDATA[<h2 id="u6B63_u6587"><a href="#u6B63_u6587" class="headerlink" title="正文"></a>正文</h2><p>16年开发 node 项目，会有什么不一样吗？！ 当然随着语言，工具，运行环境，开发方式的不断变化，你的 node 项目当然也需要不断的与时俱进，那么我们就依次来看看需要注意哪些问题吧。<br><a id="more"></a><br>目录</p>
<ul>
<li>现在开始使用 ES2015</li>
<li>异步函数支持回调惯例和Promise新写法</li>
<li>异步模式</li>
<li>错误处理</li>
<li>使用标准的 JavaScript 代码风格</li>
<li>Web 应用开发的十二条军规</li>
<li>始终用 npm init 开始新项目</li>
<li>文件名始终小写</li>
<li>智能的 .npmrc 和正确的版本管理做法</li>
<li>及时更新依赖</li>
<li>选择合适的数据库</li>
<li>监控你的应用程序</li>
<li>使用构建系统</li>
<li>NPM 生命周期钩子</li>
<li>管好垃圾回收</li>
<li>使用长期支持的 Node.js 版本</li>
<li>使用语义化的版本号</li>
<li>持续学习和跟上潮流</li>
</ul>
<h3 id="u73B0_u5728_u5F00_u59CB_u4F7F_u7528_ES2015"><a href="#u73B0_u5728_u5F00_u59CB_u4F7F_u7528_ES2015" class="headerlink" title="现在开始使用 ES2015"></a>现在开始使用 ES2015</h3><p>箭头函数<br>模板字符串<br>rest参数，扩展运算符(spread),函数默认值<br>变量的解构赋值<br>generator 和 promises<br>maps，sets 和 symbols</p>
<p>这些新语法大部分都被 Node.js V4 支持(参考)[<a href="https://nodejs.org/en/docs/es6/" target="_blank" rel="external">https://nodejs.org/en/docs/es6/</a>]<br>在服务器端的推荐使用新的 node 解释器支持的语法，或者可以用babel作为compile层（具体做法参考<a href="https://github.com/gf-rd/gf-skeleton-node" target="_blank" rel="external">脚手架</a>）</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从 express's req.query 解构 特定参数 ?page=2&amp;size=10&amp;word=测试</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;page, size, word&#125; = req.query;</span><br></pre></td></tr></table></figure>
<h3 id="u5F02_u6B65_u51FD_u6570_u652F_u6301_u56DE_u8C03_u60EF_u4F8B_u548CPromise_u65B0_u5199_u6CD5"><a href="#u5F02_u6B65_u51FD_u6570_u652F_u6301_u56DE_u8C03_u60EF_u4F8B_u548CPromise_u65B0_u5199_u6CD5" class="headerlink" title="异步函数支持回调惯例和Promise新写法"></a>异步函数支持回调惯例和Promise新写法</h3><p>过去，当Promise没有成为Node默认搭载的语法时，推荐模块通过导出 error-first callback 的接口形式。但是现在通常需要支持两种形式：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readPackage</span>(<span class="params">callback=noop</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>((resolve, reject)=&gt;&#123;</span><br><span class="line">    fs.readFile(<span class="string">'./package.json'</span>, (err, data)=&gt;&#123;</span><br><span class="line">      <span class="keyword">if</span>(err) &#123;</span><br><span class="line">        reject(err)</span><br><span class="line">        <span class="keyword">return</span> callback(err)</span><br><span class="line">      &#125;</span><br><span class="line">      resolve(data)</span><br><span class="line">      <span class="keyword">return</span> callback(<span class="literal">null</span>, data)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="u5F02_u6B65_u6A21_u5F0F"><a href="#u5F02_u6B65_u6A21_u5F0F" class="headerlink" title="异步模式"></a>异步模式</h3><p>过去很长时间，在 node 中一般有两种方式来管理异步流：callback回调和 streams 流<br>前者可以用辅助我们异步操作的 async 类库<br>后者可以用through, bl or highland 这些类库<br>但是随着 es6的 generator和promise的到来，甚至es7的 await/async 内建关键字的到来，情况变了。 详细请看 <a href="https://blog.risingstack.com/asynchronous-javascript/" target="_blank" rel="external">异步JavaScript的演进</a></p>
<h3 id="u9519_u8BEF_u5904_u7406"><a href="#u9519_u8BEF_u5904_u7406" class="headerlink" title="错误处理"></a>错误处理</h3><p>完善合理的错误处理让你的服务更加强健。知道何时crash，然后是仅仅catch后忽略，还是记下调用栈打入log后重试，甚至是需要重启？<br>我们通常需要区别对待 programmer error, operational errors:<br>前者直接重启（事实上在开发阶段就该发现，并且线上通过 logger 定位），因为程序员写的bug，如果不及时重启会导致应用的状态难以推演，从而发生更多更大的问题<br>而后者，通常不是bug，而是没有考虑全的case。如外部请求超时了，外部依赖的数据库连不上了，甚至所在运行的机器磁盘写满了，要访问写入的文件暂时不存在了。这些case一般需要在程序里加上特定的fallback/polyfill 来处理。如对于超时的重试几次，对于不存在的文件先试着创建新文件，对于总是塞满磁盘的log，通过logstash和logrotate去处理。</p>
<h4 id="u56DE_u8C03_u4E2D_u7684_u9519_u8BEF_u5904_u7406"><a href="#u56DE_u8C03_u4E2D_u7684_u9519_u8BEF_u5904_u7406" class="headerlink" title="回调中的错误处理"></a>回调中的错误处理</h4><p>error-first 约定的callback，始终记得在函数开始检查第一个err是否存在，然后进行合适的处理（当然也可以通过 next(e) 传入到调用栈的最后统一处理）</p>
<h4 id="Promise_u4E2D_u7684_u9519_u8BEF_u5904_u7406"><a href="#Promise_u4E2D_u7684_u9519_u8BEF_u5904_u7406" class="headerlink" title="Promise中的错误处理"></a>Promise中的错误处理</h4><p>始终记得在 promise 调用链的最后加上 catch 来处理异常</p>
<h3 id="u4F7F_u7528_u6807_u51C6_u7684_JavaScript__u4EE3_u7801_u98CE_u683C"><a href="#u4F7F_u7528_u6807_u51C6_u7684_JavaScript__u4EE3_u7801_u98CE_u683C" class="headerlink" title="使用标准的 JavaScript 代码风格"></a>使用标准的 JavaScript 代码风格</h3><p>过去我们使用 jslint, jshint, jscs 来作为我们的代码风格检查工具，但是随着 es6 的流行，还有一些新的习惯的养成，我们推荐使用 eslint 工具，同时配合 eslint-plugin-standard 插件</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "<span class="attribute">plugins</span>": <span class="value">[</span><br><span class="line">    <span class="string">"standard"</span></span><br><span class="line">  ]</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Web__u5E94_u7528_u5F00_u53D1_u7684_u5341_u4E8C_u6761_u519B_u89C4"><a href="#Web__u5E94_u7528_u5F00_u53D1_u7684_u5341_u4E8C_u6761_u519B_u89C4" class="headerlink" title="Web 应用开发的十二条军规"></a>Web 应用开发的十二条军规</h3><p>来自于 Rails 社区的血泪经验，但是大部分也是适用于我们Node项目 (一些实践可能在新的docker部署下会有小调整）</p>
<ul>
<li><a href="http://12factor.net/zh_cn/codebase" target="_blank" rel="external">一份基准代码Codebase，多份部署deploy</a></li>
<li><a href="http://12factor.net/zh_cn/dependencies" target="_blank" rel="external">显示声明和隔离依赖</a></li>
<li><a href="http://12factor.net/zh_cn/config" target="_blank" rel="external">在配置放在环境中</a></li>
<li><a href="http://12factor.net/zh_cn/backing-services" target="_blank" rel="external">把外部后端服务当做附加资源</a></li>
<li><a href="http://12factor.net/zh_cn/build-release-run" target="_blank" rel="external">严格分离构建和运行环境</a></li>
<li><a href="http://12factor.net/zh_cn/processes" target="_blank" rel="external">以一个或多个无状态进程运行应用</a></li>
<li><a href="http://12factor.net/zh_cn/port-binding" target="_blank" rel="external">通过端口绑定(Port binding)来提供服务</a></li>
<li><a href="http://12factor.net/zh_cn/concurrency" target="_blank" rel="external">通过进程模型进行扩展</a></li>
<li><a href="http://12factor.net/zh_cn/disposability" target="_blank" rel="external">快速启动和优雅终止可最大化健壮性</a></li>
<li><a href="http://12factor.net/zh_cn/dev-prod-parity" target="_blank" rel="external">尽可能的保持开发，预发布，线上环境相同</a></li>
<li><a href="http://12factor.net/zh_cn/logs" target="_blank" rel="external">把日志当作事件流</a></li>
<li><a href="http://12factor.net/zh_cn/admin-processes" target="_blank" rel="external">后台管理任务当作一次性进程运行</a></li>
</ul>
<h3 id="u59CB_u7EC8_u7528_npm_init__u5F00_u59CB_u65B0_u9879_u76EE"><a href="#u59CB_u7EC8_u7528_npm_init__u5F00_u59CB_u65B0_u9879_u76EE" class="headerlink" title="始终用 npm init 开始新项目"></a>始终用 npm init 开始新项目</h3><p>通过 npm init 来初始化你的node项目，通过promt 确定你的项目名称，开发者信息等（当然你可以通过 –yes 旗标来跳过）<br>Tip: 主要你应该总是显示指名你的node engines 版本（node -v），确保你的开发环境，测试环境和线上环境是用同一版本的 node.</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	"<span class="attribute">engines</span>": <span class="value">&#123;</span><br><span class="line">		"<span class="attribute">node</span>": <span class="value"><span class="string">"4.2.1"</span></span><br><span class="line">	</span>&#125;</span><br><span class="line"></span>&#125;</span><br></pre></td></tr></table></figure>
<h3 id="u6587_u4EF6_u540D_u59CB_u7EC8_u5C0F_u5199"><a href="#u6587_u4EF6_u540D_u59CB_u7EC8_u5C0F_u5199" class="headerlink" title="文件名始终小写"></a>文件名始终小写</h3><p>因为在 OSX 和 Windows 系统中，MyClass.js 和 myclass.js 没有任何区别，Linux 则会区分。所以为了你写的代码在不同操作系统是可移植的（在使用 require 来引入模块确保语句是一致明确的），所以始终保持小写 - my-class.js</p>
<h3 id="u667A_u80FD_u7684-npmrc__u548C_u6B63_u786E_u7684_u7248_u672C_u7BA1_u7406_u505A_u6CD5"><a href="#u667A_u80FD_u7684-npmrc__u548C_u6B63_u786E_u7684_u7248_u672C_u7BA1_u7406_u505A_u6CD5" class="headerlink" title="智能的.npmrc 和正确的版本管理做法"></a>智能的.npmrc 和正确的版本管理做法</h3><p>默认上， npm 在安装新的依赖的modules，默认不会加入到package.json中。同时，modules的版本号不是严格锁死的（^尖角号来确保大版本保持一致）这样会造成一些问题，如在发布时才发现没有把依赖写入到package.json中，造成线上缺少必要的模块，线上部署发现用的不是相同的modules，导致莫名其妙的问题和大量的depricated warning警告。</p>
<p>所以安装新依赖推荐这样的写法：<code>npm install foobar --save --save-exact</code><br>或者写入.npmrc 这样下次 npm install 就不会犯错啦</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npm config <span class="built_in">set</span> save=<span class="literal">true</span></span><br><span class="line">$ npm config <span class="built_in">set</span> save-exact=<span class="literal">true</span></span><br><span class="line">$ cat ~/.npmrc</span><br></pre></td></tr></table></figure>
<p>当然啦，如果如果希望更灵活的依赖控制，可以通过 <code>npm shrinkwrap</code> 命令生成 <code>npm-shrinkwrap.json</code> 加入到版本库中，这样在build环境构建也能保证版本统一。</p>
<h3 id="u53CA_u65F6_u66F4_u65B0_u4F9D_u8D56"><a href="#u53CA_u65F6_u66F4_u65B0_u4F9D_u8D56" class="headerlink" title="及时更新依赖"></a>及时更新依赖</h3><p>上面的版本锁死让你面对依赖模块的时候更加从容，但是要记得保持定期更新依赖，从而获得修复bug和性能优化功能完善的更新。可以每周利用 <code>npm outdated</code> 或 <a href="https://www.npmjs.com/package/npm-check-updates" target="_blank" rel="external">ncu 工具包</a></p>
<h3 id="u9009_u62E9_u5408_u9002_u7684_u6570_u636E_u5E93"><a href="#u9009_u62E9_u5408_u9002_u7684_u6570_u636E_u5E93" class="headerlink" title="选择合适的数据库"></a>选择合适的数据库</h3><p>大部分新的noder，在选择数据库，喜欢选择Mongodb。它的确很不错，但是 Mongodb 不是唯一的选择、<br>你应该根据你的应用场景来选择：</p>
<ul>
<li>你的数据是否结构化的</li>
<li>你的数据操作是否要支持事务</li>
<li>你数据是否需要持久化</li>
</ul>
<p>从而选择不同的数据库：如 PostgreSQL， Redis, LevelDB 等等</p>
<h3 id="u76D1_u63A7_u4F60_u7684_u5E94_u7528_u7A0B_u5E8F"><a href="#u76D1_u63A7_u4F60_u7684_u5E94_u7528_u7A0B_u5E8F" class="headerlink" title="监控你的应用程序"></a>监控你的应用程序</h3><p>你要对你的线上应用的运行状况了如指掌（CPU，Memory，日志等），对一些突发情况需要及时获得通知。<br>很多开源项目和SaaS产品都提供完善强大的监控服务，如Zabbix, Collectd, ElasticSearch 和 Logstash. 甚至结合Cabot给微信公众号发消息提醒等等</p>
<h3 id="u4F7F_u7528_u6784_u5EFA_u7CFB_u7EDF"><a href="#u4F7F_u7528_u6784_u5EFA_u7CFB_u7EDF" class="headerlink" title="使用构建系统"></a>使用构建系统</h3><p>现在的JavaScript的工具链有大量的选择： Grunt, Gulp, Webpack等。譬如在团队里，我们选择 Webpack 来辅助前端开发，gulp用来处理大量其他的自动化任务（你的shell脚本也可以通过gulp-shell集成进来）。当然我们也推荐使用 vanilla build （尤其你可以结合 npm lifecycle hooks 完成很多事）</p>
<h3 id="NPM__u751F_u547D_u5468_u671F_u94A9_u5B50"><a href="#NPM__u751F_u547D_u5468_u671F_u94A9_u5B50" class="headerlink" title="NPM 生命周期钩子"></a>NPM 生命周期钩子</h3><p>提供了很好的钩子来使得一些task实现的很优雅，我们的<a href="https://github.com/gf-rd/gf-skeleton-node" target="_blank" rel="external">脚手架</a>大量使用了这样的技巧</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#34;postinstall&#34;: &#34;bower install &#38;&#38; grunt build&#34;,&#10;&#10;&#34;postinstall&#34;: &#34;if $BUILD_ASSETS; then npm run build-assets; fi&#34;,&#10;&#34;build-assets&#34;: &#34;bower install &#38;&#38; grunt build&#34;&#10;&#10;# &#22914;&#26524;&#33050;&#26412;&#21464;&#22797;&#26434;&#21487;&#20197;&#21333;&#29420;&#25991;&#20214;&#65306;&#10;&#34;postinstall&#34;: &#34;scripts/postinstall.sh&#8221; (sh &#33050;&#26412;&#20013;&#20250;&#33258;&#21160;&#21487;&#20197;&#35775;&#38382;&#21040; ./node_modules/.bin &#20013;&#30340;&#21629;&#20196;&#65292;&#22240;&#20026;&#35813;&#36335;&#24452;&#34987;&#21152;&#20837;&#21040; $PATH)</span><br></pre></td></tr></table></figure>
<h3 id="u7BA1_u597D_u5783_u573E_u56DE_u6536"><a href="#u7BA1_u597D_u5783_u573E_u56DE_u6536" class="headerlink" title="管好垃圾回收"></a>管好垃圾回收</h3><p>v8默认使用 lazy 和 贪婪的 GC.  有时候等到1.5GB 自由才去回收未被使用的内存 (所以有时候内存涨不是因为泄露还是<a href="/">node’s usual lazy behavior</a>)</p>
<p>所以你不想自己的node应用经常把服务器的内存占满（或者你不得不调整，因为你的机器可用内存没那么多），试着使用下面的命令/proc 文件来启动 node 服务（推荐写在 .pm2config 中，正如脚手架推荐的）</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">web: node --optimize_for_size --max_old_space_size=920 --gc_interval=100 server.js</span><br></pre></td></tr></table></figure>
<h3 id="u4F7F_u7528_u957F_u671F_u652F_u6301_u7684_Node-js__u7248_u672C"><a href="#u4F7F_u7528_u957F_u671F_u652F_u6301_u7684_Node-js__u7248_u672C" class="headerlink" title="使用长期支持的 Node.js 版本"></a>使用长期支持的 Node.js 版本</h3><p>如果你需要在不同项目中工作，并且不同项目用的node版本还不一样，可以使用 node version manager(<a href="https://github.com/creationix/nvm" target="_blank" rel="external">nvm</a>)</p>
<h3 id="u4F7F_u7528_u8BED_u4E49_u5316_u7684_u7248_u672C_u53F7"><a href="#u4F7F_u7528_u8BED_u4E49_u5316_u7684_u7248_u672C_u53F7" class="headerlink" title="使用语义化的版本号"></a>使用语义化的版本号</h3><p>通过三段版本数来确保把兼容性声明好。 major.minor.patch 这样的格式，不同级别的升级对API更新的要求也是不一样的。可以通过<a href="https://github.com/semantic-release/semantic-release" target="_blank" rel="external">semantic-release</a> 来让版本升级更加自动化</p>
<h3 id="u6301_u7EED_u5B66_u4E60_u548C_u8DDF_u4E0A_u6F6E_u6D41"><a href="#u6301_u7EED_u5B66_u4E60_u548C_u8DDF_u4E0A_u6F6E_u6D41" class="headerlink" title="持续学习和跟上潮流"></a>持续学习和跟上潮流</h3><p>JavaScript 和 Node.js 社区异常活跃，的确是件好事。每周都有新的工具新的理念的加入，让我们始终保持热情和技术的提升（警惕自己变成跟风狗，要取色和了解每个新东西背后的不变的本质），不要待在自己的蜜罐中，要动手做试验和学习。以下资料：</p>
<ul>
<li>Node.js Weekly Newsletter</li>
<li>Microservice Weekly Newsletter</li>
<li>Changelog Weekly - for Open-Source news</li>
</ul>
<h2 id="u53C2_u8003"><a href="#u53C2_u8003" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://blog.risingstack.com/how-to-become-a-better-node-js-developer-in-2016/" target="_blank" rel="external">How to Become a Better Node.js Developer</a></li>
<li><a href="https://blog.heroku.com/archives/2015/11/10/node-habits-2016" target="_blank" rel="external">10 habits of a happy node hacker 2016</a></li>
<li><a href="http://12factor.net/zh_cn" target="_blank" rel="external">Web 服务开发的十二条军规</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u6B63_u6587"><a href="#u6B63_u6587" class="headerlink" title="正文"></a>正文</h2><p>16年开发 node 项目，会有什么不一样吗？！ 当然随着语言，工具，运行环境，开发方式的不断变化，你的 node 项目当然也需要不断的与时俱进，那么我们就依次来看看需要注意哪些问题吧。<br>]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://sivagao.com/tags/JavaScript/"/>
    
      <category term="Node.js" scheme="http://sivagao.com/tags/Node-js/"/>
    
      <category term="技术" scheme="http://sivagao.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[【Node】16年，在看Node项目构建和npm scripts]]></title>
    <link href="http://sivagao.com/2015-12/node-npm-scripts/"/>
    <id>http://sivagao.com/2015-12/node-npm-scripts/</id>
    <published>2015-12-29T23:56:29.000Z</published>
    <updated>2016-01-31T13:21:42.000Z</updated>
    <content type="html"><![CDATA[<h2 id="u7B80_u4ECB"><a href="#u7B80_u4ECB" class="headerlink" title="简介"></a>简介</h2><p>前端写node项目起来是很容易的，但是一些好的实践，一些提高开发效率，提高工程质量的方案如何快速无侵入的集成到 node development workflow 中起来，可能对刚上手的新人，或者是习惯了自己现有开发环境蜜罐的老人们是不那么容易的，所以该指南对一些常见问题和技巧进行收集和总结，为你的第一个 node 项目保驾护航！</p>
<h2 id="Todo"><a href="#Todo" class="headerlink" title="Todo"></a>Todo</h2><ul>
<li>[ ] 补完其余内容</li>
<li>[ ] 优化下目录结构</li>
<li>[ ] 优化下现有的例子</li>
<li>[ ] 导出脚手架，下次方便使用</li>
</ul>
<h2 id="Usage__u4F7F_u7528"><a href="#Usage__u4F7F_u7528" class="headerlink" title="Usage 使用"></a>Usage 使用</h2><!-- MarkdownTOC -->
<ul>
<li>在node项目中，如何使用 es6 来写</li>
<li>如何在项目中写 API文档（用 swagger api sepc）</li>
<li>如何在开发时，文件修改后重启项目</li>
<li>如何做环境aware的配置</li>
<li>如何通过环境变量配置接口等 - microserver 要求</li>
<li>如何部署es6代码到测试环境下（ pm2 babel 结合）</li>
<li>如何部署es6代码用于线上生产（先构建好 es5-compatible ）</li>
<li>如何更高级的使用的配置文件</li>
<li>如何用 supertest 做 api 测试</li>
<li>如何用 debug 模块来打测试log和诊断问题</li>
<li>如何通过各种hook来解耦合</li>
<li>如何做 请求的 validate 和 sanitize</li>
<li>es6 lint 代码检查和git hooks，precommit</li>
<li>代码漏洞检查和扫描和依赖及时更新和锁定</li>
<li>代码格式化 beautify 和格式化 用 xo</li>
<li>代码覆盖率 用 lab 伊斯坦布尔工具</li>
<li>babel-node-debug 集成 inspector 用上 devtools</li>
<li><a href="https://github.com/es-analysis/plato" target="_blank" rel="external">https://github.com/es-analysis/plato</a> 代码质量</li>
<li><a href="https://github.com/danielstjules/jsinspect" target="_blank" rel="external">https://github.com/danielstjules/jsinspect</a> 重复代码检查</li>
</ul>
<!-- /MarkdownTOC -->
<h3 id="u5728node_u9879_u76EE_u4E2D_uFF0C_u5982_u4F55_u4F7F_u7528_es6__u6765_u5199"><a href="#u5728node_u9879_u76EE_u4E2D_uFF0C_u5982_u4F55_u4F7F_u7528_es6__u6765_u5199" class="headerlink" title="在node项目中，如何使用 es6 来写"></a>在node项目中，如何使用 es6 来写</h3><p>npm install -g babel-cli</p>
<p>.babelrc<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"presets"</span>: [<span class="string">"es2015"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>babel-node entry.js</p>
<p>当然也可以在local中安装 babel-register，用register的方式来运行，而不是解释器</p>
<h3 id="u5982_u4F55_u5728_u9879_u76EE_u4E2D_u5199_API_u6587_u6863_uFF08_u7528_swagger_api_sepc_uFF09"><a href="#u5982_u4F55_u5728_u9879_u76EE_u4E2D_u5199_API_u6587_u6863_uFF08_u7528_swagger_api_sepc_uFF09" class="headerlink" title="如何在项目中写 API文档（用 swagger api sepc）"></a>如何在项目中写 API文档（用 swagger api sepc）</h3><p>在loopback中，会对model自动生成CRUD的restful 接口。对于自定义的remote method，通过api 配置说明：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">ResPkgUpdate.viewDetail = <span class="function"><span class="keyword">function</span>(<span class="params">id, cb</span>) </span>&#123;</span><br><span class="line">  ResPkg = loopback.findModel(<span class="string">'ResPkg'</span>);</span><br><span class="line"></span><br><span class="line">  ResPkgUpdate.findById(id, <span class="function"><span class="keyword">function</span>(<span class="params">err, resPkgUpdate</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err || !resPkgUpdate) &#123;</span><br><span class="line">      debug(<span class="string">'err: cannot find resPkgUpdate by id:'</span>, id);</span><br><span class="line">      <span class="keyword">return</span> cb(err || &#123;msg: <span class="string">'error'</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    cb(<span class="literal">null</span>, resPkgUpdate.resPkg.diffDetail);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ResPkgUpdate.remoteMethod(<span class="string">'viewDetail'</span>, &#123;</span><br><span class="line">  accepts: [&#123;</span><br><span class="line">    arg: <span class="string">'id'</span>, type: <span class="string">'number'</span>, required: <span class="literal">true</span></span><br><span class="line">  &#125;],</span><br><span class="line">  http: &#123;path: <span class="string">'/:id/viewDetail'</span>, verb: <span class="string">'get'</span>&#125;,</span><br><span class="line">  returns: &#123;arg: <span class="string">'result'</span>, type: <span class="string">'object'</span>&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>PS: 其他类型的项目，也可以通过工具从文件中抽取（如方法的注释）从而生成swagger spec 规范的api doc json，实在不纪，可以通过GUI工具来创作 api doc，同时借助 swagger-ui 来让前端使用和可视化调试现有的接口（提供接口参数约束，提供数据schema 查看等）</p>
<h3 id="u5982_u4F55_u5728_u5F00_u53D1_u65F6_uFF0C_u6587_u4EF6_u4FEE_u6539_u540E_u91CD_u542F_u9879_u76EE"><a href="#u5982_u4F55_u5728_u5F00_u53D1_u65F6_uFF0C_u6587_u4EF6_u4FEE_u6539_u540E_u91CD_u542F_u9879_u76EE" class="headerlink" title="如何在开发时，文件修改后重启项目"></a>如何在开发时，文件修改后重启项目</h3><p>package.json<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"dev"</span>: <span class="string">"nodemon --exec babel-node -- $npm_package_main"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>npm run dev</p>
<h3 id="u5982_u4F55_u505A_u73AF_u5883aware_u7684_u914D_u7F6E"><a href="#u5982_u4F55_u505A_u73AF_u5883aware_u7684_u914D_u7F6E" class="headerlink" title="如何做环境aware的配置"></a>如何做环境aware的配置</h3><p>配置信息在conf/config.json 中。但如果conf目录下存在以环境变量 NODE_ENV 的值为名称的 json 配置文件，就会自动加载到覆盖替换原来基础配置信息。<br>这一块是透明无侵入的，只需提供不同环境下的配置信息就好，不需要在代码上区别对待。使用时候如下：</p>
<p>app.kraken.get(‘<key>‘);</key></p>
<h3 id="u5982_u4F55_u901A_u8FC7_u73AF_u5883_u53D8_u91CF_u914D_u7F6E_u63A5_u53E3_u7B49_-_microserver__u8981_u6C42"><a href="#u5982_u4F55_u901A_u8FC7_u73AF_u5883_u53D8_u91CF_u914D_u7F6E_u63A5_u53E3_u7B49_-_microserver__u8981_u6C42" class="headerlink" title="如何通过环境变量配置接口等 - microserver 要求"></a>如何通过环境变量配置接口等 - microserver 要求</h3><p>env: 这个标识说明从环境变量中加载配置<br>同样还有： import: 从json文件加载到当前的key下为value object</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">  <span class="string">"api"</span>: &#123;</span><br><span class="line">    <span class="string">"articleSearch"</span>: <span class="string">"env:GFWC-articleSearch"</span>,</span><br><span class="line">    <span class="string">"shopSearch"</span>: <span class="string">"env:GFWC-shopSearch"</span>,</span><br><span class="line">    <span class="string">"stockSearch"</span>: <span class="string">"env:GFWC-stockSearch"</span>,</span><br><span class="line">    <span class="string">"portfolioSearch"</span>: <span class="string">"env:GFWC-portfolioSearch"</span>,</span><br><span class="line">    <span class="string">"portfolioSelfSearch"</span>: <span class="string">"env:GFWC-portfolioSelfSearch"</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">_.extend(process.env, &#123;</span><br><span class="line">  <span class="string">"GFWC-articleSearch"</span>: <span class="string">"http://&lt;host&gt;:6602/v1/social/article/findByTitle"</span>,</span><br><span class="line">  <span class="string">"GFWC-shopSearch"</span>: <span class="string">"http://&lt;host&gt;:7700/v1/store/search/shop"</span>,</span><br><span class="line">  <span class="string">"GFWC-stockSearch"</span>: <span class="string">"http://&lt;host&gt;:3500/portfolio/search/codechain"</span>,</span><br><span class="line">  <span class="string">"GFWC-portfolioSearch"</span>: <span class="string">"http://&lt;host&gt;:3500/portfolio/search/portfolio/name"</span>,</span><br><span class="line">  <span class="string">"GFWC-portfolioSelfSearch"</span>: <span class="string">"http://&lt;host&gt;:8090/portfolio/self/search"</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="u5982_u4F55_u90E8_u7F72es6_u4EE3_u7801_u5230_u6D4B_u8BD5_u73AF_u5883_u4E0B_uFF08_pm2_babel__u7ED3_u5408_uFF09"><a href="#u5982_u4F55_u90E8_u7F72es6_u4EE3_u7801_u5230_u6D4B_u8BD5_u73AF_u5883_u4E0B_uFF08_pm2_babel__u7ED3_u5408_uFF09" class="headerlink" title="如何部署es6代码到测试环境下（ pm2 babel 结合）"></a>如何部署es6代码到测试环境下（ pm2 babel 结合）</h3><p>.pm2_config.json<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"apps"</span> : [&#123;</span><br><span class="line">    <span class="string">"name"</span>        : <span class="string">"gfwealth-composite"</span>,</span><br><span class="line">    <span class="string">"script"</span>      : <span class="string">"./entry.js"</span>,</span><br><span class="line">    <span class="string">"watch"</span>       : <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"exec_interpreter"</span> : <span class="string">"babel-node"</span>,</span><br><span class="line">    <span class="string">"exec_mode"</span>        : <span class="string">"fork"</span>,</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>pm2 start server/server.js –name “gfwealth-composite”</p>
<h3 id="u5982_u4F55_u90E8_u7F72es6_u4EE3_u7801_u7528_u4E8E_u7EBF_u4E0A_u751F_u4EA7_uFF08_u5148_u6784_u5EFA_u597D_es5-compatible__uFF09"><a href="#u5982_u4F55_u90E8_u7F72es6_u4EE3_u7801_u7528_u4E8E_u7EBF_u4E0A_u751F_u4EA7_uFF08_u5148_u6784_u5EFA_u597D_es5-compatible__uFF09" class="headerlink" title="如何部署es6代码用于线上生产（先构建好 es5-compatible ）"></a>如何部署es6代码用于线上生产（先构建好 es5-compatible ）</h3><h3 id="u5982_u4F55_u66F4_u9AD8_u7EA7_u7684_u4F7F_u7528_u7684_u914D_u7F6E_u6587_u4EF6"><a href="#u5982_u4F55_u66F4_u9AD8_u7EA7_u7684_u4F7F_u7528_u7684_u914D_u7F6E_u6587_u4EF6" class="headerlink" title="如何更高级的使用的配置文件"></a>如何更高级的使用的配置文件</h3><p>参考使用 shortstop-handlers 来给 config 配置项，如 file:, env:, import: 等handler</p>
<h3 id="u5982_u4F55_u7528_supertest__u505A_api__u6D4B_u8BD5"><a href="#u5982_u4F55_u7528_supertest__u505A_api__u6D4B_u8BD5" class="headerlink" title="如何用 supertest 做 api 测试"></a>如何用 supertest 做 api 测试</h3><h3 id="u5982_u4F55_u7528_debug__u6A21_u5757_u6765_u6253_u6D4B_u8BD5log_u548C_u8BCA_u65AD_u95EE_u9898"><a href="#u5982_u4F55_u7528_debug__u6A21_u5757_u6765_u6253_u6D4B_u8BD5log_u548C_u8BCA_u65AD_u95EE_u9898" class="headerlink" title="如何用 debug 模块来打测试log和诊断问题"></a>如何用 debug 模块来打测试log和诊断问题</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">debug = <span class="built_in">require</span>(<span class="string">'debug'</span>)(<span class="string">'ctrl:search'</span>)</span><br><span class="line"></span><br><span class="line">debug(<span class="string">`ok:http:<span class="subst">$&#123;type&#125;</span>:<span class="subst">$&#123;resp.req.path&#125;</span>`</span>);</span><br></pre></td></tr></table></figure>
<p>NODE=”ctrl:<em>,model:</em>“ node .</p>
<h3 id="u5982_u4F55_u901A_u8FC7_u5404_u79CDhook_u6765_u89E3_u8026_u5408"><a href="#u5982_u4F55_u901A_u8FC7_u5404_u79CDhook_u6765_u89E3_u8026_u5408" class="headerlink" title="如何通过各种hook来解耦合"></a>如何通过各种hook来解耦合</h3><p>一般框架会支持资源 CRUD 等操作的operational hook，<br>同时也有 remoteMethod hook和application lifecycle hook。</p>
<h3 id="u5982_u4F55_u505A__u8BF7_u6C42_u7684_validate__u548C_sanitize"><a href="#u5982_u4F55_u505A__u8BF7_u6C42_u7684_validate__u548C_sanitize" class="headerlink" title="如何做 请求的 validate 和 sanitize"></a>如何做 请求的 validate 和 sanitize</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">req.assert(<span class="string">'query'</span>, <span class="string">'Invalid query'</span>).notEmpty();</span><br><span class="line">req.checkQuery(<span class="string">'page'</span>, <span class="string">'Invalid page'</span>).notEmpty().isInt();</span><br><span class="line">req.checkParam(<span class="string">'type'</span>, <span class="string">'Invalid type'</span>)</span><br><span class="line">  .isIn([<span class="string">'aritlce'</span>, <span class="string">'stock'</span>, <span class="string">'shop'</span>]);</span><br><span class="line">  </span><br><span class="line">req.sanitizeParams(<span class="string">'urlparam'</span>).toBoolean();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> errors = req.validationErrors();</span><br><span class="line"><span class="keyword">if</span>(errors) <span class="keyword">return</span> res.send(errors, <span class="number">400</span>);</span><br></pre></td></tr></table></figure>
<h3 id="es6_lint__u4EE3_u7801_u68C0_u67E5_u548Cgit_hooks_uFF0Cprecommit"><a href="#es6_lint__u4EE3_u7801_u68C0_u67E5_u548Cgit_hooks_uFF0Cprecommit" class="headerlink" title="es6 lint 代码检查和git hooks，precommit"></a>es6 lint 代码检查和git hooks，precommit</h3><h3 id="u4EE3_u7801_u6F0F_u6D1E_u68C0_u67E5_u548C_u626B_u63CF_u548C_u4F9D_u8D56_u53CA_u65F6_u66F4_u65B0_u548C_u9501_u5B9A"><a href="#u4EE3_u7801_u6F0F_u6D1E_u68C0_u67E5_u548C_u626B_u63CF_u548C_u4F9D_u8D56_u53CA_u65F6_u66F4_u65B0_u548C_u9501_u5B9A" class="headerlink" title="代码漏洞检查和扫描和依赖及时更新和锁定"></a>代码漏洞检查和扫描和依赖及时更新和锁定</h3><h3 id="u4EE3_u7801_u683C_u5F0F_u5316_beautify__u548C_u683C_u5F0F_u5316__u7528_xo"><a href="#u4EE3_u7801_u683C_u5F0F_u5316_beautify__u548C_u683C_u5F0F_u5316__u7528_xo" class="headerlink" title="代码格式化 beautify 和格式化 用 xo"></a>代码格式化 beautify 和格式化 用 xo</h3><h3 id="u4EE3_u7801_u8986_u76D6_u7387__u7528_lab__u4F0A_u65AF_u5766_u5E03_u5C14_u5DE5_u5177"><a href="#u4EE3_u7801_u8986_u76D6_u7387__u7528_lab__u4F0A_u65AF_u5766_u5E03_u5C14_u5DE5_u5177" class="headerlink" title="代码覆盖率 用 lab 伊斯坦布尔工具"></a>代码覆盖率 用 lab 伊斯坦布尔工具</h3><h3 id="babel-node-debug__u96C6_u6210_inspector__u7528_u4E0A_devtools"><a href="#babel-node-debug__u96C6_u6210_inspector__u7528_u4E0A_devtools" class="headerlink" title="babel-node-debug 集成 inspector 用上 devtools"></a>babel-node-debug 集成 inspector 用上 devtools</h3><h3 id="https_3A//github-com/es-analysis/plato__u4EE3_u7801_u8D28_u91CF"><a href="#https_3A//github-com/es-analysis/plato__u4EE3_u7801_u8D28_u91CF" class="headerlink" title="https://github.com/es-analysis/plato 代码质量"></a><a href="https://github.com/es-analysis/plato" target="_blank" rel="external">https://github.com/es-analysis/plato</a> 代码质量</h3><p><a href="https://segmentfault.com/a/1190000002434755" target="_blank" rel="external">https://segmentfault.com/a/1190000002434755</a></p>
<h3 id="https_3A//github-com/danielstjules/jsinspect__u91CD_u590D_u4EE3_u7801_u68C0_u67E5"><a href="#https_3A//github-com/danielstjules/jsinspect__u91CD_u590D_u4EE3_u7801_u68C0_u67E5" class="headerlink" title="https://github.com/danielstjules/jsinspect 重复代码检查"></a><a href="https://github.com/danielstjules/jsinspect" target="_blank" rel="external">https://github.com/danielstjules/jsinspect</a> 重复代码检查</h3>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u7B80_u4ECB"><a href="#u7B80_u4ECB" class="headerlink" title="简介"></a>简介</h2><p>前端写node项目起来是很容易的，但是一些好的实践，一些提高开发效率，提高工程质量的方案如何快速无侵入的]]>
    </summary>
    
      <category term="JavaScript" scheme="http://sivagao.com/tags/JavaScript/"/>
    
      <category term="Node.js" scheme="http://sivagao.com/tags/Node-js/"/>
    
      <category term="技术" scheme="http://sivagao.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[【读书笔记】情商]]></title>
    <link href="http://sivagao.com/2015-12/book-emotion-quanity/"/>
    <id>http://sivagao.com/2015-12/book-emotion-quanity/</id>
    <published>2015-12-22T23:56:29.000Z</published>
    <updated>2016-01-31T13:22:08.000Z</updated>
    <content type="html"><![CDATA[<p><a href="http://book.douban.com/subject/20386245/" target="_blank" rel="external">http://book.douban.com/subject/20386245/</a></p>
<p>这本书是情商之父的新研究成果，是『情商：为什么情商比智商更重要』的升华和延生，内容强调了团队和领导情景下的情商讨论。</p>
<p>我们如何做出决策， 如何发挥你大脑的和创造力， 如何调整最佳工作状态，如何建立良好的社交关系，如何有效的理解他人，如何提高网络时代的社交商，你适合什么样的领导风格。</p>
<p>内容包括：</p>
<ul>
<li>学术界关注的：有别于智商的情商真的存在吗</li>
<li>大脑的伦理探测器</li>
<li>创造力的神经机制</li>
<li>驱动力，持久力和动机的神经回路</li>
<li>保持及增强最佳的大脑状态</li>
<li>社交脑：和谐，共鸣与人际互动</li>
<li>大脑2.0版：网络时代的大脑</li>
<li>同理心类型与主要的性别差异</li>
<li>情绪阴暗面：工作中的反社会个人</li>
<li>训练和提高情商的神经课程</li>
</ul>
<h2 id="u5185_u5BB9_u5927_u7EB2"><a href="#u5185_u5BB9_u5927_u7EB2" class="headerlink" title="内容大纲"></a>内容大纲</h2><h3 id="u7B2C_u4E00_u90E8_u5206_uFF1A_u60C5_u5546_u7684_u529B_u91CF"><a href="#u7B2C_u4E00_u90E8_u5206_uFF1A_u60C5_u5546_u7684_u529B_u91CF" class="headerlink" title="第一部分：情商的力量"></a>第一部分：情商的力量</h3><h4 id="u60CA_u4EBA_u7684_u53D1_u5C55"><a href="#u60CA_u4EBA_u7684_u53D1_u5C55" class="headerlink" title="惊人的发展"></a>惊人的发展</h4><p>每种情商模式可以划分伪自我意识， 自我管理，社会意识和人际关系管理四大类型。 </p>
<p>知识经济时代，群商（团队协调合作的有效性）来辅助提升团队的效能，同时心理状态（压力，疲惫，涌流）的研究，要求好的领导者需要带领团队进入涌流。同时，情商决定了我们自我管理人际关系等基础要素的潜能， 而情绪竞争力反应的是我们在情商转化伪职业能力的潜能（如提高客户服务， 团队合作的情绪能力等）</p>
<h4 id="u7528_u5FC3_u7BA1_u7406"><a href="#u7528_u5FC3_u7BA1_u7406" class="headerlink" title="用心管理"></a>用心管理</h4><p>意识到挫折或失败是由客观条件造成的， 我们可以改变这些条件，从而把工作做得更好。<br>领导力不是支持和控制，而是说服人们向共同目标努力的艺术。同时确保团队成员见的协调一致。 正如夫妇的情绪健康取决于他们表达不满的技巧， 公司员工的工作效率和满意度和产出取决于上司向他们指出问题的方式。受攻击的员工常见的回应： 为自己辩护，寻找借口，逃避责任或消极作对等（情绪是紧张，愤怒和抵触的） - 批评是激励员工最糟糕的方式<br>最主要是传递有效信息（反馈）<br>具体，选择有意义的事件，提供解决思路，当面表达，保持敏感。提出的改进工作信息而不是攻击，警惕自我辩护而不是承担责任的冲动，让自己冷静下来再回应。坐下来解决问题而不是敌对立场。</p>
<h4 id="u9886_u5BFC_u662F_u5982_u4F55_u70BC_u6210_u7684"><a href="#u9886_u5BFC_u662F_u5982_u4F55_u70BC_u6210_u7684" class="headerlink" title="领导是如何炼成的"></a>领导是如何炼成的</h4><p>讲解了自我意识， 自我管理， 同理心（社会意识）和社交技巧<br>技术业务能力，认知分析能力，情商竞争力。职位越高， 情商对其效能的影响因素就越大（跟更多人打交道）<br>自我意识是指对自己的情绪，优劣势和需求动机有着深切理解。对自我价值和目标认识清晰从而行动果断。 需要坦率以及准备的自我评估渴望建设性的批评建议。</p>
<p>自我管理调节控制受坏情绪和避免冲动，不慌不忙从容应对（情绪控制强的人通常被认为是冷冰冰的，深思熟虑后的回应被看做是缺乏热情，而不是脾气暴躁领导的风范</p>
<p>同理心，善解人意</p>
<p>社交技巧，带有目的的友好表示，说服人们按照你希望的方式行动。交际面很广，善于发现和别人相似之处，意识到团队群策群力的重要性</p>
<h4 id="u4F60_u9002_u5408_u4EC0_u4E48_u6837_u7684_u9886_u5BFC_u98CE_u683C"><a href="#u4F60_u9002_u5408_u4EC0_u4E48_u6837_u7684_u9886_u5BFC_u98CE_u683C" class="headerlink" title="你适合什么样的领导风格"></a>你适合什么样的领导风格</h4><p>不同类型的领导：权威型，教练型，亲民型，领头型，高压型等<br>鼓舞士气，制定战略，分配任务和营造文化。 『领导者突出任务是获得结果』</p>
<p>权威，发动员工向目标共同努力（分解为个体的目标任务，围绕组织愿景制定工作标准和奖励标准 - 但是如果他和一群比他有经验的专家共事会表现的盛气凌人）</p>
<p>亲和，创造感情联系和和谐关系（注重个体和情绪甚于目标和任务，培养员工归属感）</p>
<p>民主，通过参与建立共识（在领导者本身不清楚前进方向，需要听从有能力员工的意见，让员工对工作任务和标准有发言权和）<br>领头，期待员工出色表现和自我管理</p>
<p>教练，训练来成长提升（帮助员工人情独特优势和关键缺点，鼓励他们追求个人和职业梦想，明确在项目角色和义务，擅长授权和布置有挑战性的任务。教练型越来越重要帮助组织变成学习型，它靠润物无声而不是摇旗呐喊。PS：个体发展和公司业务结合权衡）</p>
<p>领头，他设定特别高的业绩标准，并且以身作则，亲自示范，要求别人也一样，表现不佳的员工逃不过他的眼睛 - 有时候这样会给团队压力要求过高使得员工士气低落。 适合带领技术能力出色，积极主动的专业人士，比如研发团队和律师团队</p>
<p>高压，要求毫无疑问的顺从（只适合公司发展的危急关头-如改组期间和面临收购和面临业绩压力等</p>
<p>事实证明，管理者的领导风格越多样越好。</p>
<h4 id="u7FA4_u5546"><a href="#u7FA4_u5546" class="headerlink" title="群商"></a>群商</h4><p>团队成功依赖于内部成员的和谐程度。对于一个和谐团队，拥有一位天分极高的成员可以提高团队的整体表现。明星员工和普通员工在能力上没有显著差异，关键差异在于为了完成任务运用的内在策略和人际策略 - 与一群关键人物保持融洽的关系。非正式网具有高度适应性，可以交流一些敏感信息（如想换工作，对经理的吐槽等），有三种形式：一是沟通网（相互交谈的圈子），二是专业网（由提供建议的人组成），三是信任网（交换秘密，疑问和弱点）</p>
<p>当然明星员工还包括协调团队在意见一致时起到领导作用，他人角度看问题，说服他人等（社交技能）<br>当然他们也积极主动自我激励承担本职之外的责任。善于自我管理，在时间和工作承诺中取得平衡（自我控制）</p>
<h3 id="u5927_u8111_u548C_u60C5_u5546"><a href="#u5927_u8111_u548C_u60C5_u5546" class="headerlink" title="大脑和情商"></a>大脑和情商</h3><h4 id="u60C5_u5546_u4E3A_u4EC0_u4E48_u5982_u6B64_u72EC_u7279"><a href="#u60C5_u5546_u4E3A_u4EC0_u4E48_u5982_u6B64_u72EC_u7279" class="headerlink" title="情商为什么如此独特"></a>情商为什么如此独特</h4><h4 id="u81EA_u6211_u610F_u8BC6_uFF1A_u6211_u4EEC_u662F_u5982_u4F55_u505A_u51FA_u51B3_u5B9A_u7684"><a href="#u81EA_u6211_u610F_u8BC6_uFF1A_u6211_u4EEC_u662F_u5982_u4F55_u505A_u51FA_u51B3_u5B9A_u7684" class="headerlink" title="自我意识：我们是如何做出决定的"></a>自我意识：我们是如何做出决定的</h4><h4 id="u6700_u4F73_u5FC3_u7406_u72B6_u6001"><a href="#u6700_u4F73_u5FC3_u7406_u72B6_u6001" class="headerlink" title="最佳心理状态"></a>最佳心理状态</h4><p>消极情绪让我们和周围的人感到不快，更容易在遇到困难时就迅速放弃<br>积极乐观让我们更富有创造性，但也会容易仓促决定没有对细节足够的关注。<br>负面情绪并非一无是处，它让我们严肃，保持质疑精神，深入探究做出自己判断。 愤怒也会让人集中精力排除万难保持斗志等。它的坏处是：<br>1 让周围的人感到不快，影响团队情绪和效率<br>2 使自己有消极偏见，遇到困难就放弃等</p>
<h4 id="u6253_u5F00_u521B_u610F_u4E4B_u95E8"><a href="#u6253_u5F00_u521B_u610F_u4E4B_u95E8" class="headerlink" title="打开创意之门"></a>打开创意之门</h4><p>创造力四阶段经典模型（辨认和界定问题， 全神贯注和深入思考，放手不管和保持放松「譬如在洗热水澡时，散步或度假时」，实施）<br>但实际生活中，创业工作者与创造力之间的复杂关系远远超过模型的描述<br>在放松阶段，我们进入开放包容，白日做梦和随波逐流的状态，此时我们对新想法的感受能力更强（在紧张思索后的放松情绪之间）</p>
<h4 id="u81EA_u6211_u63A7_u5236_u548C_u8C03_u8282"><a href="#u81EA_u6211_u63A7_u5236_u548C_u8C03_u8282" class="headerlink" title="自我控制和调节"></a>自我控制和调节</h4><p>所谓的杏仁核劫持是的无法集中精力完成工作，只会想着困扰自己的事，无法记忆其他事情。<br>自我管理的基础：觉察到内心的状态，并对其管理。学会自我管理无论在哪个领域都会拥有出色的表现。<br>前额皮层是自我调节的主要神经区域，而杏仁核是苦恼，愤怒，冲动和恐惧等情绪的触发器（是大脑探测威胁的雷达）。一般前额皮质和杏仁核进行交互和平衡，成为自我管理的基础。<br>容易触发杏仁核：<br>卑躬屈膝，毫无尊严<br>收到不公正对待<br>不被欣赏<br>意见没人理会<br>完成任务的时间太苛刻</p>
<p>如何把杏仁核劫持反应降到最低：<br>1 提高注意力，监控自身心理和大脑状态意识到『我真是反应过度了』<br>2 恢复 - 认知方法，说服自己讲道理（质疑自己失控的想法：这家伙不是一直这么差劲，有时候他也很体贴<br>3 恢复 - 运用同理心，想象自己处于对方的位置<br>4 生物疗法</p>
<p>PS：症状发展伪焦虑症，抑郁症等</p>
<h4 id="u51CF_u538B_-__u6B63_u5FF5"><a href="#u51CF_u538B_-__u6B63_u5FF5" class="headerlink" title="减压 - 正念"></a>减压 - 正念</h4><p>拥有良好的迷走神经张力，不加能够帮我们从压力中复原，还有助于睡眠，防止生活中的慢性压力对健康造成不良影响</p>
<p>1 脱离忙碌纷乱的常规生活，抽出固定时间用于休息和复原（如沐浴遛狗等），停止疲于奔命<br>2 正念，此时此刻对自身体验保持不偏不倚的态度（不批评不做反应等） - 可以增强前额皮质关键部位的支配地位<br>3 冥想，爱的练习，迷走神经张力，身体应对挑战并迅速复原的动员能力*发火前慢慢从1数到10等</p>
<h4 id="u60F3_u8981_u6210_u529F_uFF0C_u9700_u8981_u826F_u597D_u7684_u52A8_u673A"><a href="#u60F3_u8981_u6210_u529F_uFF0C_u9700_u8981_u826F_u597D_u7684_u52A8_u673A" class="headerlink" title="想要成功，需要良好的动机"></a>想要成功，需要良好的动机</h4><p>动机正是乐趣所在，实现目标的过程通常是困难重重的。需要动机驱使我们勇往直前，渡过难关</p>
<ul>
<li>权利需要，对他人施加影响的欲望（两种，自我伪中心的自私型权利，如纳粹分子。另外是社会福利型权利）</li>
<li>亲和需要，与他人相处获得愉悦感的需要</li>
<li>成就需要（实现有意义的目标）警惕它的负面影响，有些人变成工作狂只想着工作目标，完美主义者看不到已经做得很好的地方，不会放下工作享受喜欢的东西，或付出健康代价染上慢性疾病</li>
</ul>
<h4 id="u8C03_u6574_u5230_u6700_u4F73_u5DE5_u4F5C_u72B6_u6001"><a href="#u8C03_u6574_u5230_u6700_u4F73_u5DE5_u4F5C_u72B6_u6001" class="headerlink" title="调整到最佳工作状态"></a>调整到最佳工作状态</h4><p>良性的压力，让人全情投入，备受鼓励</p>
<p>涌流，日常练习提高注意力并且保持生理放松.<br>认知角度训练专注力（把注意力集中在一件事，一旦开始游离到其他上，你意识到它并且把注意力重新集中在原来事上）这样肌肉得到锻炼</p>
<h4 id="u5EFA_u7ACB_u826F_u597D_u7684_u793E_u4EA4_u5173_u7CFB"><a href="#u5EFA_u7ACB_u826F_u597D_u7684_u793E_u4EA4_u5173_u7CFB" class="headerlink" title="建立良好的社交关系"></a>建立良好的社交关系</h4><p>参与并且塑造对方的感受， 管理他人大脑状态</p>
<h4 id="u7F51_u7EDC_u65F6_u4EE3_u7684_u793E_u4EA4_u5546"><a href="#u7F51_u7EDC_u65F6_u4EE3_u7684_u793E_u4EA4_u5546" class="headerlink" title="网络时代的社交商"></a>网络时代的社交商</h4><h4 id="u540C_u7406_u5FC3_uFF1A_u6709_u6548_u5730_u7406_u89E3_u4ED6_u4EBA"><a href="#u540C_u7406_u5FC3_uFF1A_u6709_u6548_u5730_u7406_u89E3_u4ED6_u4EBA" class="headerlink" title="同理心：有效地理解他人"></a>同理心：有效地理解他人</h4><p>社会意识的核心技能：同理心。不用别人诉说，我们就能体会到对方的想法和感受，我们通过语调，面部表情，姿势和其他大量非语言渠道，持续向他人发送感受信号，但不同人理解洞察程度大相径庭。</p>
<p>认知同理心：我了解你看待事物的态度可以站在你的立场<br>情绪同理心：我与你感同身受，是人际关系和谐擦出火花的基础<br>同理心关怀：我如果感受到你需要帮助自然会提供版主</p>
<p>锻炼，don’t lie to me, 非语言线索往往会泄露人们的真实情感（观看没有声音的录像或影片，猜测演员所表达的情绪并且验证）</p>
<h4 id="u60C5_u5546_u7537_u5973_u6709_u522B"><a href="#u60C5_u5546_u7537_u5973_u6709_u522B" class="headerlink" title="情商男女有别"></a>情商男女有别</h4><p>女性在同理心更敏感而男性很容易进入解决问题模式（系统思维能力）</p>
<h4 id="u9634_u6697_u60C5_u7EEA_uFF1A_u4ED6_u4EEC_u7F3A_u5C11_u60C5_u7EEA_u540C_u7406_u5FC3"><a href="#u9634_u6697_u60C5_u7EEA_uFF1A_u4ED6_u4EEC_u7F3A_u5C11_u60C5_u7EEA_u540C_u7406_u5FC3" class="headerlink" title="阴暗情绪：他们缺少情绪同理心"></a>阴暗情绪：他们缺少情绪同理心</h4><h4 id="u8BAD_u7EC3_u60C5_u5546_uFF1A_u4F60_u5E0C_u671B_u5927_u8111_u9ED8_u8BA4_u4EC0_u4E48_u9009_u9879"><a href="#u8BAD_u7EC3_u60C5_u5546_uFF1A_u4F60_u5E0C_u671B_u5927_u8111_u9ED8_u8BA4_u4EC0_u4E48_u9009_u9879" class="headerlink" title="训练情商：你希望大脑默认什么选项"></a>训练情商：你希望大脑默认什么选项</h4><p>内心演练，它所激活的神经回路和真正从事该项活动激活的是一样的<br>行为习惯练习越多，神经联结越强，重复多次后成为了默认选项（也取决于被替代的旧习惯的顽固程度）</p>
<h4 id="u793E_u4EA4_u4E8E_u60C5_u611F_u5B66_u4E60"><a href="#u793E_u4EA4_u4E8E_u60C5_u611F_u5B66_u4E60" class="headerlink" title="社交于情感学习"></a>社交于情感学习</h4>]]></content>
    <summary type="html">
    <![CDATA[<p><a href="http://book.douban.com/subject/20386245/" target="_blank" rel="external">http://book.douban.com/subject/20386245/</a></p>
<p>这本书]]>
    </summary>
    
      <category term="JavaScript" scheme="http://sivagao.com/tags/JavaScript/"/>
    
      <category term="Node.js" scheme="http://sivagao.com/tags/Node-js/"/>
    
      <category term="读书" scheme="http://sivagao.com/categories/%E8%AF%BB%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[【Node】Node 接入层 - 技术选型]]></title>
    <link href="http://sivagao.com/2015-12/node-gateway-choices/"/>
    <id>http://sivagao.com/2015-12/node-gateway-choices/</id>
    <published>2015-12-06T23:56:29.000Z</published>
    <updated>2016-01-31T13:21:46.000Z</updated>
    <content type="html"><![CDATA[<h2 id="API__u7F51_u5173"><a href="#API__u7F51_u5173" class="headerlink" title="API 网关"></a>API 网关</h2><p>具体 API 网关功能介绍请见<a href="https://github.com/gf-rd/blog/issues/3" target="_blank" rel="external">Node.js API gateway</a><br>具体 API 网关和微服务架构关系见<a href="https://github.com/gf-rd/blog/issues/10" target="_blank" rel="external">Node 接入层 - 微服务架构</a><br>该 api gateway 基于 loopback， 结合kraken.js框架。</p>
<h3 id="u7279_u6027"><a href="#u7279_u6027" class="headerlink" title="特性"></a>特性</h3><ul>
<li>开发时支持文件改动重启(remy/nodemon)</li>
<li>防止node event-loop卡出(lloyd/node-toobusy)</li>
<li>客户端支持，生成helper(如Angular resources service)</li>
<li>支持node cluster（pm2）</li>
<li>支持webapp的profiling（CPU，memory等）（pm2 metrics 导入statsD）</li>
<li>支持environment-specific configfile (indexzero/nconf，loopback内置)</li>
<li>工业强度的安全头（helmetjs/helmet，krakenjs/lusca）</li>
<li>api 文档和playground 支持（swagger-api/swagger-ui）</li>
<li>routes &amp; controllers 的代码结构约束（krakenjs/express-enrouten） </li>
<li>多个data sources &amp; connector 支持（pg, mysql, mongodb等）</li>
<li>http req query/body 检查和sanitizer（ctavan/express-validator）</li>
<li>接口支持精细化ACL控制（loopback内置）</li>
<li>configured middleware setup（loopback内置）</li>
<li>请求频率控制Rate limit（visionmedia/node-ratelimiter，移入nginx中）</li>
<li>请求信息log（morgan，移入nginx中）</li>
<li>认证授权系统（oauth, cookie, jwt支持)</li>
</ul>
<h3 id="u5916_u56F4_u7CFB_u7EDF"><a href="#u5916_u56F4_u7CFB_u7EDF" class="headerlink" title="外围系统"></a>外围系统</h3><p>外围系统通过 docker 镜像和容器提供服务. 具体实例和把玩可见下方的 aws 地址</p>
<p>redis - data &amp; session cache<br>mongo - self-hosetd nosql db</p>
<p>pm2(strongloop-pm) - process manager<br>varnish - http cache server<br>nginx - reversed proxy and load balance(need haproxy?)</p>
<p>metrics 平台 - statsD + graphite(carbon + whisper + grafana)</p>
<ul>
<li>StatsD：负责收集并聚合测量值</li>
<li>carbon：Twisted(Python)daemon，接受进入的数据</li>
<li>whisper：存储时间序列数据的数据库</li>
<li>grafana：提供丰富现代化的图表编辑和Dashboard（替换的graphite Django）</li>
</ul>
<p>alerts 平台 (seyren 基于graphite）<br>logs 平台 - ELK （elasticsearch，logstash，kibana）</p>
<ul>
<li>logstash: 负责日志的收集处理和存储</li>
<li>elasticsearch: 负责日志的检索和分析</li>
<li>kibana: 负责日志的可视化</li>
</ul>
<h2 id="u53C2_u8003"><a href="#u53C2_u8003" class="headerlink" title="参考"></a>参考</h2><h3 id="u6846_u67B6_u9009_u578B"><a href="#u6846_u67B6_u9009_u578B" class="headerlink" title="框架选型"></a>框架选型</h3><p>（为什么不选 restify/hapi/koa/der，选择express，基于express之上的选择（为什么不sail.js, keystone ）<br><a href="http://nodeframework.com/#rest-api" target="_blank" rel="external">http://nodeframework.com/#rest-api</a><br><a href="http://www.capitalone.io/blog/contrasting-enterprise-nodejs-frameworks/" target="_blank" rel="external">http://www.capitalone.io/blog/contrasting-enterprise-nodejs-frameworks/</a><br><a href="http://www.3rank.com/node-js-frameworks/" target="_blank" rel="external">http://www.3rank.com/node-js-frameworks/</a><br><a href="https://github.com/krakenjs/kraken-js" target="_blank" rel="external">https://github.com/krakenjs/kraken-js</a><br><a href="https://github.com/strongloop/loopback" target="_blank" rel="external">https://github.com/strongloop/loopback</a></p>
<h3 id="u5916_u56F4_u9009_u578B"><a href="#u5916_u56F4_u9009_u578B" class="headerlink" title="外围选型"></a>外围选型</h3><p><a href="http://blog.takipi.com/graphite-vs-grafana-build-the-best-monitoring-architecture-for-your-application/" target="_blank" rel="external">http://blog.takipi.com/graphite-vs-grafana-build-the-best-monitoring-architecture-for-your-application/</a><br><a href="https://github.com/scobal/seyren" target="_blank" rel="external">https://github.com/scobal/seyren</a><br><a href="https://keymetrics.io/" target="_blank" rel="external">https://keymetrics.io/</a><br><a href="http://rosskukulinski.github.io/talk-statsd/#/26" target="_blank" rel="external">http://rosskukulinski.github.io/talk-statsd/#/26</a><br><a href="http://techblog.holidaycheck.com/profiling-mongodb-with-logstash-and-kibana/" target="_blank" rel="external">http://techblog.holidaycheck.com/profiling-mongodb-with-logstash-and-kibana/</a><br><a href="http://elk-docker.readthedocs.org/#installation" target="_blank" rel="external">http://elk-docker.readthedocs.org/#installation</a></p>
<h3 id="u8FD0_u7EF4_u6027_u80FD"><a href="#u8FD0_u7EF4_u6027_u80FD" class="headerlink" title="运维性能"></a>运维性能</h3><p>node webapp 的 运维<br><a href="https://strongloop.com/strongblog/category/node-devops/" target="_blank" rel="external">https://strongloop.com/strongblog/category/node-devops/</a><br>node 性能优化<br><a href="https://strongloop.com/strongblog/category/performance-tip/" target="_blank" rel="external">https://strongloop.com/strongblog/category/performance-tip/</a></p>
<p><a href="https://blog.risingstack.com/node-js-security-checklist/" target="_blank" rel="external">https://blog.risingstack.com/node-js-security-checklist/</a><br><a href="https://blog.risingstack.com/node-js-production-checklist/" target="_blank" rel="external">https://blog.risingstack.com/node-js-production-checklist/</a><br><a href="http://blog.risingstack.com/operating-node-in-production/" target="_blank" rel="external">http://blog.risingstack.com/operating-node-in-production/</a><br><a href="https://blog.risingstack.com/nodejs-production-environment-for-startups/" target="_blank" rel="external">https://blog.risingstack.com/nodejs-production-environment-for-startups/</a></p>
<h3 id="web__u5F00_u53D1"><a href="#web__u5F00_u53D1" class="headerlink" title="web 开发"></a>web 开发</h3><p><a href="https://blog.risingstack.com/swagger-nodejs/" target="_blank" rel="external">https://blog.risingstack.com/swagger-nodejs/</a><br><a href="http://blog.risingstack.com/web-authentication-methods-explained/" target="_blank" rel="external">http://blog.risingstack.com/web-authentication-methods-explained/</a><br><a href="https://github.com/auth0/node-jsonwebtoken" target="_blank" rel="external">https://github.com/auth0/node-jsonwebtoken</a><br><a href="http://www.nearform.com/nodecrunch/release-the-kracken-how-paypal-is-being-revolutionized-by-node-js-and-lean-ux/" target="_blank" rel="external">http://www.nearform.com/nodecrunch/release-the-kracken-how-paypal-is-being-revolutionized-by-node-js-and-lean-ux/</a></p>
<h2 id="loopback_Overview"><a href="#loopback_Overview" class="headerlink" title="loopback Overview"></a>loopback Overview</h2><h3 id="u6846_u56FE"><a href="#u6846_u56FE" class="headerlink" title="框图"></a>框图</h3><p><img src="https://cloud.githubusercontent.com/assets/697853/11617734/b8c758e4-9ccd-11e5-9e35-4b7706070d67.png" alt="qq20151207-0"><br><img src="https://cloud.githubusercontent.com/assets/697853/11617735/b8c7a75e-9ccd-11e5-831e-a2840b0b332e.png" alt="qq20151207-1"></p>
<h2 id="u5176_u4ED6_u8BBE_u8BA1_u53C2_u8003"><a href="#u5176_u4ED6_u8BBE_u8BA1_u53C2_u8003" class="headerlink" title="其他设计参考"></a>其他设计参考</h2><h3 id="Nginx_-__u5B9E_u73B0_u4E00_u4E2AAPI_Gateway_u7684_u6280_u672F_u8003_u91CF"><a href="#Nginx_-__u5B9E_u73B0_u4E00_u4E2AAPI_Gateway_u7684_u6280_u672F_u8003_u91CF" class="headerlink" title="Nginx - 实现一个API Gateway的技术考量"></a>Nginx - 实现一个API Gateway的技术考量</h3><h4 id="u6027_u80FD_u548C_u53EF_u6269_u5C55_u6027_3A"><a href="#u6027_u80FD_u548C_u53EF_u6269_u5C55_u6027_3A" class="headerlink" title="性能和可扩展性:"></a>性能和可扩展性:</h4><p>一个可选的方案是NGINX Plus。NGINX Plus提供一个成熟的、可扩展的、高性能web服务器和反向代理，它们均容易部署、配置和二次开发。NGINX Plus可以管理授权、权限控制、负载均衡、缓存并提供应用健康检查和监控。</p>
<h4 id="u91C7_u7528_u53CD_u5E94_u6027_u7F16_u7A0B_u6A21_u578B_uFF1A"><a href="#u91C7_u7528_u53CD_u5E94_u6027_u7F16_u7A0B_u6A21_u578B_uFF1A" class="headerlink" title="采用反应性编程模型："></a>采用反应性编程模型：</h4><p>为了最小化响应时间，API Gateway应该并发的处理相互独立的请求。但是，有时候请求之间是有依赖的（如为了获得客户的产品愿望清单，需要先获取该用户的资料，然后返回清单上产品的信息）<br>利用传统回调方式限制 callback 地狱.<br>类似的反应抽象实现有Scala的Future，Java8的CompletableFuture和JavaScript的Promise。<br>基于微软.Net平台的有Reactive Extensions(Rx) 和RxJS。</p>
<h4 id="u670D_u52A1_u8C03_u7528_uFF1A"><a href="#u670D_u52A1_u8C03_u7528_uFF1A" class="headerlink" title="服务调用："></a>服务调用：</h4><p>JSM，AMQP<br>HTTP, Thrift<br>同步，异步机制（基于消息）实现方式是多种的。</p>
<h4 id="u670D_u52A1_u53D1_u73B0_uFF1A"><a href="#u670D_u52A1_u53D1_u73B0_uFF1A" class="headerlink" title="服务发现："></a>服务发现：</h4><p>如果采用客户端发现服务，API Gateway必须要去查询服务注册处，也就是微服务实例地址的数据库。</p>
<h4 id="u5904_u7406_u90E8_u5206_u5931_u8D25_uFF1A"><a href="#u5904_u7406_u90E8_u5206_u5931_u8D25_uFF1A" class="headerlink" title="处理部分失败："></a>处理部分失败：</h4><p>Hystrix 对于实现RPC，记录那些超过预设定的极限值的调用。采用 circuit breaker 模式， 使得客户端从无响应服务的无尽等待中停止，对于一个错误率超过预设值的，中断服务，在一段时间内所有请求立即失效（防止雪崩），提供fallback（如读取缓冲或返回默认值等） - 如果你在用JVM，就应该考虑使用Hystrix。如果你采用的非JVM环境，那么应该考虑采用类似功能的库</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="API__u7F51_u5173"><a href="#API__u7F51_u5173" class="headerlink" title="API 网关"></a>API 网关</h2><p>具体 API 网关功能介绍请见<a href="https://gi]]>
    </summary>
    
      <category term="JavaScript" scheme="http://sivagao.com/tags/JavaScript/"/>
    
      <category term="Node.js" scheme="http://sivagao.com/tags/Node-js/"/>
    
      <category term="技术" scheme="http://sivagao.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[【Node】Node 接入层 - 微服务架构]]></title>
    <link href="http://sivagao.com/2015-11/node-mircoservices/"/>
    <id>http://sivagao.com/2015-11/node-mircoservices/</id>
    <published>2015-11-29T23:56:29.000Z</published>
    <updated>2016-01-31T13:21:44.000Z</updated>
    <content type="html"><![CDATA[<p>前言，文章作者是Chris Richardson，微服务领域的大牛。经常在<a href="http://microservices.io" target="_blank" rel="external">microservices.io</a>上发表有关微服务的文章。</p>
<h2 id="u5FAE_u670D_u52A1_u7B80_u4ECB"><a href="#u5FAE_u670D_u52A1_u7B80_u4ECB" class="headerlink" title="微服务简介"></a>微服务简介</h2><h3 id="u5355_u4F53_u67B6_u6784"><a href="#u5355_u4F53_u67B6_u6784" class="headerlink" title="单体架构"></a>单体架构</h3><p>尽管也是模块化逻辑，但是最终它还是会打包并部署为单体式应用。<br>单体式应用也易于部署，只需要把打包应用拷贝到服务器端，通过在负载均衡器后端运行多个拷贝就可以轻松实现应用扩展。在早期这类应用运行的很好。</p>
<h3 id="u5355_u4F53_u67B6_u6784_u7684_u4E0D_u8DB3"><a href="#u5355_u4F53_u67B6_u6784_u7684_u4E0D_u8DB3" class="headerlink" title="单体架构的不足"></a>单体架构的不足</h3><p>一个简单的应用会随着时间推移逐渐变大。在每次的sprint中，开发团队都会面对新“故事”，然后开发许多新代码。几年后，这个小而简单的应用会变成了一个巨大的怪物。<br>从而敏捷开发和部署都举步维艰，应用变得太复杂，以至于单个开发者不可能搞懂他。维护下变得很差，修改bug和添加新功能变得很困难.应用越大，启动时间会越长。<br>应用越大，启动时间会越长。一个模块是CPU密集的， 一个模块是内存占有大的，模块部署在一起的单体，不能不在硬件选择上做一个妥协。<br>可靠性很低，所有模块运行在一个进程中，任何一个模块中的一个bug，比如内存泄露，将会有可能弄垮整个进程。<br>单体式应用使得采用新架构和语言非常困难。比如，设想你有两百万行采用XYZ框架写的代码。如果想改成ABC框架，无论是时间还是成本都是非常昂贵的</p>
<h3 id="u5FAE_u670D_u52A1_u67B6_u6784"><a href="#u5FAE_u670D_u52A1_u67B6_u6784" class="headerlink" title="微服务架构"></a>微服务架构</h3><p>很多公司如amazon，ebay，netflix 等通过微服务架构解决以上问题，将应用分解为小的，相互连接的微服务。</p>
<p>一个微服务一般完成某个特定的功能，比如下单管理、客户管理等等。一些微服务还会发布API给其它微服务和应用客户端使用。其它微服务完成一个Web UI，运行时，每一个实例可能是一个云VM或者是Docker容器。</p>
<p>每一个后台服务开放一个REST API，许多服务本身也采用了其它服务提供的API。应用客户端（iOS，Android，web）不直接访问后台服务，而是通过 API Gateway 来传递消息。 其负责负载均衡，缓存，访问控制， API 计费和监控等任务。</p>
<p>这种微服务架构模式深刻影响了应用和数据库之间的关系，不像传统多个服务共享一个数据库，微服务架构每个服务都有自己的数据库。</p>
<h2 id="u5FAE_u670D_u52A1_u6A21_u5F0F"><a href="#u5FAE_u670D_u52A1_u6A21_u5F0F" class="headerlink" title="微服务模式"></a>微服务模式</h2><p><img src="https://cloud.githubusercontent.com/assets/697853/11462376/5d3d46ac-974e-11e5-9cc5-cbc6349e2fc1.png" alt="image"></p>
<p>核心模式</p>
<ul>
<li>单体架构</li>
<li>微服务架构</li>
<li>API 网关</li>
</ul>
<p>部署模式</p>
<ul>
<li>multiple service instances per host</li>
<li>service instance per host</li>
<li>service instance per vm</li>
<li>service instance per container</li>
</ul>
<p>服务发现</p>
<ul>
<li>客户端发现</li>
<li>服务器端发现</li>
<li>服务注册</li>
<li>自行注册</li>
<li>第三方注册</li>
</ul>
<p>数据层</p>
<ul>
<li>database per service</li>
</ul>
<p>Tip：</p>
<ul>
<li>The Monolithic architecture is an alternative to the microservices architecture.</li>
<li>The API Gateway pattern defines how clients access the services in a microservices architecture.</li>
<li>The Client-side Discovery and Server-side Discovery patterns are used to route requests for a client to an available service instance in a microservices architecture.</li>
<li>The Messaging and Remote Procedure Invocation patterns are two different ways that services can communicate.</li>
<li>The Single Service per Host and Multiple Services per Host patterns are two different deployment strategies.</li>
<li>The Database per Service pattern describes how each service has its own database.</li>
</ul>
<p>PS:<br>其他的pattern，如 in the area of resiliency and stability. - circuit breaker pattern, stand-in services, or bulkheads.</p>
<h2 id="u670D_u52A1_u53D1_u73B0"><a href="#u670D_u52A1_u53D1_u73B0" class="headerlink" title="服务发现"></a>服务发现</h2><h3 id="service_side__u670D_u52A1_u53D1_u73B0"><a href="#service_side__u670D_u52A1_u53D1_u73B0" class="headerlink" title="service side 服务发现"></a>service side 服务发现</h3><p><img src="https://cloud.githubusercontent.com/assets/697853/11462378/6c14da82-974e-11e5-92fe-4fb94bd86b83.png" alt="image"></p>
<p>上下文：<br>服务通常需要调用其他服务.  在单体应用中， 服务的相互调用是通过程序语言层的方法或者是IPC。<br>在传统的分布式系统中， services run at fixed, well known locations(hosts and ports) and so can easily call one another using HTTP/REST or some RPC 机制。<br>在新的微服务架构中， application 通常泡在虚拟化或容器环境中（而服务的实例数量和位置可能会动态改变），所以需要一种机制来解决服务的调用方 to make requests to a dynamically changging set of ephemeral service instances(如根据负载情况，EC2 Autoscaling group adjust) 问题就是调用方（如 api gateway）如何discover the location of a service instance?</p>
<p>关注点：</p>
<p>解决方案：<br>When making a request to a service, the client makes a request via a router (a.k.a load balancer) that runs at a well known location. The router queries a service registry, which might be built into the router, and forwards the request to an available service instance.</p>
<p>举例:<br>ELB<br>Some clustering solutions such as Kubernetes and Marathon run a proxy on each host that functions as a server-side discovery router. In order to access a service, a client connects to the local proxy using the port assigned to that service. The proxy then forwards the request to a service instance running somewhere in the cluster</p>
<p>好坏对比:<br>好处：<br>对比 client-side discovery，client code is simpler since it does not have to deal with discovery. instead, a client simply makes a request to the router</p>
<p>坏处：<br>router是个单独的系统需要安装和配置，也需要 replicated for availability and capacity<br>More network hops are required than when using Client side discovery</p>
<h2 id="u6570_u636E_u5C42"><a href="#u6570_u636E_u5C42" class="headerlink" title="数据层"></a>数据层</h2><p>微服务下的数据库架构<br>keep each microservice’s persistent data private to that service and accessible only via its API.</p>
<ul>
<li>Private-tables-per-service – each service owns a set of tables that must only be accessed by that service</li>
<li>Schema-per-service – each service has a database schema that’s private to that service</li>
<li>Database-server-per-service – each service has it’s own database server.</li>
</ul>
<p>to create barriers that enforce this modularity.</p>
<p>好坏对比:<br>好处：<br>服务是低耦合的。 changes to one service’s databases does not impact any other services<br>每个服务使用他们合适类型的数据库. text search - elasticsearch, 操作社会化图的用Neo4j</p>
<p>坏处：<br>implement business transaction that span multiple services is not straightforward(分布式的事务要避免因为CAP. nosql通常不支持事务. 使用最终一致性的, event-driven architecture - )<br>queries that join data that is now in multiple database 很麻烦：</p>
<ul>
<li>application-side joins.</li>
<li>CQRS command query responsibility segregation.<br>管理多个SQL和NoSQL数据库的复杂度</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>前言，文章作者是Chris Richardson，微服务领域的大牛。经常在<a href="http://microservices.io" target="_blank" rel="external">microservices.io</a>上发表有关微服务的文章。</p]]>
    </summary>
    
      <category term="JavaScript" scheme="http://sivagao.com/tags/JavaScript/"/>
    
      <category term="Node.js" scheme="http://sivagao.com/tags/Node-js/"/>
    
      <category term="技术" scheme="http://sivagao.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[【ionic】Ionic/cordova App 更新机制总结]]></title>
    <link href="http://sivagao.com/2015-11/ionic-update/"/>
    <id>http://sivagao.com/2015-11/ionic-update/</id>
    <published>2015-11-18T23:56:29.000Z</published>
    <updated>2016-01-31T13:21:52.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>ionic deploy 和 Microsoft 的 code push，都是不支持增量更新的前端资源包下载更新。支持配置是否强制更新和推荐更新，支持changelog配置，支持不同channel推送更新。</p>
<p>cordova-app-loader 和 gf’arms（设计状态）是支持前端资源包的增量更新。前者灵活精细稳健的接口和实现，为后续的扩展（如changelog 提示，更新的UI交互）都提供了强有力的支持。</p>
<p>广发现有的做法，是通过容器内容后台（cordova’s android, ios 和 atom-shell）来推送打包好的容器包（apk, ipa with plist) 可以实现native代码的更新（如cordova 插件更新）这些是二进制包的更新，当然也可以推送内容包更新（如ionic deploy 和 M$的code push的做法）</p>
<h2 id="u65B9_u6848_u4E00_u89C8"><a href="#u65B9_u6848_u4E00_u89C8" class="headerlink" title="方案一览"></a>方案一览</h2><h3 id="Ionic_deploy"><a href="#Ionic_deploy" class="headerlink" title="Ionic deploy"></a>Ionic deploy</h3><p><a href="http://docs.ionic.io/docs/deploy-from-scratch" target="_blank" rel="external">http://docs.ionic.io/docs/deploy-from-scratch</a><br>默认的实现是用ionic.io自己的服务器，当然也可以换成自己的服务器来拉取新资源包</p>
<h3 id="u5FAE_u8F6F_u7684code_push"><a href="#u5FAE_u8F6F_u7684code_push" class="headerlink" title="微软的code push"></a>微软的code push</h3><p><a href="http://microsoft.github.io/code-push/index.html#getting_started" target="_blank" rel="external">http://microsoft.github.io/code-push/index.html#getting_started</a><br>比起ionic 提供的deploy服务好不少。最重要是资源包是放在azure国内无压力（可更换，其次支持强制和推荐更新（可配给用户的提示更新文案changelog，支持不同的channel（dev,staging,production等。</p>
<h3 id="cordova-app-loader"><a href="#cordova-app-loader" class="headerlink" title="cordova-app-loader"></a>cordova-app-loader</h3><p><a href="https://github.com/markmarijnissen/cordova-app-loader" target="_blank" rel="external">https://github.com/markmarijnissen/cordova-app-loader</a></p>
<h3 id="u5E7F_u53D1_arms__u589E_u91CF_u66F4_u65B0"><a href="#u5E7F_u53D1_arms__u589E_u91CF_u66F4_u65B0" class="headerlink" title="广发 arms 增量更新"></a>广发 arms 增量更新</h3><p>杰哥的链接</p>
<h3 id="u5E7F_u53D1_u73B0_u5728_u505A_u6CD5"><a href="#u5E7F_u53D1_u73B0_u5728_u505A_u6CD5" class="headerlink" title="广发现在做法"></a>广发现在做法</h3><p>container容器更新和内容更新<br><a href="http://10.1.126.53:8815/update/" target="_blank" rel="external">http://10.1.126.53:8815/update/</a></p>
<h2 id="cordova-app-loader__u8BE6_u89E3"><a href="#cordova-app-loader__u8BE6_u89E3" class="headerlink" title="cordova-app-loader 详解"></a>cordova-app-loader 详解</h2><p>远程更新你的 Cordova/Ionic App</p>
<h3 id="u4F7F_u7528_u6D41_u7A0B"><a href="#u4F7F_u7528_u6D41_u7A0B" class="headerlink" title="使用流程"></a>使用流程</h3><ul>
<li>使用 manifest.json 来 启动 App</li>
<li>构建和部署 App</li>
</ul>
<h4 id="u4EE3_u7801_u66F4_u6539_u540E_uFF1A"><a href="#u4EE3_u7801_u66F4_u6539_u540E_uFF1A" class="headerlink" title="代码更改后："></a>代码更改后：</h4><p>1 提交更新到服务器（manifest.json + 修改的文件）<br>2 使用 CordovaAppLoader 去完成：</p>
<ul>
<li>check() 查询是否有新的manifest</li>
<li>下载文件</li>
<li>更新App</li>
</ul>
<h3 id="Cordova_App_Loader__u7684_u4E00_u4E9B_u4F18_u70B9_uFF1A"><a href="#Cordova_App_Loader__u7684_u4E00_u4E9B_u4F18_u70B9_uFF1A" class="headerlink" title="Cordova App Loader 的一些优点："></a>Cordova App Loader 的一些优点：</h3><ul>
<li>通过 bootstrap.js 动态加载 js/css 文件</li>
<li>快速，可依赖，高性能的下载（并发控制，失败重试，精细的onprogress等）</li>
<li>未改变的文件仅仅copy不下载</li>
<li>responsive App：所有的check, download 的接口都是resolve promise （不会因为异常而进入死循环和等待）</li>
<li>断线处理和rollback机制</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>ionic deploy 和 Microsoft 的 code push，都是不支持增量更新]]>
    </summary>
    
      <category term="JavaScript" scheme="http://sivagao.com/tags/JavaScript/"/>
    
      <category term="ionic" scheme="http://sivagao.com/tags/ionic/"/>
    
      <category term="混合应用" scheme="http://sivagao.com/tags/%E6%B7%B7%E5%90%88%E5%BA%94%E7%94%A8/"/>
    
      <category term="技术-前端开发" scheme="http://sivagao.com/categories/%E6%8A%80%E6%9C%AF-%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[【ionic】Navigation 和 ionHistory 详解]]></title>
    <link href="http://sivagao.com/2015-10/ionic-navigation-history/"/>
    <id>http://sivagao.com/2015-10/ionic-navigation-history/</id>
    <published>2015-10-30T10:56:29.000Z</published>
    <updated>2016-01-31T13:21:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="Ionic__u7CFB_u5217_-_Navigation__u548C_ionHistory__u8BE6_u89E3"><a href="#Ionic__u7CFB_u5217_-_Navigation__u548C_ionHistory__u8BE6_u89E3" class="headerlink" title="Ionic 系列 - Navigation 和 ionHistory 详解"></a>Ionic 系列 - Navigation 和 ionHistory 详解</h1><p>navigation，本身是个简单的概念。用户使用不同功能，在不同页面跳转，同时提供回退，前进功能来方便用户。但是遇到如下场景和需求就会让问题变得开始棘手起来。</p>
<ul>
<li>去做任务B，必须先完成A（甚至它还有前置任务），然后跳转回来。</li>
<li>在完成任务后，返回不能回到之前的步骤过程页，而是回到任务入口页。</li>
<li>一些关键步骤不能跳过</li>
<li>Android系统有自己系统级的返回键需要特殊处理</li>
<li>iOS 有自己的 swipe back 的使用习惯</li>
<li>页面的任务入口需要检查不同的权限（是否登录，用户是否实名验证，用户是否风险测评）</li>
<li>一些特定的 UI 影响 navigation（如 tabs, side-menus，引入 history stack 概念</li>
</ul>
<p>下面我们依次来解决这些问题，理解 Ionic 中 navigation 和 $ionHistory 用法和hack</p>
<h2 id="u57FA_u672C_u7528_u6CD5"><a href="#u57FA_u672C_u7528_u6CD5" class="headerlink" title="基本用法"></a>基本用法</h2><p>navigation 主要涉及 ionNavView（替换掉原来 ui-router 的 ui-view），还有 ionNavBar, nav-transition, nav-buttons 等。<br><a href="http://ionicframework.com/docs/api/directive/ionNavView/" target="_blank" rel="external">http://ionicframework.com/docs/api/directive/ionNavView/</a></p>
<h2 id="u5B9E_u9645_u5F00_u53D1_u9047_u5230_u7684_u95EE_u9898"><a href="#u5B9E_u9645_u5F00_u53D1_u9047_u5230_u7684_u95EE_u9898" class="headerlink" title="实际开发遇到的问题"></a>实际开发遇到的问题</h2><p>以下的问题单独解决起来都不能，但是如何在不侵入原来代码和流程的情况下，在外围（global ctrl &amp;&amp; ionic 层）提供一些快捷方法来处理这些case，而不是在业务代码中处理。</p>
<h3 id="u524D_u7F6E_u4EFB_u52A1_u5B8C_u540E_u8DF3_u56DE"><a href="#u524D_u7F6E_u4EFB_u52A1_u5B8C_u540E_u8DF3_u56DE" class="headerlink" title="前置任务完后跳回"></a>前置任务完后跳回</h3><p>在 <code>ui-router</code> 下，我们常常使用  $state.go 来跳转页面进入不同的状态。但是当在前置任务需要完成的情况下，我们通过增强 $state 来提供 goAndBack 和 backOrGo 的功能。<br>前者是说跳到前置任务页，并且标示自己需要返回。<br>后者在结果页中申明说如果这个task B是其他task A的前置任务那么需要回退到task A，否则就到自己的默认下一页</p>
<p>使用： 在需要授权操作的 <code>asset-index</code> 有 <code>auth-sref</code>（其中调用了<br><code>goAndBack(&#39;login-index&#39;)</code>），在登录成功后会检查 <code>hasBack()</code>，调用 ·。这样登录成功自动进入 <code>assets-index</code> 而不是默认登录成功后的 <code>home-index</code> 页</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">$state.backOrGo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>($state.hasBack()) <span class="keyword">return</span> $state.back();</span><br><span class="line">  resetStateBack();</span><br><span class="line">  $state.go.apply($state, <span class="built_in">arguments</span>);</span><br><span class="line">&#125;;</span><br><span class="line">$state.goAndBack = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  stateBack = $state.current.name;</span><br><span class="line">  stateBackParam = $state.params;</span><br><span class="line">  $state.go.apply(<span class="literal">null</span>, <span class="built_in">arguments</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> stateBack = <span class="literal">null</span>, stateBackParam;</span><br><span class="line">$state.hasBack = ()=&gt;&#123;</span><br><span class="line">  <span class="keyword">if</span>(stateBack) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resetStateBack</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  stateBack = <span class="literal">null</span></span><br><span class="line">  stateBackParam = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">$state.back = ()=&gt;&#123;</span><br><span class="line">  <span class="keyword">var</span> ionHist = $ionicHistory.viewHistory();</span><br><span class="line">  <span class="keyword">var</span> hId = ionHist.currentView.historyId;</span><br><span class="line">  <span class="keyword">var</span> stack = ionHist.histories[hId].stack, len = stack.length, count;</span><br><span class="line">  <span class="keyword">var</span> hasGone = _.any(stack, (i, idx)=&gt;&#123;</span><br><span class="line">    i = stack[len-<span class="number">1</span>-idx];</span><br><span class="line">    <span class="keyword">if</span>(i.stateName === stateBack) &#123;</span><br><span class="line">      count = -(idx);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  resetStateBack();</span><br><span class="line">  <span class="keyword">if</span>(!hasGone) count = -<span class="number">1</span>;</span><br><span class="line">  $ionicHistory.goBack(count);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="u7ED3_u679C_u9875_u56DE_u9000_u5230_u5165_u53E3_u800C_u4E0D_u662F_u4E0A_u4E00_u6B65_u9AA4_u9875"><a href="#u7ED3_u679C_u9875_u56DE_u9000_u5230_u5165_u53E3_u800C_u4E0D_u662F_u4E0A_u4E00_u6B65_u9AA4_u9875" class="headerlink" title="结果页回退到入口而不是上一步骤页"></a>结果页回退到入口而不是上一步骤页</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isInjectBackRoute = <span class="literal">false</span>, injectBackRoute;</span><br><span class="line">scope.__injectBackRoute = (r)=&gt;&#123;</span><br><span class="line">  isInjectBackRoute = <span class="literal">true</span>;</span><br><span class="line">  injectBackRoute = r;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">scope.$ionicGoBack = <span class="function"><span class="keyword">function</span>(<span class="params">backCount</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(isInjectBackRoute) &#123;</span><br><span class="line">    scope.__route(injectBackRoute);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    $ionicHistory.goBack(backCount);</span><br><span class="line">  &#125;</span><br><span class="line">  isInjectBackRoute = <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="u5173_u952E_u6B65_u9AA4_28_u9875_29_u4E0D_u80FD_u8FD4_u56DE_u8DF3_u8FC7"><a href="#u5173_u952E_u6B65_u9AA4_28_u9875_29_u4E0D_u80FD_u8FD4_u56DE_u8DF3_u8FC7" class="headerlink" title="关键步骤(页)不能返回跳过"></a>关键步骤(页)不能返回跳过</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">ion-nav-bar</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">ion-nav-back-button</span> <span class="attribute">class</span>=<span class="value">"button-link"</span></span><br><span class="line">    <span class="attribute">ng-hide</span>=<span class="value">"__isDisableBack"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">i</span> <span class="attribute">class</span>=<span class="value">"ion-ios-arrow-left"</span>&gt;</span><span class="tag">&lt;/<span class="title">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">ion-nav-back-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">ion-nav-bar</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">scope.__isDisableBack = <span class="literal">false</span>;</span><br><span class="line">scope.__disableBack = ()=&gt;&#123;</span><br><span class="line">  scope.__isDisableBack = <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">scope.__restoreRoute = (r)=&gt;&#123;</span><br><span class="line">  isInjectBackRoute = <span class="literal">false</span>;</span><br><span class="line">  scope.__isDisableBack = <span class="literal">false</span>;</span><br><span class="line">  <span class="comment">/*$ionicPlatform.offHardwareBackButton(disBackSystemBtn); */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在 $stateChangeSuccess 等页面跳转中清除对router的修改，__restoreRoute</span></span><br></pre></td></tr></table></figure>
<h3 id="Android__u7CFB_u7EDF_u7EA7_u7684_u8FD4_u56DE_u952E_u5904_u7406"><a href="#Android__u7CFB_u7EDF_u7EA7_u7684_u8FD4_u56DE_u952E_u5904_u7406" class="headerlink" title="Android 系统级的返回键处理"></a>Android 系统级的返回键处理</h3><p>把 Android 的回退按钮的 fallback 到被injected 的$ionicGoBack 和 __isDisableBack. 前者来提供定制的回退（如结果页到入口页），后者来屏蔽返回（如在强制步骤页不许跳出回退）</p>
<p>ionic 在 platform service 中提供来hook来拦截 backbutton action。registerBackButtonAction(handler, proirty)</p>
<p>Ionic 自带的优先级如下：</p>
<ul>
<li>Return to previous view = 100</li>
<li>Close side menu = 150</li>
<li>Dismiss modal = 200</li>
<li>Close action sheet = 300</li>
<li>Dismiss popup = 400</li>
<li>Dismiss loading overlay = 500</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ionicPlatform.registerBackButtonAction((e)=&gt;&#123;</span><br><span class="line">  <span class="keyword">if</span>(!scope.__isDisableBack) &#123;</span><br><span class="line">    scope.$ionicGoBack(); <span class="comment">// isInjectBackRoute dont care</span></span><br><span class="line">  &#125;</span><br><span class="line">  e.preventDefault();</span><br><span class="line">  e.stopPropagation();</span><br><span class="line">&#125;, <span class="number">101</span>);</span><br></pre></td></tr></table></figure>
<h3 id="u4EFB_u52A1_u5165_u53E3_u9700_u8981_u68C0_u67E5_u4E0D_u540C_u7684_u6743_u9650"><a href="#u4EFB_u52A1_u5165_u53E3_u9700_u8981_u68C0_u67E5_u4E0D_u540C_u7684_u6743_u9650" class="headerlink" title="任务入口需要检查不同的权限"></a>任务入口需要检查不同的权限</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># 是否登录，用户是否实名验证，用户是否风险测评</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">  auth-sref directive</span><br><span class="line">  &lt;a auth-sref="assets-hold"&gt;我的持仓&lt;/a&gt;</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">export default ($state) =&gt; &#123;</span><br><span class="line">  return function(scope, elem, attrs) &#123;</span><br><span class="line">    elem.on('click', (e)=&gt;&#123;</span><br><span class="line">      if(scope.__needLogin()) return;</span><br><span class="line">      $state.go(attrs.authSref);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Global Methods:</span><br><span class="line">scope.__needLogin = ()=&gt;&#123;</span><br><span class="line">  var account = $storage.userData;</span><br><span class="line">  if(!account) &#123;</span><br><span class="line">    // $notice.xinfo('请先登录');</span><br><span class="line">    $state.goAndBack('login-index');</span><br><span class="line">    return true;</span><br><span class="line">  &#125;</span><br><span class="line">  return false;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Ionic__u7CFB_u5217_-_Navigation__u548C_ionHistory__u8BE6_u89E3"><a href="#Ionic__u7CFB_u5217_-_Navigation__u548C_ionHistory__u8BE6_u]]>
    </summary>
    
      <category term="JavaScript" scheme="http://sivagao.com/tags/JavaScript/"/>
    
      <category term="ionic" scheme="http://sivagao.com/tags/ionic/"/>
    
      <category term="混合应用" scheme="http://sivagao.com/tags/%E6%B7%B7%E5%90%88%E5%BA%94%E7%94%A8/"/>
    
      <category term="技术-前端开发" scheme="http://sivagao.com/categories/%E6%8A%80%E6%9C%AF-%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[【ionic】玩转 view cache]]></title>
    <link href="http://sivagao.com/2015-10/ionic-view-cache/"/>
    <id>http://sivagao.com/2015-10/ionic-view-cache/</id>
    <published>2015-10-29T23:56:29.000Z</published>
    <updated>2016-01-31T13:21:51.000Z</updated>
    <content type="html"><![CDATA[<h1 id="Ionic__u7CFB_u5217_-__u73A9_u8F6C_view_cache"><a href="#Ionic__u7CFB_u5217_-__u73A9_u8F6C_view_cache" class="headerlink" title="Ionic 系列 - 玩转 view cache"></a>Ionic 系列 - 玩转 view cache</h1><p>在默认情况下， views 是被缓存以便于提升性能。当view 切换时，该 view html element 依然是被保留在 DOM 树中的，而view 的 scope 被从 Angular $watch cycle 中抽离。所以当回到原先被cache的view中，scope 重新被加入到 $watch cycle 中 （因此之前的滚动位置都能保留，也不用等待页面元素重新被render）</p>
<h2 id="u57FA_u672C_u7528_u6CD5"><a href="#u57FA_u672C_u7528_u6CD5" class="headerlink" title="基本用法"></a>基本用法</h2><p>viewcache 默认是保留 10 views（太多会吃爆你的内存），当然可以设置更多或关掉。 同时你也可以单独设置 view 的cache 开启情况</p>
<ul>
<li>通过 router 定义</li>
<li>通过 ionView directive 的 cache-view 属性</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ionicConfigProvider.views.maxCache(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">$stateProvider.state(<span class="string">'notCacheState'</span>, &#123;</span><br><span class="line">    cache: <span class="literal">false</span>,</span><br><span class="line">    url: <span class="string">'/not-cache-me'</span>,</span><br><span class="line">    templateUrl: <span class="string">'tpl.html'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="title">ion-view</span> <span class="attribute">cache-view</span>=<span class="value">"false"</span> <span class="attribute">view-title</span>=<span class="value">"My Title!"</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h2 id="u6CE8_u610F_u70B9"><a href="#u6CE8_u610F_u70B9" class="headerlink" title="注意点"></a>注意点</h2><p>被 cache 的 view， 在随后被回到的查看，不会在重新执行controller，如果你需要页面在进入和离开时做一些处理，可以使用 ionView 的相关事件 <code>$ionicView.enter</code> 和 <code>$ionicView.leave</code> (对应之前的 $scope.$on(‘$destroy’))</p>
<h2 id="u5B9E_u9645_u5F00_u53D1_u9047_u5230_u7684_u95EE_u9898"><a href="#u5B9E_u9645_u5F00_u53D1_u9047_u5230_u7684_u95EE_u9898" class="headerlink" title="实际开发遇到的问题"></a>实际开发遇到的问题</h2><h3 id="u5C55_u793A_u9875_u6570_u636E_u7F13_u51B2_u6CA1_u66F4_u65B0"><a href="#u5C55_u793A_u9875_u6570_u636E_u7F13_u51B2_u6CA1_u66F4_u65B0" class="headerlink" title="展示页数据缓冲没更新"></a>展示页数据缓冲没更新</h3><p>对于展示页，cached view 让你的浏览体验爽到爆，不用等之前的state 和 page 被重新数据拉取和页面渲染，但是你很容易遇到数据更新不及时的问题。 可以通过如下方案解决：</p>
<p>1 加入 pull-refresh 下拉刷新机制（注意在数据拉取和绑定到scope完毕后，调用 <code>$scope.$broadcast(&#39;scroll.refreshComplete&#39;)</code> 告诉 <code>ionRefresher</code> 可以收起下拉滚动<br>2 在页面再次被进入时（$ionView.enter &amp;&amp; state.fromCache），静默去更新数据（通过是用 $api 和 $indicator 来设置 loading）</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">ion-refresher</span></span><br><span class="line">  <span class="attribute">pulling-text</span>=<span class="value">"下拉更新..."</span></span><br><span class="line">  <span class="attribute">on-refresh</span>=<span class="value">"pullFetch()"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">ion-refresher</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">demoCtrl</span> <span class="title">extend</span> <span class="title">cacheView</span> </span>&#123;</span><br><span class="line">    constructor($scope, $api, $interval) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> fetch = (indicator)=&gt;&#123;</span><br><span class="line">        $api(<span class="string">'getPageHome'</span>, <span class="literal">null</span>, &#123;</span><br><span class="line">          indicator: indicator ? <span class="string">'global'</span> : <span class="literal">null</span></span><br><span class="line">        &#125;).then((r)=&gt;&#123;</span><br><span class="line">          $scope.$broadcast(<span class="string">'scroll.refreshComplete'</span>);</span><br><span class="line">          self.viewData = r.data;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;, homeApiTimer, self = <span class="keyword">this</span>;</span><br><span class="line">      $scope.pullFetch = fetch; <span class="comment">// bind to pull-refresh</span></span><br><span class="line">      $scope.$on(<span class="string">'$ionicView.enter'</span>, (scope, states)=&gt;&#123;</span><br><span class="line">        fetch(!states.fromCache); <span class="comment">// 从 cache 进入静默更新</span></span><br><span class="line">        homeApiTimer = $interval(fetch, <span class="number">10000</span>); <span class="comment">// every 2 mins update</span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 定时更新数据，页面离开移除 $interval</span></span><br><span class="line">      $scope.$on(<span class="string">'$ionicView.leave'</span>, (scope, states)=&gt;&#123;</span><br><span class="line">        $interval.cancel(homeApiTimer);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="u8FC7_u7A0B_u9875_u4E2D_u8868_u5355_u6570_u636E_u95EE_u9898"><a href="#u8FC7_u7A0B_u9875_u4E2D_u8868_u5355_u6570_u636E_u95EE_u9898" class="headerlink" title="过程页中表单数据问题"></a>过程页中表单数据问题</h3><p>对于一个task来说（如购买流程，充值流程等），会存在多个过程页面，并且有需要可以回到上一步修改（如在确认页回到订单页去修改购买金额），所以页面缓存是需要的，但是在流程结束后，需要及时清理这个流程中的中间页，但在流程进行中要保存 cache 便于返回操作。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">rmCacheView('xxxx')</span><br><span class="line"># 参考：$ionicNavViewDelegate 内部代码</span><br><span class="line"></span><br><span class="line">scope.__rmViewCache = (type)=&gt;&#123;</span><br><span class="line">  var map = &#123;</span><br><span class="line">    purchase: [ // 购买 task 的流程页</span><br><span class="line">      'purchase-risk-match', 'purchase-order-verify',</span><br><span class="line">      'purchase-order', 'purchase-otc-order'</span><br><span class="line">    ],</span><br><span class="line">    trans: [ // 转让 task 的中间页</span><br><span class="line">      'trans-buyback', 'trans-other-offer', 'trans-transfer', 'trans-transform'</span><br><span class="line">    ],</span><br><span class="line">    withdraw: ['moneyio-withdraw'] // 取现 task 的中间页</span><br><span class="line">  &#125;;</span><br><span class="line">  return $timeout(function() &#123;</span><br><span class="line">    $ionicNavViewDelegate._instances.forEach(function(instance) &#123;</span><br><span class="line">      instance.clearCache(map[type]);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">scope.__goTrans = (type, product)=&gt;&#123;</span><br><span class="line">  scope.__rmViewCache('trans').then(()=&gt;&#123;</span><br><span class="line">    $temp.set('trans-'+type, &#123;</span><br><span class="line">      product: product</span><br><span class="line">    &#125;);</span><br><span class="line">    $state.go('trans-'+type);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="u5207_u6362/_u9000_u51FA_u7528_u6237"><a href="#u5207_u6362/_u9000_u51FA_u7528_u6237" class="headerlink" title="切换/退出用户"></a>切换/退出用户</h3><p>还有常见，如用户登出或者切换用户，需要把之前用户相关的留有用户状态的页面缓存移除。可以使用如下方法 <code>$ionicHistory.clearCache()</code>。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// input[type=submit ng-click=login($event)]</span></span><br><span class="line">$scope.login = (e)=&gt;&#123;</span><br><span class="line">  $api(<span class="string">'login'</span>, &#123;</span><br><span class="line">    username: vm.username,</span><br><span class="line">    password: md5(vm.password),</span><br><span class="line">    captach: vm.captach</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    indicator: e.target <span class="comment">// 使用 $indicator 给按钮disable和加状态</span></span><br><span class="line">  &#125;).then((r)=&gt;&#123;</span><br><span class="line">    $scope.$emit(<span class="string">'login:success'</span>);</span><br><span class="line">    $ionicHistory.clearCache().then(()=&gt;&#123;</span><br><span class="line">      <span class="keyword">if</span>($state.hasBack()) &#123;</span><br><span class="line">        $state.backOrGo(<span class="string">'recommend-index'</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $state.go(<span class="string">'recommend-index'</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Ionic__u7CFB_u5217_-__u73A9_u8F6C_view_cache"><a href="#Ionic__u7CFB_u5217_-__u73A9_u8F6C_view_cache" class="headerlink" title="Ioni]]>
    </summary>
    
      <category term="JavaScript" scheme="http://sivagao.com/tags/JavaScript/"/>
    
      <category term="ionic" scheme="http://sivagao.com/tags/ionic/"/>
    
      <category term="混合应用" scheme="http://sivagao.com/tags/%E6%B7%B7%E5%90%88%E5%BA%94%E7%94%A8/"/>
    
      <category term="技术-前端开发" scheme="http://sivagao.com/categories/%E6%8A%80%E6%9C%AF-%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[【读书笔记】$100 startup]]></title>
    <link href="http://sivagao.com/2015-09/book-note-$100-startups/"/>
    <id>http://sivagao.com/2015-09/book-note-$100-startups/</id>
    <published>2015-09-22T10:56:29.000Z</published>
    <updated>2016-01-31T13:22:06.000Z</updated>
    <content type="html"><![CDATA[<p>the $100 startup<br>reinvent the way you make a living, do what you love, and create a new future<br>重新定义你的生活工作，做你喜欢的，创造未来~<br>Ps： <a href="http://book.douban.com/subject/7015950/" target="_blank" rel="external">豆瓣链接</a><br><a id="more"></a> </p>
<h2 id="contents"><a href="#contents" class="headerlink" title="contents"></a>contents</h2><p>prologue - manifesto a short guide to everything you want 你所需知道的一切在宣言中</p>
<p>part 1: unexpected entrepreneurs 『另类』企业家</p>
<ul>
<li>1 renaissance 复兴<br>you already have the skills you need，you just have to know where to look 必须知道哪里去看信息？！</li>
<li>2 give them the fish<br>how to put happiness in a box and shell it </li>
<li>3 follow your passion.. maybe<br>get paid to do what you love by making sure it connects to what other people want 创造用户需要的产品和服务</li>
<li>4 the rise of roaming entrepreneur<br>location, location, location is overrated 地点没那么重要</li>
<li>5 the new demographics<br>your customers all have something in common, but it has nothing to do with old-school categories 你的客户群不是老派的分类</li>
</ul>
<p>part 2: taking it to the streets 开展项目</p>
<ul>
<li>6 the one-page business plan 一页纸BP</li>
<li>7 an offer you can’t refuse 无法拒绝的offer<br>the step-by-step guide to creating a killer offer</li>
<li>8 launch! 发布上线<br>a trip to Hollywood from your living room or the corner coffee shop</li>
<li>9 hustling: the gentle art of self-promotion 自营销和宣传<br>advertising is like sex: only losers pay for it</li>
<li>10 show me the money 筹钱和资金<br>unconventional fundraising非传统筹钱 from kickstarter to unlikely car loans</li>
</ul>
<p>part 3: leverage and next steps 再进一步！</p>
<ul>
<li>11 moving on up<br>tweaking your way to the bank: how small actions create big increase in income</li>
<li>12 how to franchise yourself 如何特许经营（开展加盟店）<br>instructions on cloning yourself for fun and profit</li>
<li>13 going long 长久保持<br>become as big as you want to be (and no bigger)</li>
<li>14 but what if i fail? 假如失败<br>how to success even if your roof caves in on you</li>
</ul>
<h3 id="manifesto_a_short_guide_to_everything_you_want"><a href="#manifesto_a_short_guide_to_everything_you_want" class="headerlink" title="manifesto a short guide to everything you want"></a>manifesto a short guide to everything you want</h3><p>becoming their own bosses, a microbusiness revolution - a way of earning a good living while crafting a life of independence and purpose<br>two key themes: freedom and value. freedom is what we’re all looking for, and value is the way to achieve it.</p>
<p>stumbling onto freedom:<br>the value doctrine<br>it’s a blueprint, not a vague series of ideas</p>
<h2 id="Part_1_unexpected_entrepreneurs"><a href="#Part_1_unexpected_entrepreneurs" class="headerlink" title="Part 1 unexpected entrepreneurs"></a>Part 1 unexpected entrepreneurs</h2><h3 id="u7B2C_u4E00_u7AE0_you_just_have_to_know_where_to_look"><a href="#u7B2C_u4E00_u7AE0_you_just_have_to_know_where_to_look" class="headerlink" title="第一章 you just have to know where to look"></a>第一章 you just have to know where to look</h3><p>“the need for change bulldozed a road down the center of my mind”<br>the $100 startup model</p>
<p>lesson 1: convergence<br>intersection between something you especially like to do or ar good at doing and what other people are also interested in.</p>
<p>lesson 2: skill transformation<br>“i succeeded as a cartoonist with negligible art talent, some basic writing skills, an ordinary sense of humor and a bit of experience in the business world. the world has plenty of better artists, smarter writers, funnier humorists and more experienced business people.”</p>
<p>lesson 3: the magic formula<br>passion or skill + usefulness = success</p>
<p>the road ahead: what we’ll learn<br>product or service: what you sell<br>people willing to pay for it: your customers<br>a way to get paid: how you’ll exchange a product or service for money</p>
<p>microbusiness aren’t new. they’ve been around since the beginning of commerce. what’s changed, however, is the ability to test, launch, and scale your project quickly and on the cheap<br>if you’re good at one thing, you’re probably good at other things too. many projects begin through a process of skill transformation in which you apply your knowledge to related topic<br>most important: merge your passion and skill with something that is useful to other people</p>
<h3 id="u7B2C_u4E8C_u7AE0_how_to_put_happiness_in_a_box_and_sell_it"><a href="#u7B2C_u4E8C_u7AE0_how_to_put_happiness_in_a_box_and_sell_it" class="headerlink" title="第二章 how to put happiness in a box and sell it"></a>第二章 how to put happiness in a box and sell it</h3><p>“catch a man a fish, and you can sell it to him”<br>teach a man to fish, and you ruin a wonderful business opportunity</p>
<p>whether your big idea will resonate with customers. to find out what people and then find a way to give it to them</p>
<p>to consider it is to think about fish<br>(most customers don’t want to learn how to fish, how to cook)<br>你去吃西湖醋鱼，不是因为你不会做，你是想去relex, paying a big premium for atmosphere and service.<br>what they sell and whey their customers buy from them?<br>we’re offering freedom - let them be someone they may have never even considered before.</p>
<p>where do ides come from:</p>
<ul>
<li>an inefficiency in the marketplace</li>
<li>new technology or opportunity</li>
<li>a changing space</li>
<li>a spin-off or side project</li>
</ul>
<p>what is the value：</p>
<ul>
<li>a trade-off(less money at first, better health).</li>
<li>freedom was Kelly’s primary motivation in making the switch, but the key to her success is the value she provides her clients</li>
<li>you can pursue freedom for yourself while providing value for others</li>
</ul>
<p><img src="/../images/14527354396909.jpg" alt=""></p>
<p>the more a business can focus on core benefits instead of boring features, the more customers will connect… and purchase</p>
<p>s1: dig deeper to uncover hidden needs<br>s2: make your customer a hero (印度Excel老师)<br>s3: sell what people buy(作者自己的travel ninja 案例)<br><img src="/../images/14527354642497.jpg" alt=""></p>
<p>six steps to getting started right now：</p>
<ul>
<li>1 decide on your product or service</li>
<li>2 set up a website, even a very one</li>
<li>3 develop an offer(an offer is distinct from a product or service)</li>
<li>4 ensure you have a way to get paid</li>
<li>5 announce your offer to the world</li>
<li>6 learn from step2 through 5, then repeat</li>
</ul>
<p>what people really want:<br>if you make your business about helping others, you’ll always have plenty of work</p>
<p>key points：</p>
<ul>
<li>give people what they really want, not just what think they should have. give them the fish! not how to fish, and cook</li>
<li>the more you can market a core benefit instead of a list of features, the easier it will be to profit from your idea. core benefits usually relate to emotional needs more than physical needs.</li>
<li>most people want more of some things(money, love, attention) and less of other things(stress, anxiety, debt). always focus on what you can add or take away to improve someone’s life.. then prepare to get paid</li>
</ul>
<h3 id="u7B2C_u4E09_u7AE0_follow_your_passion-_maybe"><a href="#u7B2C_u4E09_u7AE0_follow_your_passion-_maybe" class="headerlink" title="第三章 follow your passion.. maybe"></a>第三章 follow your passion.. maybe</h3><p>get paid to do what you love by making sure it connects to what other people want</p>
<p>reality check checklist<br>instead of just during your free time, would you enjoy pursuing your hobby at least twenty hours a week?<br>do you enjoy teaching others to practice the same hobby?<br>do you like the ins and outs(al the details) of your hobby?<br>if you had to do a fair amount of administrative work related to your hobby, would you still enjoy it?</p>
<p>have other people asked for your help?<br>are enough other people willing to pay to gain or otherwise benefit from your expertise?<br>are there other businesses serving this market but not in the same you would</p>
<p><img src="/../images/14527354810274.jpg" alt=""><br>（passion + skill） -&gt; (problem + marketplace) = opportunity</p>
<p>key points：</p>
<ul>
<li>good businesses provide solutions to problems: what do i do with all those extra frequent flyer miles, how can i easily learn a new language?</li>
<li>many follow-your-passion businesses are built on something indirectly related, not the passion or hobby itself. when considering an opportunity, ask: “where is the business model”?</li>
<li>not every passion or hobby is worth building into a business, and not everyone will want to have a business that is based on a passion or hobby</li>
<li>you can establish a specialized consulting business in one day - the more specific, the better</li>
</ul>
<h3 id="u7B2C_u56DB_u7AE0_the_rise_of_roaming_entreprenur"><a href="#u7B2C_u56DB_u7AE0_the_rise_of_roaming_entreprenur" class="headerlink" title="第四章 the rise of roaming entreprenur"></a>第四章 the rise of roaming entreprenur</h3><p>location, location, location is overrated<br>a desk is a dangerous place from which to view the world<br>作者的例子，中转香港，开视频会议，去越南远程办公。</p>
<p>case study1: the music teacher<br>case study2: the accidental worldwide photographer<br>case study3: the spreadsheet king</p>
<p>a brief primer for location independence<br>easier to operate a business while roaming the world than it is to start one. be sure to spend plenty of time getting set up before you hit the road<br>with U.S. or Canadian passport, you can stay for up to ninety days in many different countries around the world<br>learn about visas required visahq.com etc<br>keep your work in the cloud by using online services such as Google Docs and Dropbox<br>change your password frequently, and don’t use the name of your cat as the password<br>stay for free with helpful hosts through couchsurfing.org, low cast from AirBnB.com<br>latin America and Southeast Asia are two of the easiest and most hospitable regions to begin your nomadic adventures<br>to take advantage of sightseeing and experiencing the local culture. don’t feel bad about needing to devote more hours to work whenever needed. it’s ok, the work allows you to travel</p>
<p>become your own publisher:</p>
<p>the $120,000 e-book:<br>(哈哈，讲了 Evernote Essentials)</p>
<p>become your own publisher:<br>basic outline -<br>find a topic that people will pay to learn about. it helps if you are an expert in the topic, but if not, that’s what research is for<br>capture the information in one of three ways:</p>
<ul>
<li>write it down</li>
<li>record audio or video</li>
<li>produce some combination of a and b</li>
</ul>
<p>combine your materials into a product: a e-book or digital package that can be downloaded by buyers<br>create an offer - what exactly are you selling, and why should people take action on it?<br>decide a fair, value-based price for your offer.<br>find a way to get paid.<br>publish the offer and get the word out.(hustle喧嚣)<br>cash in and head to the beach!</p>
<p>key points：</p>
<ul>
<li>roaming entrepreneurs are everywhere these days. many of them are quietly building significant businesses while living in paradise</li>
<li>just as not every passion leads to a good business model, a lot of people pursue the nomadic lifestyle for the wrong reasons. the best question to answer is: what do you want to do?</li>
<li>there are many roads to location independence, but the business of information publishing is especially profitable(more than one path to information publishing, it isn’t just about e-books)</li>
</ul>
<p>there was no English-language manual, more than a dozen books or guides on Evernote already existed in Japan. this suggested the strong marketability of the project and revealed a gap in the English-language marketplace that Brett was able to fill</p>
<h3 id="u7B2C_u4E94_u7AE0_the_new_demographics"><a href="#u7B2C_u4E94_u7AE0_the_new_demographics" class="headerlink" title="第五章 the new demographics"></a>第五章 the new demographics</h3><p>your customers all have something in common, but it has nothing to do with old-school categories<br>Business opportunities are like buses; there’s always another coming.</p>
<p>key points:</p>
<ul>
<li>who are your people? you don’t necessarily have to think of them in categories such as age, race, and gender. instead, you can think of them in terms of shared beliefs and values</li>
<li>you can often follow a fad, craze, or trend by establishing yourself as an authority and simplify something about the process for other hoping to benefit from it.</li>
<li>use surveys to understand customers and prospects. the more specific, the better. ask: what’s the number one thing i can do for you?</li>
<li>use the decision-making matrix to evaluate multiple ideas against one another. you don’t have to choose only one idea, but the exercise can help you decide what to pursue next.</li>
</ul>
<h2 id="Part_2_uFF1ATaking_it_to_the_streets"><a href="#Part_2_uFF1ATaking_it_to_the_streets" class="headerlink" title="Part 2：Taking it to the streets"></a>Part 2：Taking it to the streets</h2><h3 id="u7B2C_u516D_u7AE0_the_one-page_business_plan"><a href="#u7B2C_u516D_u7AE0_the_one-page_business_plan" class="headerlink" title="第六章 the one-page business plan"></a>第六章 the one-page business plan</h3><p>plans are only good intentions unless they immediately degenerate into hard work.</p>
<p>the action bias: 立即行动<br>select a marketable idea<br>keep costs low<br>get the first sale as soon as possible<br>market before manufacturing<br>respond to initial results</p>
<p>seven steps to instant market testing:</p>
<ul>
<li>1 you need to care about the problem you are going to solve, and there has to be a sizable number of other people who also care.</li>
<li>2 make sure the market is big enough. test the size by checking the number and relevancy of Google keywords(keyword you would use if you were trying to find your product.)</li>
<li>3 focus on eliminating blatant admitted pain(to solve a problem that causes pain that the market knows it has.)</li>
<li>4 almost everything that is being sold is for either a deep pain or a deep desire.(remove/reduce pain, for respect and status, to be loved)</li>
<li>5 always think in terms of solution - your solution must be different or better(differentiation)</li>
<li>6 create a persona: the one person would benefit the most from your idea. take your idea to this person and discuss it with him or her in detail</li>
<li>7 create an outline for what you are doing and show it to a subgroup of your community. to test if for fee in return for feedback and confidentiality. they will act as evangelists. use a blog to build authority and expertise on a subject. leave comments on blogs where your target audience hangs out.</li>
</ul>
<p>good to know if people want what you have to offer before you put a lot of work into making it. through surveys</p>
<p>freely receive, freely give:<br><img src="/../images/14527355073883.jpg" alt=""><br><img src="/../images/14527355199835.jpg" alt=""></p>
<p>plan as you go to respond to the changing needs of your customers but launch your business as soon as possible, with a bias toward action<br>Nick’s first print sale provided far more motivation than the $50 he received. as soon as possible, find a way to get your first sale<br>follow the Seven steps to Instant Market Testing(or the market before manufacturing method) to gauge the initial response.<br>use the one-page business plan to outline your business ideas quickly<br>to avoid overcomplicating things, explain your business with a 140-character mission statement</p>
<h3 id="u7B2C_u4E03_u7AE0_an_offer_you_can_u2019t_refuse"><a href="#u7B2C_u4E03_u7AE0_an_offer_you_can_u2019t_refuse" class="headerlink" title="第七章 an offer you can’t refuse"></a>第七章 an offer you can’t refuse</h3><p>the step-by-step guide to creating a killer offer</p>
<p>key points:</p>
<ul>
<li>as much as possible, connect your offer to the direct benefits customers will receive.</li>
<li>what people want and what they say they want are not always the same thing; your job is to figure out the difference</li>
<li>when developing an offer, think carefully about the objections and then respond to them in advance</li>
<li>when developing an offer, think carefully about the objections and then respond to them in advance</li>
<li>provide a nudge to customers by getting them to make a decision(difference between a good offer and a great one is urgency - why should people act now)</li>
<li>offer reassurance and acknowledgement immediately after someone buys something or hires you. - small but meaningful way to go above and beyond their expectations</li>
</ul>
<h3 id="u7B2C_u516B_u7AE0_launch_21"><a href="#u7B2C_u516B_u7AE0_launch_21" class="headerlink" title="第八章 launch!"></a>第八章 launch!</h3><p>thirty-nine-step product launch checklist</p>
<p>the big picture:</p>
<ul>
<li>1 ensure that you product or service has a clear value proposition 清晰的价值主张</li>
<li>2 decide on bonuses, incentives, or rewards for early buyers how will they be rewarded for taking action?</li>
<li>3 have you made the launch fun somehow? - will they non-buyers still enjoy hearing or reading about the launch</li>
<li>4 if your launch is online, have you recorded a video or audio message to complement the written copy?</li>
<li>5 have you built anticipation into the launch? are prospect excited</li>
<li>6 have you built urgency - a real reason for timeliness into the launch</li>
<li>7 publish the time and date of the launch in advance</li>
<li>8 proofread all sales materials multiple times.. get someone else to review them as well</li>
<li>9 check all web links in your shopping cart or payment processors, and them double-check them for a different computer with a differ browser.</li>
</ul>
<p>next steps:</p>
<ul>
<li>10 if this is an online product, is it properly set up in your shopping cart or with PayPal</li>
<li>11 test every step of the order process repeatedly(whenever you change any variable - price, order components, text etc)</li>
<li>12 have you registered all the domains associated with your product?</li>
<li>13 are all files uploaded and in the right place?</li>
<li>14 review the order page</li>
<li>15 read important communications(launch message, order page, sales page) out load</li>
<li>16 have you or your designer create any custom graphics for the offer, including any needed ads for affiliates or partners?<br>money matters:</li>
<li>17 set a clear monetary goal for the launch</li>
<li>18 advise the merchant account or bank of incoming funds</li>
<li>19 create a backup plan for incoming funds if necessary<br>….</li>
</ul>
<p>key points:</p>
<ul>
<li>a good launch is like a Hollywood movie: you first hear about it far in advance, then you hear more about it before the debut, then you watch as crowds of people anxiously queue up for the opening</li>
<li>a good launch blends strategy with tactics. strategy refers to why question such as story, offer, and long-term plan. tactics refers to how question such as timing, price and specific pitch</li>
<li>a series of regular communications with prospects before launch will help you re-create the Hollywood experience with an audience of any size</li>
<li>consider the question of timeliness: why should people care about your offer now?</li>
<li>use the thirty-nine-step product launch checklist as a model.</li>
</ul>
<h3 id="u7B2C_u4E5D_u7AE0_hustling_3A_the_gentile_art_of_self-promotion"><a href="#u7B2C_u4E5D_u7AE0_hustling_3A_the_gentile_art_of_self-promotion" class="headerlink" title="第九章 hustling: the gentile art of self-promotion"></a>第九章 hustling: the gentile art of self-promotion</h3><p>advertising is like sex: only losers pay for it<br>good things happen to those who hustle<br><img src="/../images/14527355356903.jpg" alt=""></p>
<p>key points:</p>
<ul>
<li>if you’re not sure where to spend your business development time, spend 50 percent on creating and 50 percent on connecting. the most powerful channel for getting the word out usually starts with people you already know.</li>
<li>if you build it, they might come.. but you’ll probably need to let them know what you’ve built and how to get there.</li>
<li>when you’re first getting started, say yes to every reasonable request. become more selective as you become more established</li>
<li>use the one-page promotion plan to maintain a regular schedule of connecting with people as you also spend time building other parts of your business.</li>
</ul>
<h3 id="u7B2C_u5341_u7AE0_show_me_the_money"><a href="#u7B2C_u5341_u7AE0_show_me_the_money" class="headerlink" title="第十章 show me the money"></a>第十章 show me the money</h3><p>unconventional fundraising from kickstart to unlikely car loans</p>
<p>key points:</p>
<ul>
<li>there’s nothing wrong with having a hobby, but if you’re operating a business, the primary goal is to make money</li>
<li>goding into debt to start a business is completely optional. every day, people open and operate successful ventures without any kind of outside investment or borrowing.</li>
<li>whether it’s money, access to help, or anything else, you probably have more than you think. how can you get creating about finding what you need?</li>
</ul>
<h2 id="Part_3_3A_Leverage_and_Next_Steps__u66F4_u8FDB_u4E00_u6B65"><a href="#Part_3_3A_Leverage_and_Next_Steps__u66F4_u8FDB_u4E00_u6B65" class="headerlink" title="Part 3: Leverage and Next Steps 更进一步"></a>Part 3: Leverage and Next Steps 更进一步</h2><h3 id="u7B2C_u5341_u4E00_u7AE0_moving_on_up"><a href="#u7B2C_u5341_u4E00_u7AE0_moving_on_up" class="headerlink" title="第十一章 moving on up"></a>第十一章 moving on up</h3><p>key points:</p>
<ul>
<li>moving on up by increasing income in an existing business is usually easier than initially starting the business</li>
<li>by making careful choices, you can often grow the business without dramatically increasing the workload, allowing you to scale without hiring more people</li>
<li>easy growth options include adding a service to a product-based business(or vice versa), deploying a creative series of upsells and cross-sells, and making a few key tweaks</li>
<li>horizontal expansion involves going broader by serving more customers with different(usually related) interests; vertical expansion involves going deeper by serving the same customers with different levels of need</li>
</ul>
<h3 id="u7B2C_u5341_u4E8C_u7AE0_how_to_franchise_u7279_u8BB8_u7ECF_u8425_yourself"><a href="#u7B2C_u5341_u4E8C_u7AE0_how_to_franchise_u7279_u8BB8_u7ECF_u8425_yourself" class="headerlink" title="第十二章 how to franchise特许经营 yourself"></a>第十二章 how to franchise特许经营 yourself</h3><p>instructions on cloning yourself for fun and profit</p>
<p>key points:</p>
<ul>
<li>by leveraging skills and contacts, you can be in more than one place at the same time. strategies to do this including outsourcing, affiliate recruitment, and partnerships</li>
<li>use the hub-and-spoke辐射式 model of maintaining one online home base while using other outposts to diversify yourself</li>
<li>when it comes to outsourcing, decide for yourself what’s best.the decision will probably come down to two things: the kind of business you’re building and your personality</li>
<li>carefully chosen partnerships can create leverage. just make sure that’s what you want to do. use the one-page partnership agreement for simple arrangements</li>
</ul>
<h3 id="u7B2C_u5341_u4E09_u7AE0_go_long"><a href="#u7B2C_u5341_u4E09_u7AE0_go_long" class="headerlink" title="第十三章 go long"></a>第十三章 go long</h3><p>key points:</p>
<ul>
<li>there’re more than one road to freedom, and some people find it through a combination of different working arrangements</li>
<li>going long by pursuing growth and deciding to stay small are both acceptable options, and you can split the difference by go medium. it all depends on what kind of freedom you;d like to achieve</li>
<li>work on your business by devoting time every day to activities specifically related to improvement, not just by responding to everything else that is happening</li>
<li>regularly monitor one or two key metrics that are the lifeblood of your business. check up on the others monthly or bimonthly</li>
<li>a business that is scalable is both teachable and valuable. if you ever want to sell your business, you’ll need to build teams and reduce owner dependency</li>
</ul>
<h3 id="u7B2C_u5341_u56DB_u7AE0_but_what_if_i_fail_3F"><a href="#u7B2C_u5341_u56DB_u7AE0_but_what_if_i_fail_3F" class="headerlink" title="第十四章 but what if i fail?"></a>第十四章 but what if i fail?</h3><p>key points:</p>
<ul>
<li>advise can be helpful, but you can also just step out and take a big leap. don’t wait for someone to give you permission</li>
<li>more than competition or other external factors, the biggest battle is against our own fear and inertia. thankfully, this also means we are in complete control of managing it</li>
<li>when you have a success or moment you knew story, hold on to it. these experiences are powerful and will help you later if times get hard</li>
<li>the most important lesson in the whole book: don;t waste your time living someone else’s life</li>
</ul>
<p>书末尾有： twenty-five selected case studies<br>ps:<br>stop off for an espresso recharge<br>fire off a few more replies<br>settle into an unfamiliar routine<br>opt out of traditional employment</p>
<p>charlatan - 吹牛者忽悠<br>martyr - 烈士</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>the $100 startup<br>reinvent the way you make a living, do what you love, and create a new future<br>重新定义你的生活工作，做你喜欢的，创造未来~<br>Ps： <a href="http://book.douban.com/subject/7015950/">豆瓣链接</a><br>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[【Node】Node.js API gateway]]></title>
    <link href="http://sivagao.com/2015-09/node-api-gateway/"/>
    <id>http://sivagao.com/2015-09/node-api-gateway/</id>
    <published>2015-09-20T23:56:29.000Z</published>
    <updated>2016-01-31T13:21:48.000Z</updated>
    <content type="html"><![CDATA[<p>一个API网关，可以外部整合，安全化，管理 APIs。它是API消费者（客户端程序）和后端API提供者（API服务器）之间的中介。</p>
<p><img src="https://cloud.githubusercontent.com/assets/697853/9986621/7b7968ee-6071-11e5-89f7-88e151a0d6c1.png" alt="df82b234-5ddb-463c-bf54-10d0af0535e9"></p>
<h3 id="API__u7F51_u5173_u7684_u4F5C_u7528"><a href="#API__u7F51_u5173_u7684_u4F5C_u7528" class="headerlink" title="API 网关的作用"></a>API 网关的作用</h3><table>
<thead>
<tr>
<th>功能</th>
<th>API网关作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>安全</td>
<td>在企业接入层作为第一个拦截器，建立用户标示前, 作为授权，认证，审计（AAA）的提供者或转发者</td>
</tr>
<tr>
<td>调停和转换</td>
<td>介导不同协议间，更换API 的payload（如 HTTP 头，HTTP 请求主体）为了不同的客户端API消费需求</td>
</tr>
<tr>
<td>基础服务质量</td>
<td>为API消费的客户端提供基础设施基本的功能如：分页，限制频率，缓存，分发保证，防火墙，等</td>
</tr>
<tr>
<td>监控和报表</td>
<td>通过监控APIs 和 注入元数据来报备如API 使用，健康度，等其他指标，来指导API实现服务级别协议(SLAs)</td>
</tr>
<tr>
<td>聚合</td>
<td>通过动态调用和构建把各个底层业务的细粒度的微服务 API 组合成粗粒度混搭式APIs</td>
</tr>
<tr>
<td>虚拟化</td>
<td>通过虚拟化API节点和作为API服务器节点实例的反向代理实现一个高可用，安全，可扩展的抽象层</td>
</tr>
</tbody>
</table>
<h3 id="API__u7F51_u5173_u662F_u4E2A_u6311_u6218"><a href="#API__u7F51_u5173_u662F_u4E2A_u6311_u6218" class="headerlink" title="API 网关是个挑战"></a>API 网关是个挑战</h3><ul>
<li>1 随着越来越多的老旧系统，云服务，移动设备，甚至是物联网，API 网关的挑战性呈指数级增长</li>
<li>2 旧有API通过旧有服务被开发和暴露：<ul>
<li>建立在异构的平台和语言，由拥有不同技术技能的不同的团队开发</li>
<li>在业务领域中没有被切分出离散原子性的边界，而是被构建成在一个业务领域的单块</li>
<li>开发的时候没有考虑后续扩展，仅仅限制在当前的访问需求被静态的定义着</li>
<li>并没有很好的文档化，内部随便的就发布了，通过口头交流</li>
<li>不同服务和API有着不同的数据协议和格式，在集成时都遇到很大问题</li>
</ul>
</li>
<li>3 API网关的建设需要长期的磨合。因为它跨多个使用不同工具集和暴露不同风格接口的团队（开发者，运维，数据分析师）</li>
</ul>
<h3 id="API__u7F51_u5173_u7EC4_u6210"><a href="#API__u7F51_u5173_u7EC4_u6210" class="headerlink" title="API 网关组成"></a>API 网关组成</h3><p><img width="1066" alt="3b8fb21c-a3a0-4c5f-b0ee-c164e237d1a2" src="https://cloud.githubusercontent.com/assets/697853/9987066/2326fd78-6076-11e5-801d-e315605abfd4.png"></p>
<p>API 网关 管道的4个层级：</p>
<ul>
<li>传输层：监听传入的消息和解包他们为的请求对象。例如，接受HTTP请求，并产生HTTP响应（也可能是websocket）</li>
<li>远程处理层：解析请求对象为Node.js对象（作为接收机和方法被调用）</li>
<li>模型层：委派数据访问请求到连接器(connector)的实现</li>
<li>接口层：分发CRUD等数据资源方法到数据库驱动程序(如JDB)来调用后端系统。</li>
</ul>
<h3 id="API__u7F51_u5173_u4E0B_u7684_u5178_u578B_u8BF7_u6C42_u6D41_u7A0B_uFF1A"><a href="#API__u7F51_u5173_u4E0B_u7684_u5178_u578B_u8BF7_u6C42_u6D41_u7A0B_uFF1A" class="headerlink" title="API 网关下的典型请求流程："></a>API 网关下的典型请求流程：</h3><ol>
<li>客户端应用程序从的OAuth 2.0授权服务器请求一个访问令牌。</li>
<li>客户端应用程序发送包含访问令牌的OAuth的2.0资源服务器API请求。</li>
<li>资源服务器验证的访问令牌（包括过期，范围，客户ID和资源拥有者），以允许或拒绝访问。如果拒绝，则错误响应被发送到客户端应用程序并且流程终止。</li>
<li>指标Metrics中间件捕获API使用和更新指标。</li>
<li>限频中间件查看API请求，并检查基于各种约束的频率限制（如服务器健康度，客户端级别等）。如果超过的限制之一，一个错误响应发送到客户端应用程序并且流程终止。</li>
<li>代理中间件查找路由配置，以决定该请求是否应该在本地处理还是转发到远程API服务器。</li>
<li>API服务器处理该请求，并产生一个响应。</li>
<li>接收到代理中间件响应，然后送回原来的客户端应用程序。</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>一个API网关，可以外部整合，安全化，管理 APIs。它是API消费者（客户端程序）和后端API提供者（API服务器）之间的中介。</p>
<p><img src="https://cloud.githubusercontent.com/assets/697853/9986]]>
    </summary>
    
      <category term="JavaScript" scheme="http://sivagao.com/tags/JavaScript/"/>
    
      <category term="Node.js" scheme="http://sivagao.com/tags/Node-js/"/>
    
      <category term="技术" scheme="http://sivagao.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[【读书笔记】OFF 学]]></title>
    <link href="http://sivagao.com/2015-09/book-note-off-from-work/"/>
    <id>http://sivagao.com/2015-09/book-note-off-from-work/</id>
    <published>2015-09-15T10:56:29.000Z</published>
    <updated>2016-01-30T14:33:02.000Z</updated>
    <content type="html"><![CDATA[<p>本书介绍了自身休闲，夫妻相处之道，退休计划等鲜明见解，有些地方挺独到的。<br>趁年轻！ 不要等到退休之后，就算有了一些时间和金钱，也不能充分享受休闲生活，最后只有在漫无目的，慵懒的生活中结束自己的人生。<br><a href="http://book.douban.com/subject/2142034/" target="_blank" rel="external">豆瓣链接</a><br><a id="more"></a> </p>
<h2 id="u76EE_u5F55"><a href="#u76EE_u5F55" class="headerlink" title="目录"></a>目录</h2><p>第1章 享受兴趣，从现在开始</p>
<ul>
<li>尽情享受海洋的乐趣</li>
<li>海洋休闲方式知多少</li>
<li>不要打自费又不快乐的高尔夫</li>
<li>从享受音乐开始，培养一生的兴趣</li>
<li>购物，购买“标准物品”足矣</li>
<li>把时间花在真正感兴趣的事物上</li>
</ul>
<p>第2章 击退“忧郁的星期一” (在“浮华之日”，让身心彻底放松)</p>
<ul>
<li>周末悠闲放松，周一从容不迫</li>
<li>购置第二住宅，享受假期</li>
<li>假期跟家人同游，享受美食</li>
<li>周末的时间分配术</li>
<li>增加休闲时间的三种方法</li>
<li>高效阅读的秘诀</li>
<li>有效利用个人时间的书房活用术</li>
<li>拓展人际关系，结交工作以外的朋友</li>
<li>摆脱“工作时钟”，击退压力</li>
</ul>
<p>第3章 出去旅游</p>
<ul>
<li>通过“网络观光”制订旅游计划</li>
<li>充分享受国内旅游的乐趣</li>
<li>避免“休闲疲惫”的原则</li>
<li>带父母同游，尽孝从现在做起</li>
</ul>
<p>第4章 休闲时间的IT活用术</p>
<ul>
<li>活用电脑拓展兴趣，结交新朋友</li>
<li>将医疗网站变成“家庭医生”</li>
<li>数码相机是拓展对话的工具</li>
<li>在雨天的假日，利用电脑整理“自己的过去”</li>
<li>利用网络拍卖聪明购物</li>
</ul>
<p>第5章 喝酒的场所与乐趣</p>
<ul>
<li>下午5点之后的灯红酒绿是人生的浪费</li>
<li>以在酒吧喝酒的方式与工作以外的人开怀畅饮</li>
<li>选择美食餐厅的三项法则</li>
<li>拥有两家熟悉的餐厅</li>
<li>外籍女服务员是最好的信息源</li>
</ul>
<p>第6章 家庭管理术</p>
<ul>
<li>周四晚上进行家庭定期检查</li>
<li>家庭融洽的秘诀</li>
<li>撤除孩子的房间，确保父亲的活动空间</li>
<li>边看电视边吃饭是家庭融洽的最大杀手</li>
<li>好好庆祝家庭纪念日</li>
<li>让家人尝尝爸爸的菜</li>
<li>夫妻有各自的空间，也有共同的话题</li>
<li>将长期外派转化为增进家人敢情的机会</li>
<li>给太太自由和权限，远离中年离婚</li>
<li>管理“家庭团队”</li>
</ul>
<p>第7章 家庭育儿术</p>
<ul>
<li>利用“丛林法则”，让孩子在体验中成长</li>
<li>只跟同年级学生玩耍的孩子很难成长</li>
<li>并肩谈话胜于面对面交流</li>
<li>善用寄宿学校与“寄宿家庭”</li>
<li>成为孩子的“协助者”，而非“教导者”</li>
<li>让孩子统筹家庭活动，锻炼孩子的领导能力</li>
<li>从取消零用钱开始，对孩子进行金钱教育</li>
<li>考试失败，被人欺负——解救陷入困境的孩子</li>
<li>孩子的求职不能依赖父母</li>
</ul>
<p>第8章 从现在起，为退休后的生活做准备</p>
<ul>
<li>选择终身兴趣的三项法则</li>
<li>积累充足的退休生活费，做真正想做的事情</li>
<li>理性投资，为退休生活积累财富</li>
<li>参加社会公益活动，回报社会</li>
<li>老年的海外移居计划</li>
<li>退休后另外购置居所，享受天堂般的生活</li>
</ul>
<p>里面有不少舒服的工作后生活的方式：<br>原则：</p>
<ul>
<li>与其多次反复浅尝辄止，不如少次充分享受。</li>
<li>为了丰富多彩的人生，有必要对于自己的时间和资金进行适当分配。</li>
</ul>
<h3 id="u7B2C_u4E00_u7AE0_-__u4EAB_u53D7_u4E50_u8DA3_uFF0C_u4ECE_u73B0_u5728_u5F00_u59CB"><a href="#u7B2C_u4E00_u7AE0_-__u4EAB_u53D7_u4E50_u8DA3_uFF0C_u4ECE_u73B0_u5728_u5F00_u59CB" class="headerlink" title="第一章 - 享受乐趣，从现在开始"></a>第一章 - 享受乐趣，从现在开始</h3><p>培养可以维持一生的兴趣，亲自参与，享受乐趣。<br>1)记录兴趣日记，简短而持续<br>2)集中精力，深入研究自己感兴趣的对象<br>3)对于乐器等兴趣，积极参与<br>4)结识具有共同的兴趣的伙伴</p>
<p>为什么不去真正一流的地点去尽情品味休闲的真味呢（不要窝在城市拥挤的滑雪场而是而飞机到滑雪胜地，这样花费下来也不高玩的也好）</p>
<ul>
<li>你要有自己的一个休闲爱好并且做大做好（如骑车，那就去环岛去新西兰骑车去西藏等）</li>
<li>永远年轻去尝试。 盛田昭夫，培养运动兴趣，从任何时候都不会晚。去网球滑雪潜水等</li>
<li>寻找标准物。一个好用空间合理的公文包，一款降噪的耳机等等，大幅提升生活质量和效率</li>
</ul>
<h3 id="u7B2C_u4E8C_u7AE0_-__u51FB_u9000_u5FE7_u90C1_u7684_u661F_u671F_u4E00"><a href="#u7B2C_u4E8C_u7AE0_-__u51FB_u9000_u5FE7_u90C1_u7684_u661F_u671F_u4E00" class="headerlink" title="第二章 - 击退忧郁的星期一"></a>第二章 - 击退忧郁的星期一</h3><p>周末的时间分配<br>1)周五晚上开始休闲活动 （节制，不要宿醉然后周六晚起边看电视边瞌睡！）<br>2)周六,享受体力型的活动（锻炼身体维持健康）。周日，身心充分休息<br>3)星期天晚餐之后，开始为星期一的工作做准备</p>
<p>安排并拥有个人时间，以思考工作和生活方面的重要问题（而不是被动的接受目前生活的问题，）：<br>1)把个人时间列入计划，并形成习惯<br>2)分开休息和思考的空间 （如卧室和书房等）<br>3)营造可以集中精力进行思考的空间，并将其标准化 （光线，座椅等）</p>
<p>可以在周末与家人一道在河边散步，且具有以下魅力：<br>1)基本没有额外开销<br>2)没有压力，无需特别的行程计划<br>3)开放感,不会限制活动范围 （区别在市区内人多，商业气氛等）<br>4)丰富家人之间的交流</p>
<p>拓展人际，结识工作以外的朋友<br>避免只局限于家人和同学中，可以通过自己的兴趣结识一些相当持久的朋友。看到这些不同行业生活背景朋友（越野摩托车）就觉得人生很充实，心情开朗，骑车态度认真，分享乐趣等</p>
<p>一年之中休一次5天以上的长假，放松身心，摆脱“工作时钟”。</p>
<h3 id="u7B2C_u4E09_u7AE0_-__u51FA_u53BB_u65C5_u6E38"><a href="#u7B2C_u4E09_u7AE0_-__u51FA_u53BB_u65C5_u6E38" class="headerlink" title="第三章 - 出去旅游"></a>第三章 - 出去旅游</h3><p>通过网络观光，指定旅行计划<br>享受丰富的视觉之旅，欣赏美丽的照片（喜马拉雅登山徒步，去马尔代夫潜水， 在西伯利亚火车的窗边，漫步在京都奈良的古老寺庙等）<br>接触不同文化的生活，世界语言服饰饮食居住环境流行趋势等等<br>提高语言能力去查字典去信息等<br>制定旅游计划书如景点出发日期机票餐厅活动等等</p>
<p>避免“休闲疲惫”的法则<br>1.人多的地方不去。在不会拥挤的地方，悠闲的享受生活<br>2.在开放空间享受生活<br>3.最为重要的是与家人之间的真诚对话与时间共享</p>
<h3 id="u7B2C_u56DB_u7AE0_-__u4F11_u95F2_u65F6_u95F4_u6D3B_u7528IT_u6280_u672F"><a href="#u7B2C_u56DB_u7AE0_-__u4F11_u95F2_u65F6_u95F4_u6D3B_u7528IT_u6280_u672F" class="headerlink" title="第四章 - 休闲时间活用IT技术"></a>第四章 - 休闲时间活用IT技术</h3><p>利用数码相机记录生活，抽空回顾<br>通过网络社区等方式，结识天南地北相同爱好聊得来的新朋友<br>雨天整理电脑的通信录，手机的联系方式，活络感情。 整理数码记录（如照片，音乐，文章等）自我回顾反思</p>
<h3 id="u7B2C_u4E94_u7AE0_-__u559D_u9152_u7684_u573A_u6240_u4E0E_u4E50_u8DA3"><a href="#u7B2C_u4E94_u7AE0_-__u559D_u9152_u7684_u573A_u6240_u4E0E_u4E50_u8DA3" class="headerlink" title="第五章 - 喝酒的场所与乐趣"></a>第五章 - 喝酒的场所与乐趣</h3><p>在酒吧与工作以外的陌生人开怀畅饮</p>
<p>按照不同价位整理餐厅信息<br>选择餐厅方法：确认午餐的味道<br>菜品的选择方法：请餐厅人员推荐</p>
<p>拥有两家熟悉的餐厅<br>如果是熟悉的常客，可以吃到额外的佳肴<br>如何和餐厅建立良好关系？取得厨师和服务人员信赖而不一定要多次光顾</p>
<h3 id="u7B2C_u516D_u7AE0_-__u5BB6_u5EAD_u7BA1_u7406_u672F"><a href="#u7B2C_u516D_u7AE0_-__u5BB6_u5EAD_u7BA1_u7406_u672F" class="headerlink" title="第六章 -  家庭管理术"></a>第六章 -  家庭管理术</h3><p>周四晚上对家庭做定期检查<br>1.家庭内部问题<br>2.家庭外部的烦恼</p>
<p>如何安排一周的时间<br>周四晚家庭定期检查，听取家庭成员的意见，处理家务事。周五晚上享受周末助跑时间，不可太晚，可以听听音乐、看看闲书、看看球赛。周六好好活动。周日身心休息时间，周日晚上后，下周工作助跑时间，做下周计划。</p>
<p>要有自己的计划<br>1) 按照自己的想法,主动的使用自己的时间<br>2)每天安排不同的计划，一周的生活会充满变化<br>3)如果有计划，下班的理由和时间会比较明确<br>4)同事邀约时，可以比较明确判断是否赴约<br>5)周末的时间可以充分的利用在个人的兴趣以及全家人的旅游上，达到真正全身心放松的目的</p>
<p>和睦家庭， 每周固定时间一起聚会吃饭。 父亲扮演倾听者，让孩子说说学校和同学的事，让太太讨论社区邻里的趣事等</p>
<p>边看电视边吃饭是家庭融洽的最大杀手， 意味着和亲人客人聊天步入看电视有趣。</p>
<p>夫妻之前一定不能只聊孩子，要有单独相处和交流的时间。</p>
<h3 id="u7B2C_u4E03_u7AE0_-__u5BB6_u5EAD_u80B2_u513F_u672F"><a href="#u7B2C_u4E03_u7AE0_-__u5BB6_u5EAD_u80B2_u513F_u672F" class="headerlink" title="第七章 - 家庭育儿术"></a>第七章 - 家庭育儿术</h3><p>利用丛林法则，让孩子在体验中成长<br>学会跟孩子分享自己曾经的失败经历，助于孩子产生克服困难的勇气。不要都让孩子参加过于安全的活动，让孩子学会避险和一些紧急预案做法。 饭后全家演讲三分钟，一起讨论一个共同话题，交换思维，提高孩子说话技巧。让孩子主动策划一次活动，或者全家人轮流组织周末出行活动。 大人不能免费给孩子零用钱，取消零用钱。可以通过劳动成效给零用钱。撤掉孩子幼时独立房间而是确保父母有自己独立读书间，可以让孩子效仿也可以直接监督孩子成长。说话时候学会顺着孩子的思路一起讨论！</p>
<h3 id="u7B2C_u516B_u7AE0_-__u4E3A_u9000_u4F11_u751F_u6D3B_u505A_u51C6_u5907"><a href="#u7B2C_u516B_u7AE0_-__u4E3A_u9000_u4F11_u751F_u6D3B_u505A_u51C6_u5907" class="headerlink" title="第八章 - 为退休生活做准备"></a>第八章 - 为退休生活做准备</h3><p>选择终身兴趣<br>1 如果超过40岁，要拥有退休之后可以持续的兴趣<br>2 跟不同年龄的朋友一起享受乐趣<br>4 选择有表现机会的兴趣</p>
<p>积累生活费，做自己想做的事<br>为一直想做的事情从现在开始准备，向朋友和家人宣布， 逐步实施， 调整储蓄计划而不是过着漫无目的的为退休储蓄的生活，而忽略了现在的生活。<br>去搭乘豪华游轮体验一周的环球之旅， 南极的探险之旅， 去非洲的团体露营之旅，刚果河之旅等。 同时带着米其林美食指南享受一流的美食。<br>不要变成死钱被通胀贬值了。要投资金融理财产品海外资产去升值和保值。</p>
<p>移居计划， 如从纽约搬到佛里达州的奥兰多（迪士尼主题公园聚集地）， 世界闻名的拉斯维加斯，气候温暖的太阳城等。（气候温暖， 生活费用低廉， 丰富的自然资源和充实的休闲设施）卖掉之前城市里的房子或者租出去， 去澳大利亚或新西兰。去菲律宾如苏比克特区，老人看护好和佣人费用低</p>
<h3 id="u5E38_u8BC6_u77E5_u8BC6_uFF1A"><a href="#u5E38_u8BC6_u77E5_u8BC6_uFF1A" class="headerlink" title="常识知识："></a>常识知识：</h3><p>1 过去日本上班族的休闲利器：麻将，高尔夫和卡拉OK（滑雪现象，年轻一代总是寻找新的休闲方式， 而老中年人不擅长。譬如滑雪，到处都是年轻人用滑雪板（单板）时，中年人就渐渐不来了。等年轻人玩够了也不来了。。）</p>
<p>2 欧美（包括大洋洲）的游艇文化和覆盖率和玩法<br>西海岸的人，避暑往北从玛丽安德尔湾去加拿大的海峡群岛国家公园。冬天去圣卢卡斯角度假</p>
<p>3 很多美国人会开着房车进行一个月左右的居家旅行。 在车牌上有本州的标记，如蒙大拿的big sky 长空之乡</p>
<p>4 在美国被称为精英的商务人士非常忙碌。 虽然他们在纽约附近的新泽西州有住宅但是避免上下班的疲惫，在工作日他们住在曼哈顿的公寓只有周末才回家。在周一到周五会雇佣菲律宾佣人照顾孩子家庭。太太不会忙于家务可以去公寓陪伴丈夫。让初高中生保姆或者baby-siter 来辅导孩子功课和饮食</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>本书介绍了自身休闲，夫妻相处之道，退休计划等鲜明见解，有些地方挺独到的。<br>趁年轻！ 不要等到退休之后，就算有了一些时间和金钱，也不能充分享受休闲生活，最后只有在漫无目的，慵懒的生活中结束自己的人生。<br><a href="http://book.douban.com/subject/2142034/">豆瓣链接</a><br>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[【Angular】给 $http 加上好用的操作提示indicator interceptor]]></title>
    <link href="http://sivagao.com/2015-09/angular-$http-feedback/"/>
    <id>http://sivagao.com/2015-09/angular-$http-feedback/</id>
    <published>2015-09-10T23:56:29.000Z</published>
    <updated>2016-01-31T13:22:02.000Z</updated>
    <content type="html"><![CDATA[<h3 id="u4E3A_u4EC0_u4E48"><a href="#u4E3A_u4EC0_u4E48" class="headerlink" title="为什么"></a>为什么</h3><p>用户在使用你的产品需要及时的反馈，譬如在拉取后端数据时候，在做了某些涉及后端的操作时，在消费数据时遇到某些莫名错误时。<br>同时，我们在开发的时候，如果对于这些通用的操作提示能够有全局的一致的UI/UX的话，可以继承进入 Angular 的$http 模块中，这样不需要在每次业务编写时都手动改下。 </p>
<p>所以下面的 Http interceptor 主要解决如下三个问题：</p>
<ul>
<li>数据拉取的模态 loading</li>
<li>POST/PUT/DELETE 等 操作button的buzy 和点击屏蔽disabled button</li>
<li>通用的5xx的报错提示等</li>
</ul>
<h3 id="u6548_u679C_u5C55_u793A"><a href="#u6548_u679C_u5C55_u793A" class="headerlink" title="效果展示"></a>效果展示</h3><table>
<thead>
<tr>
<th style="text-align:left">提交indicator</th>
<th style="text-align:center">错误indicator</th>
<th style="text-align:right">拉取indicator</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><img src="https://cloud.githubusercontent.com/assets/697853/9808244/2f9a839c-5890-11e5-868d-4005c626bb45.png" alt="button"></td>
<td style="text-align:center"><img src="https://cloud.githubusercontent.com/assets/697853/9808245/2fe2145a-5890-11e5-84bf-4bcfe82a66ec.png" alt="error-msg"></td>
<td style="text-align:right"><img src="https://cloud.githubusercontent.com/assets/697853/9808246/2fe5cabe-5890-11e5-8286-13b8eeae47a7.png" alt="global"></td>
</tr>
</tbody>
</table>
<h3 id="u4F7F_u7528_u65B9_u5F0F"><a href="#u4F7F_u7528_u65B9_u5F0F" class="headerlink" title="使用方式"></a>使用方式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">$api(<span class="string">'getFundRatio'</span>, &#123;</span><br><span class="line">  pageSize: <span class="number">60</span>,</span><br><span class="line">  pageNum: <span class="number">1</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="comment">// global 代表全局loading indicator</span></span><br><span class="line">  indicator: <span class="string">'global'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">ng-click=<span class="string">"depositFund($event)"</span></span><br><span class="line">$api(<span class="string">'depositFund'</span>, &#123;</span><br><span class="line">  amount: vm.amount,</span><br><span class="line">  bankcode: vm.currentCard.bankcode,</span><br><span class="line">  bankno: vm.currentCard.typeno,</span><br><span class="line">  mobilephone: vm.mobile</span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="comment">// 忽略通用的错误踢死</span></span><br><span class="line">  ignoreErr: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 传入 button 来做按钮提示和在ajax过程中的disabled</span></span><br><span class="line">  indicator: e.target</span><br><span class="line">&#125;).then((r)=&gt;&#123;</span><br><span class="line">  $temp.set(<span class="string">'charge'</span>, &#123;</span><br><span class="line">    card: vm.currentCard,</span><br><span class="line">    amount: vm.amount,</span><br><span class="line">    dealDate: vm.dealDate</span><br><span class="line">  &#125;);</span><br><span class="line">  $state.go(<span class="string">'moneyio-charge-succ'</span>);</span><br><span class="line">&#125;, (r)=&gt;&#123;</span><br><span class="line">  <span class="comment">// 自定义的错误处理</span></span><br><span class="line">  $temp.set(<span class="string">'charge'</span>, r.data);</span><br><span class="line">  $state.go(<span class="string">'moneyio-charge-error'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="u5177_u4F53_u5B9E_u73B0"><a href="#u5177_u4F53_u5B9E_u73B0" class="headerlink" title="具体实现"></a>具体实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ngInject</span></span><br><span class="line"><span class="keyword">var</span> indicator = ($injector, $timeout, $q, $rootScope) =&gt; &#123;</span><br><span class="line">  <span class="keyword">var</span> $ionicLoading, $notice, $compile;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> toggleGlobalIndicator = tplMethod(()=&gt; &#123;</span><br><span class="line">    $ionicLoading.show(&#123;</span><br><span class="line">      template: <span class="string">'&lt;ion-spinner icon="ios"&gt;&lt;/ion-spinner&gt;'</span>,</span><br><span class="line">      animation: <span class="string">'fade-in'</span>,</span><br><span class="line">      showBackdrop: <span class="literal">true</span> <span class="comment">// 通过黑透明遮罩，来模态</span></span><br><span class="line">      <span class="comment">// showDelay: 100</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;, ()=&gt;&#123;</span><br><span class="line">    $ionicLoading.hide()</span><br><span class="line">  &#125;, <span class="number">800</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> toggleBtnIndicator = tplMethod((target)=&gt;&#123;</span><br><span class="line">    $compile = $injector.get(<span class="string">'$compile'</span>);</span><br><span class="line">    <span class="comment">// avoid chain indicator</span></span><br><span class="line">    <span class="keyword">if</span>($(target).find(<span class="string">'ion-spinner'</span>).length) <span class="keyword">return</span>;</span><br><span class="line">    $(target).prepend(</span><br><span class="line">      $compile(<span class="string">'&lt;ion-spinner icon="ios-small"&gt;&lt;/ion-spinner&gt;'</span></span><br><span class="line">    )($rootScope));</span><br><span class="line">    target.disabled = <span class="literal">true</span>;</span><br><span class="line">  &#125;, (target)=&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span>(!target) <span class="keyword">return</span>;</span><br><span class="line">    target.disabled = <span class="literal">false</span>;</span><br><span class="line">    $(target).find(<span class="string">'ion-spinner'</span>).remove();</span><br><span class="line">  &#125;, <span class="number">3000</span>); <span class="comment">// 至少3s的显示</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handleRequest</span>(<span class="params">conf</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!_.isUndefined(conf.indicator)) &#123;</span><br><span class="line">      conf.timeout = <span class="number">10000</span>; <span class="comment">// default timeout</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!conf.indicator) <span class="keyword">return</span>;</span><br><span class="line">    conf.indicator === <span class="string">'global'</span></span><br><span class="line">      ? toggleGlobalIndicator(<span class="literal">true</span>)</span><br><span class="line">      : toggleBtnIndicator(<span class="literal">true</span>, conf.indicator);</span><br><span class="line">    <span class="comment">// whether post/delete auto set global indicator</span></span><br><span class="line">    <span class="comment">// check conf.method POST DELETE</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handleResponse</span>(<span class="params">r</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!r.config) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(_.isUndefined(r.config.indicator)) <span class="keyword">return</span>;</span><br><span class="line">    r.config.indicator === <span class="string">'global'</span></span><br><span class="line">      ? toggleGlobalIndicator(<span class="literal">false</span>)</span><br><span class="line">      : toggleBtnIndicator(<span class="literal">false</span>, r.config.indicator);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    request: <span class="function"><span class="keyword">function</span>(<span class="params">conf</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// $ionicLoading 依赖需要动态的插入，避免循环引用</span></span><br><span class="line">      $ionicLoading = $injector.get(<span class="string">'$ionicLoading'</span>);</span><br><span class="line">      handleRequest(conf);</span><br><span class="line">      <span class="keyword">return</span> conf || $q.when(conf);</span><br><span class="line">    &#125;,</span><br><span class="line">    response: <span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">      $ionicLoading = $injector.get(<span class="string">'$ionicLoading'</span>);</span><br><span class="line">      handleResponse(response);</span><br><span class="line">      <span class="keyword">return</span> response;</span><br><span class="line">    &#125;,</span><br><span class="line">    responseError: <span class="function"><span class="keyword">function</span>(<span class="params">rejection</span>) </span>&#123;</span><br><span class="line">      handleResponse(rejection);</span><br><span class="line">      <span class="comment">// check rejection.config.ignoreErr</span></span><br><span class="line">      <span class="keyword">if</span>(rejection.status === <span class="number">403</span>) &#123;</span><br><span class="line">        $rootScope.$storage.userData = <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// auto redirect to login?!</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(rejection.data &amp;&amp; !_.isUndefined(rejection.data.error)) &#123;</span><br><span class="line">        <span class="comment">// ignoreErr 来允许HTTP API 使用方直接定制错误处理</span></span><br><span class="line">        <span class="keyword">if</span>(!rejection.config.ignoreErr) &#123;</span><br><span class="line">          $notice = $injector.get(<span class="string">'$notice'</span>);</span><br><span class="line">          $timeout(()=&gt;&#123;</span><br><span class="line">            $notice.error(rejection.data.error);</span><br><span class="line">          &#125;, <span class="number">100</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> $q.reject(rejection);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">tplMethod</span>(<span class="params">yes, no, span</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> time, delta</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">bool</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> args = _.toArray(<span class="built_in">arguments</span>)</span><br><span class="line">      args.shift();</span><br><span class="line">      <span class="keyword">if</span>(bool) &#123;</span><br><span class="line">        time = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">        yes.apply(<span class="literal">null</span>, args);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        delta = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime() - time;</span><br><span class="line">        $timeout(()=&gt;&#123;</span><br><span class="line">          no.apply(<span class="literal">null</span>, args); <span class="comment">// why not Fn.bind</span></span><br><span class="line">        &#125;, <span class="number">0</span>); <span class="comment">// span - delta</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> indicator;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="u4E3A_u4EC0_u4E48"><a href="#u4E3A_u4EC0_u4E48" class="headerlink" title="为什么"></a>为什么</h3><p>用户在使用你的产品需要及时的反馈，譬如在拉取后端数据时候，在做了某些涉及后端]]>
    </summary>
    
      <category term="Angular" scheme="http://sivagao.com/tags/Angular/"/>
    
      <category term="JavaScript" scheme="http://sivagao.com/tags/JavaScript/"/>
    
      <category term="技术-前端开发" scheme="http://sivagao.com/categories/%E6%8A%80%E6%9C%AF-%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[【Angular】使用 ngMockE2E 模拟 api 数据]]></title>
    <link href="http://sivagao.com/2015-08/angular-ngmocke2e-mock-data/"/>
    <id>http://sivagao.com/2015-08/angular-ngmocke2e-mock-data/</id>
    <published>2015-08-06T23:56:29.000Z</published>
    <updated>2016-01-31T13:22:00.000Z</updated>
    <content type="html"><![CDATA[<p>对于那些使用了 $http service 来网络请求的项目中，假冒(fake) HTTP 后端可以用来辅助实现 E2E 测试 或者是 无后端或不依赖后端的开发方式。</p>
<p>注意：对于 假冒(fake) HTTP 后端来实现适合于单元测试的需求，请参阅单元测试 <code>$httpBackend mock</code>。</p>
<p>该模块即包括了，用于构建静态或动态响应数据的拦截式  <code>when</code> api（推荐使用 whenGET, whenPOST 等快捷方法），也包括了如 <code>passthrough</code> 把请求放出的 api，用于一些特定的请求（例如与某些后端接口或从开发服务器gulp connect 中获取模板文件等）</p>
<h2 id="u5173_u952E_u4EE3_u7801_uFF1A"><a href="#u5173_u952E_u4EE3_u7801_uFF1A" class="headerlink" title="关键代码："></a>关键代码：</h2><ul>
<li>1 通过全局的 DEBUG 变量来看是否要注入 ngMockE2E 模块</li>
<li>2 通过 whenGET, whenPOST, passThrough 配置要拦截和放行的URL 和 预期的后端响应数据</li>
<li>3 加入一个 http interceptor 来 加入延迟，便于注入 webpack 的 sourcemap 代码注入到 devtools 这样断点才能打到 uncompiled raw es6 代码上</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> App = angular.module(<span class="string">'gfInvest'</span>, [</span><br><span class="line">     <span class="comment">// your ng module dependencies defined here</span></span><br><span class="line">]);</span><br><span class="line"><span class="keyword">if</span>(DEBUG) &#123;</span><br><span class="line">  App.requires.push(<span class="string">'ngMockE2E'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(DEBUG) &#123;</span><br><span class="line">  <span class="comment">// http-status, response body, response headers </span></span><br><span class="line">  $httpBackend.whenPOST(<span class="regexp">/send_sms_key/</span>).respond([<span class="number">200</span>, &#123;&#125;, &#123;&#125;]);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// just response body</span></span><br><span class="line">  $httpBackend.whenGET(<span class="regexp">/flash_sale/</span>).respond(&#123;</span><br><span class="line">    products: [&#123;</span><br><span class="line">      title: <span class="string">'定增宝3号进取'</span>,</span><br><span class="line">      extra2: &#123;</span><br><span class="line">        qgjs: <span class="number">0</span>, <span class="comment">// 非0表示抢购结束</span></span><br><span class="line">        flashsale_start: <span class="string">'20150731'</span>,</span><br><span class="line">        flashsale_end: <span class="string">'20151203'</span>,</span><br><span class="line">        yqsyl: <span class="number">6.22</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// some dynamic data (recommend using faker.js)</span></span><br><span class="line">  $httpBackend.whenGET(<span class="regexp">/.*query_balance/</span>).respond(&#123;</span><br><span class="line">    sharelist: _.times(<span class="number">3</span>, _.partial(_.random, <span class="number">1</span>, <span class="number">6</span>, <span class="literal">false</span>));</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  $httpBackend.whenGET(<span class="regexp">/.*/</span>).passThrough();</span><br><span class="line">  $httpBackend.whenPOST(<span class="regexp">/.*/</span>).passThrough();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// add delay for $httpBackend when mocking</span></span><br><span class="line"><span class="comment">// for webpack sourcemap to load devtools to debug...</span></span><br><span class="line">App.config(<span class="function"><span class="keyword">function</span>(<span class="params">$provide</span>) </span>&#123;</span><br><span class="line">  $provide.decorator(<span class="string">'$httpBackend'</span>, ($delegate)=&gt;&#123;</span><br><span class="line">    <span class="keyword">var</span> proxy = (method, url, data, callback, headers)=&gt;&#123;</span><br><span class="line">      <span class="keyword">var</span> interceptor = ()=&gt;&#123;</span><br><span class="line">        <span class="keyword">var</span> _this = <span class="keyword">this</span>,</span><br><span class="line">            _arguments = <span class="built_in">arguments</span>;</span><br><span class="line">        setTimeout(()=&gt; &#123;</span><br><span class="line">            callback.apply(_this, _arguments);</span><br><span class="line">        &#125;, <span class="number">700</span>);</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">return</span> $delegate.call(<span class="keyword">this</span>, method, url, data, interceptor, headers);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> $delegate) &#123;</span><br><span class="line">      proxy[key] = $delegate[key];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> proxy;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>对于那些使用了 $http service 来网络请求的项目中，假冒(fake) HTTP 后端可以用来辅助实现 E2E 测试 或者是 无后端或不依赖后端的开发方式。</p>
<p>注意：对于 假冒(fake) HTTP 后端来实现适合于单元测试的需求，请参阅单元测试 <c]]>
    </summary>
    
      <category term="Angular" scheme="http://sivagao.com/tags/Angular/"/>
    
      <category term="JavaScript" scheme="http://sivagao.com/tags/JavaScript/"/>
    
      <category term="技术-前端开发" scheme="http://sivagao.com/categories/%E6%8A%80%E6%9C%AF-%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[【读书笔记】人生定位]]></title>
    <link href="http://sivagao.com/2015-07/book-note-position-of-life/"/>
    <id>http://sivagao.com/2015-07/book-note-position-of-life/</id>
    <published>2015-07-17T10:56:29.000Z</published>
    <updated>2016-01-30T14:33:05.000Z</updated>
    <content type="html"><![CDATA[<h2 id="u57FA_u672C_u4FE1_u606F"><a href="#u57FA_u672C_u4FE1_u606F" class="headerlink" title="基本信息"></a>基本信息</h2><p>书名： Horse Sense:The Keys of Success Is Finding a Horse to Ride<br>出版年：2011-9<br>页数：284<br>ISBN：9787111355588<br><a id="more"></a> </p>
<h2 id="u4E3A_u4EC0_u4E48_u60F3_u8BFB_uFF1A"><a href="#u4E3A_u4EC0_u4E48_u60F3_u8BFB_uFF1A" class="headerlink" title="为什么想读："></a>为什么想读：</h2><p>人生定位 （原书叫“赛马理论”，颠覆我的人生规划，如何投入少回报大，而不是傻努力。）成功不是你能自发产生的结果,成功的关键是你能从别人那里获得什么 - 重点看：企业型赛马，他人/伙伴型赛马等</p>
<h2 id="u8BB0_u5F55_uFF1A"><a href="#u8BB0_u5F55_uFF1A" class="headerlink" title="记录："></a>记录：</h2><p>2015年07月16日 入库想读，做基本信息收集<br>2016年01月14日 导入到MWeb</p>
<h2 id="u76EE_u5F55_uFF1A"><a href="#u76EE_u5F55_uFF1A" class="headerlink" title="目录："></a>目录：</h2><p>不能再指望有个为你打点一切的老大哥了。这是个全新的竞争世界，人力图成功。但是，孤军奋战必将失败，善用他人才能成功。</p>
<p>第1章 你错了，诺曼·文森特先生<br>有许多关于成功的理论，要么强调相信自己，要么强调设定目标。可是，这些理论解决不了实际生活中的问题。</p>
<ul>
<li>自信心成功理论</li>
<li>设定目标的成功理论</li>
</ul>
<p>第2章 嘿，老爸，给我5 000万美元<br>怎么样，不管你是不是聪明绝顶或者目标远大，有个富爸爸，有人肯帮你，你就能过上好日子。</p>
<ul>
<li>我要自己做</li>
<li>善用生活中的不利因素</li>
<li>什么是成功</li>
</ul>
<p>第3章 高风险赛马<br>赛场上的马匹各式各样，有些马的胜率明显要比别的马高，尽量避免高风险的赌注。</p>
<ul>
<li>努力型赛马：100∶1</li>
<li>智商型赛马：75∶1</li>
<li>教育型赛马：60∶1</li>
<li>企业型赛马：50∶1</li>
</ul>
<p>第4章 中等风险赛马<br>高风险赌注意味着完全依赖自己身上的某种东西，买中等风险的赛马就是认为成功要部分依靠自己，部分借助外力。</p>
<ul>
<li>才华型赛马：25∶1</li>
<li>爱好型赛马：20∶1</li>
<li>地利型赛马：15∶1</li>
<li>宣传型赛马：10∶1</li>
</ul>
<p>第5章 低风险赛马<br>低风险的赛马就是把成功的希望全部寄托在外界帮助上。这里介绍六种最重要的低风险赌注，一种来自联姻。</p>
<ul>
<li>产品型赛马：5∶1</li>
<li>创意型赛马：4∶1</li>
<li>他人型赛马：3∶1</li>
<li>伙伴型赛马：5∶2</li>
<li>配偶型赛马：2∶1</li>
<li>家族型赛马：3∶2</li>
</ul>
<p>第6章 企业型赛马<br>选择加盟大企业，等于骑上一匹赔率为50∶1的赛马。你得学习如何处理人际关系</p>
<ul>
<li>做一只“早起的鸟儿”</li>
<li>做一个政治家</li>
<li>做一个耀眼的人</li>
<li>做一名英雄</li>
<li>做一个救星</li>
</ul>
<p>第7章 产品型赛马<br>这倒不需要你自己有多少创新本领，如何发现别人的能力才是成功的关键</p>
<ul>
<li>发明常与领悟相伴</li>
<li>警惕市场调研</li>
<li>你获得大量的事先警告</li>
<li>未来与过去几多相似</li>
<li>简单概念好于复杂概念</li>
<li>学会如何说:“就这样了”</li>
<li>如果你找不到产品，那就找出问题来</li>
<li>你永远不会太年轻</li>
<li>你永远不会太老</li>
<li>不要轻信媒体炒作</li>
<li>当偶然事件发生时</li>
<li>当不测事件发生时</li>
</ul>
<p>第8章 创意型赛马<br>你不必对每件事都有什么奇思妙想，不过要学会从杂乱的思想中辨别出真正火花。</p>
<ul>
<li>每个人都是专家</li>
<li>识别一个好创意</li>
<li>想出一个好创意</li>
<li>把你的创意推销给外人</li>
<li>保护和培养一个创意</li>
<li>应对夹道攻击</li>
<li>贯彻实施和提供资金</li>
</ul>
<p>第9章 他人型赛马<br>下工夫找一个好老板是值得肯定的。问题在于怎样找到一个值得休戚与共的老板，关于这点，我们有张清单，一定会让你大吃一惊。</p>
<ul>
<li>找一个老板当坐骑</li>
<li>瞄准最高点</li>
<li>找个同事当坐骑</li>
<li>找个朋友当坐骑</li>
<li>利用名人当坐骑</li>
</ul>
<p>第10章 伙伴型赛马<br>面临险境时，两个人的机会要比一个人的多，因为很少有人能对自己的想法做出正确的判断。孤独者常常会因为过于自负而受伤。</p>
<ul>
<li>音乐合作伙伴</li>
<li>电视合作伙伴</li>
<li>电影合作伙伴</li>
<li>商业合作伙伴</li>
<li>婚姻伙伴</li>
<li>寻找伙伴</li>
</ul>
<p>第11章 配偶型赛马<br>婚姻越来越多地成为一种经济合伙形式，你的配偶可以为你的职业或者事业做出五种明显的贡献。</p>
<ul>
<li>资金</li>
<li>关系</li>
<li>鼓励</li>
<li>家族</li>
<li>遗产</li>
</ul>
<p>第12章 家族型赛马<br>家族的纽带是一个人职业发展的重要财富，有这么多人只专注于“做自己的事”，而忽略了家族的力量，真让人吃惊。</p>
<ul>
<li>学会分享权力</li>
<li>家族纷争进行时</li>
<li>打造家族王国</li>
<li>女性骑手</li>
<li>发挥家族姓氏的作用</li>
</ul>
<p>第13章 更换赛马<br>时间在变，形势在变。很多时候我们不得不转变，可是有三种恐惧让我们不敢接受转变。</p>
<ul>
<li>出现新兴行业之时</li>
<li>当竞争态势转变时</li>
<li>企业形势发生变化时</li>
<li>当百年难遇的机会来敲门时</li>
<li>当你落入窠臼不可自拔之时</li>
<li>畏惧变化</li>
</ul>
<p>第14章 没有第二幕<br>很多原本成功的企业曾将自己的本行转手而试图开拓新业务，可惜没几家企业能够成功。</p>
<ul>
<li>特朗普式陷阱</li>
<li>卷土重来</li>
<li>为什么二次创业会如此困难</li>
<li>失败是错失良机的结果</li>
<li>v重演第一幕</li>
</ul>
<p>第15章 借口，还是借口<br>如果你已经准备好不再寻找借口而是加入比赛，这里有七种寻找合适赛马的指南，遵循这些指示，好戏即将开始。</p>
<ul>
<li>人格魅力比智力更重要</li>
<li>机会绝对均等永远不会存在</li>
<li>放弃梦想—把握机遇</li>
<li>规划事业就是强化错觉</li>
<li>永远不会为时过早，也永远不会为时过晚</li>
<li>管住嘴不后悔</li>
<li>到新领域去寻找你的赛马</li>
</ul>
<p>译者后记</p>
<ul>
<li>附录A 特劳特思想应用</li>
<li>附录B 企业家感言</li>
</ul>
<h2 id="u5185_u5BB9_u6458_u8981_uFF1A"><a href="#u5185_u5BB9_u6458_u8981_uFF1A" class="headerlink" title="内容摘要："></a>内容摘要：</h2><p>书一开始讲了『关于成功的理论，要么强调相信自己，要么强调设定目标』一是自信心成功理论，二是设定目标成功理论。接入引入要借助外力，不要蛮干。<br>成功是什么：成功不是相互排斥的，你不必苦苦追寻一个有一个目标。金钱，权力，地位，认可，幸福和友情往往是结伴而来的。 凡事有个度，不要被成功冲昏了头脑。过分痴迷成功让你欲壑难填。</p>
<p>个人营销策略：你计划如何在人生的阶梯不断攀升？人生如一场赛马，你作为骑师，驾驭本身或者通其他马，来参与比赛。 接着分别罗列了三大类赛马</p>
<p>高风险赛马，恰恰是人民骑得最多的马匹。包括了：</p>
<ul>
<li>努力型赛马 - 要努力工作(100)，</li>
<li>智商型赛马 - 越聪明越自负不找他人帮忙（75）</li>
<li>教育型赛马 - 好学历让你进入赛道而不是更快（60）</li>
<li>企业型赛马 - 高管升迁之路迂回如意大利面（50）</li>
</ul>
<p>中等风险赛马，利用你内在的东西但也借助他人外界。包括了：</p>
<ul>
<li>才华型赛马 - 出版商观众等外界认可和包装（25）</li>
<li>爱好型赛马 - 或许度假和工作所做事一致，爱做多做做得好更自信循环（20）</li>
<li>地利型赛马 - 从接受难以改变的开始，改变自己（你特殊的relocation和地缘）（15）</li>
<li>宣传型赛马 - 一篇文章/作品，让大家知道你，宣传自己（标新立异）震荡初级，闯出新闻</li>
</ul>
<p>低风险赛马，完全取决于外力支持。包括了：</p>
<ul>
<li>产品型赛马 - 认可他人天赋和发明，经销权（5）</li>
<li>创意型赛马 - 敢于被非议（4）</li>
<li>他人型赛马 - 别人认识你的优秀，给你工作和晋升（要顺路不是跟他去他想去的地方）（3）</li>
<li>伙伴型赛马 -  彼此信任，相互支持建议，而不是让自我意识压过你的个人能力（2.5）</li>
<li>配偶型赛马 - 依靠配偶支持，而不是『我想自己做』（离婚）（2）</li>
<li>家族型赛马 - （1.5）</li>
</ul>
<p>接着重点讲了：<br>企业型赛马和低风险赛马中的几种赛马</p>
<h3 id="u4F01_u4E1A_u8D5B_u9A6C"><a href="#u4F01_u4E1A_u8D5B_u9A6C" class="headerlink" title="企业赛马"></a>企业赛马</h3><p>总体原则：企业越大，赔率越高（人多路窄。100受雇，10人中层，1人高管）</p>
<p>五种策略：</p>
<ul>
<li>1 早起的鸟 - 初创加入趁早，企业领先，行业领先（如三十年代的航空业，四十年代的无线电，五十年代的电视业，八十年代的个人电脑，世纪初的互联网，10年的移动互联网等）</li>
<li>2 政治家 - 在大企业要学会委婉，说的比做的重要（做一个克隆人，找一个保人，进入快车道名单）</li>
<li>3 耀眼的人 - 把自己展现给管理层（好运，人际关系，精彩的演讲）</li>
<li>4 英雄 - 让自己与企业的拳头产品服务联系在一起（尤其是经营良好时内部提拔人才）</li>
<li>5 救星 - 企业困境时，你骑白马迅速到达高峰</li>
</ul>
<h3 id="u4F4E_u98CE_u9669_u8D5B_u9A6C"><a href="#u4F4E_u98CE_u9669_u8D5B_u9A6C" class="headerlink" title="低风险赛马"></a>低风险赛马</h3><h4 id="u4EA7_u54C1_u578B_u8D5B_u9A6C"><a href="#u4EA7_u54C1_u578B_u8D5B_u9A6C" class="headerlink" title="产品型赛马"></a>产品型赛马</h4><p>没有创新天赋也能跨上这匹赛马，发明者和意识到价值的人<br>你不一定要介入原产品中，可以做周边辅助产品的业务<br>用一种开放的心态看待生活，你就永远不会太老。<br>当你看到那匹能带你到达顶峰的赛马时，不要犹豫。放弃你所在做的一切，跳上马背。你可能永远都不会再有这样的机会了</p>
<h4 id="u521B_u610F_u578B_u8D5B_u9A6C"><a href="#u521B_u610F_u578B_u8D5B_u9A6C" class="headerlink" title="创意型赛马"></a>创意型赛马</h4><h4 id="u4ED6_u4EBA_u578B_u8D5B_u9A6C"><a href="#u4ED6_u4EBA_u578B_u8D5B_u9A6C" class="headerlink" title="他人型赛马"></a>他人型赛马</h4><p>结交合适的人（其他：跟富人联姻，以漂亮干净合法的方式窃取），最可能帮你取得胜利<br>你的老板，同事，朋友，名人</p>
<h4 id="u4F19_u4F34_u578B_u8D5B_u9A6C"><a href="#u4F19_u4F34_u578B_u8D5B_u9A6C" class="headerlink" title="伙伴型赛马"></a>伙伴型赛马</h4><p>当双方既是商业伙伴又有婚姻关系，这是强有力的组合。他们往往更坦率和城市<br>寻找合作伙伴时，态度最重要，你要保持思想的开放。学会尊重伙伴的意见</p>
<h4 id="u914D_u5076_u578B_u8D5B_u9A6C"><a href="#u914D_u5076_u578B_u8D5B_u9A6C" class="headerlink" title="配偶型赛马"></a>配偶型赛马</h4><p>资金，关系，鼓励，家族，遗产<br>最好的事情也许是提供一剂鼓励的良药</p>
<h4 id="u5BB6_u65CF_u578B_u8D5B_u9A6C"><a href="#u5BB6_u65CF_u578B_u8D5B_u9A6C" class="headerlink" title="家族型赛马"></a>家族型赛马</h4><h3 id="u66F4_u6362_u8D5B_u4E70"><a href="#u66F4_u6362_u8D5B_u4E70" class="headerlink" title="更换赛买"></a>更换赛买</h3><p>最后讲了：<br>接受改变，更换赛马（出现新兴行业之时，当竞争态势转变时，企业形势发生变化时）<br>我们都希望人生的曲线能平稳按预期向上延伸，但是变化（常常是意外变化）才正是人生取得极大成功的必要条件。很多人不曾接近过自己的真实潜力，这并不是因为努力不够，，不是找不到好坐骑，而是他们害怕改变。去打破，去放弃熟悉带来的舒适感，甘愿忍受不熟悉说带来的压力。往往不是说『但你原来的工作不再充满乐趣的时候，你就去寻找另外一份工作』，远在你的工作给你造成困扰前，你就应该抬腿走人了。</p>
<p>成功人士去拓展业务为什么失败（认清成功中的形式运气天时和他人的作用，而不是被被光环认为全是自身努力）</p>
<h3 id="u8D5B_u9A6C_u6307_u5357"><a href="#u8D5B_u9A6C_u6307_u5357" class="headerlink" title="赛马指南"></a>赛马指南</h3><ul>
<li>人格魅力比智力更重要：<br>个性是笔巨大的财富，你风趣幽默风度翩翩，你关注本质意外的东西他人身上（而不是自我意识太强）</li>
<li>机会绝对均等永远不会存在：<br>创造条件，而不是缺乏机遇为借口而嫉妒偷懒埋怨</li>
<li>放弃梦想—把握机遇：<br>大多数人活在巨大的美梦中（但美梦滋润她，支撑她，辜负她）。千里之行始于足下，稳固的路慢慢前行，火箭冲天也会跌下来疾如闪电。</li>
<li>规划事业就是强化错觉：<br>变化太快，不要妄想HR会细心引导你沿着企业台阶步步向上被培养和爱护并提拔。<br>全力以赴的骑在马上！</li>
<li>永远不会为时过早，也永远不会为时过晚：<br>保持年轻，更开放接受新思想和潮流乐于挑战。乐于放下一切，翻身上马，不能携带太多积存的行李。</li>
<li>管住嘴不后悔：<br>多倾听让他人敞开心扉告诉你信息（常点头说interesting），为大型企业做营销咨询时答案往往来自于聘请我们的人之口。</li>
<li>到新领域去寻找你的赛马：<br>把自己置身于事件将要发生之地，希望自己始终在处理寻找坐骑的状态。机会几乎总是出现在新领域，是新领域创造机会而不是你！</li>
</ul>
<h2 id="u4ED6_u4EBA_u8BC4_u4EF7_uFF1A"><a href="#u4ED6_u4EBA_u8BC4_u4EF7_uFF1A" class="headerlink" title="他人评价："></a>他人评价：</h2><p>『干货很多，指出一条可以选择的明路，列出企业发展中定位的真谛，对个人成长至关重要！1.剖析了大企业公司政治的真实面，大部分人都不适合那样的升迁。大公司混要像猫一样聪明，像狗一样忠诚，经常在高层前露脸，成为他们的人，做一个演讲高手！另外专业第三方很多时候有更多接触公司高层的机会，也是种不错的路径。2.做产品 3.做创意 4.取势(名校 名企 贵人 伙伴 婚姻)。必要时候还得变换习以为常的模式，不只是换工作。不要忘记自己最初是靠什么成功的！保持清醒，不要超越自己能力忘乎所以！自负往往是第二次创业失败多的根源！人格魅力胜过智慧，需要好好磨练！必须面向外部世界敞开你的胸怀，从自身因素之外去寻找成功的道路。』</p>
<p>不要只盯着自己，你要看看外面借助外力，找到一匹好马，你的人生会精彩纷呈。个人定位是走出去推销自己、打入周边他人心智的过程。 企业、产品、创意、他人、伙伴、配偶、家族 七匹马</p>
<ul>
<li>1、企业型赛马：较早发现一家快速增长的企业，并在其中发现关键作用</li>
<li>2、产品型赛马：发明一个有潜力的产品，或者找到发明人，一起释放这个产品的潜在价值</li>
<li>3、创意型赛马：想出一个好的创意，并强烈的推销、传播给他人，切忌不可太超前</li>
<li>4、他人型赛马：找到一个好老板，老板才是最好的坐骑；</li>
<li>5、伙伴型赛马：找到一个好伙伴，小伙伴也是最好的千里马</li>
<li>6、配偶型赛马：有一个好老婆，相夫教子、事业型伙伴，后面有个土豪型丈母娘也不错</li>
<li>7、家族型赛马：有个好出身，富二代们的好选择</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u57FA_u672C_u4FE1_u606F"><a href="#u57FA_u672C_u4FE1_u606F" class="headerlink" title="基本信息"></a>基本信息</h2><p>书名： Horse Sense:The Keys of Success Is Finding a Horse to Ride<br>出版年：2011-9<br>页数：284<br>ISBN：9787111355588<br>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[【Node】16年，新 Node 项目注意点]]></title>
    <link href="http://sivagao.com/2011-05/test-pictures/"/>
    <id>http://sivagao.com/2011-05/test-pictures/</id>
    <published>2011-05-28T23:56:29.000Z</published>
    <updated>2016-01-30T14:13:04.000Z</updated>
    <content type="html"><![CDATA[<!-- Built-in tag (Require NexT 0.4.5 or above) -->
<blockquote class="blockquote-center"><p>blah blah blah</p>
</blockquote>
<!-- 别名 -->
<blockquote class="blockquote-center"><p>blah blah blah</p>
</blockquote>
<!-- Built-in tag (Require NexT 0.4.5 or above) -->
<img src="/images/14526815265643.jpg" class="full-image" alt="alt" title="title">
<!-- 别名 -->
<img src="/images/14526815265643.jpg" class="full-image" alt="alt" title="title">
<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 100%;"><img src="/images/14526815265643.jpg" alt=""></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 25%;"><img src="/images/14526815265643.jpg" alt=""></div><div class="group-picture-column" style="width: 25%;"><img src="/images/14526815265643.jpg" alt=""></div><div class="group-picture-column" style="width: 25%;"><img src="/images/14526815265643.jpg" alt=""></div><div class="group-picture-column" style="width: 25%;"><img src="/images/14526815265643.jpg" alt=""></div></div></div></div>]]></content>
    <summary type="html">
    <![CDATA[<!-- Built-in tag (Require NexT 0.4.5 or above) -->
<blockquote class="blockquote-center"><p>blah blah blah</p>
</blockquote>
<!-- 别名 -->
<b]]>
    </summary>
    
  </entry>
  
</feed>
